---
name: Update Spec/SDK

on:  # yamllint disable-line rule:truthy
  schedule:
  - cron:  '0 0 * * 6'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  GITHUB_TOKEN: ${{ secrets.PAT }}
  URL: https://api.pluggy.ai/oas3.json

jobs:
  GenerateSDK:
    name: Generate Updated SDK
    runs-on: ubuntu-latest

    permissions:
      contents: write  # Required for commiting to the repository.

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Download OAS
      id: new-oas
      run: |
        set -x

        if [[ -f lib/setup.py ]]; then
          INITIAL_VERSION=$(grep 'VERSION = ' lib/setup.py | grep -E -o '[0-9][^"]*')
        else
          INITIAL_VERSION=$(jq -r '.info.version' pluggy-oas3.json)
        fi
        BASE_VERSION="${INITIAL_VERSION//.post*}"

        echo "INITIAL_VERSION=${INITIAL_VERSION}" >> "${GITHUB_ENV}"
        echo "INITIAL_VERSION=${INITIAL_VERSION}" >> "${GITHUB_OUTPUT}"
        echo "INITIAL_VERSION: ${INITIAL_VERSION}"

        wget "${URL}" -O pluggy-oas3.json
        git status --short

        NEW_VERSION=$(jq -r '.info.version' pluggy-oas3.json)

        if [[ "${BASE_VERSION}" == "${NEW_VERSION}" ]]; then

          if [[ "${INITIAL_VERSION}" =~ ^.*\.post.*$ ]]; then
            SUFFIX_VERSION="$(echo "${INITIAL_VERSION}" | sed 's/.*\.post//g')"
            SUFFIX_VERSION="post$(expr $SUFFIX_VERSION + 1)"
          else
            SUFFIX_VERSION="post1"
          fi

          NEW_VERSION="${NEW_VERSION}.${SUFFIX_VERSION}"
        fi

        echo "NEW_VERSION=${NEW_VERSION}" >> "${GITHUB_ENV}"
        echo "NEW_VERSION=${NEW_VERSION}" >> "${GITHUB_OUTPUT}"
        echo "NEW_VERSION: ${NEW_VERSION}"

    - name: Check diff
      id: has-diff
      run: |
        CHANGED_FILES=$(git status --short | grep pluggy-oas3.json | wc -l)
        echo "changed-files=${CHANGED_FILES}" >> "${GITHUB_OUTPUT}"
        echo "Changed Files: ${CHANGED_FILES}"
        echo "git status --short"

    - name: Commit new Spec
      if: steps.has-diff.outputs.changed-files == 1
      uses: stefanzweifel/git-auto-commit-action@v5
      with:
        commit_author: "Diego Rabatone Oliveira <diraol@diraol.eng.br>"
        commit_message: "[ci] Update OAS Spec ${{ steps.new-oas.outputs.NEW_VERSION }}"
        file_pattern: 'pluggy-oas3.json'

    - name: Generate OpenAPI Python Client
      if: steps.has-diff.outputs.changed-files == 1
      uses: openapi-generators/openapitools-generator-action@v1
      with:
        command-args: "--output=lib --additional-properties=packageName=pluggy_sdk,packageUrl=https://github.com/diraol/pluggy-python,packageVersion=${{ steps.new-oas.outputs.NEW_VERSION }},projectName=pluggy-sdk"
        generator: python
        openapi-file: pluggy-oas3.json

    - name: Commit new SDK
      if: steps.has-diff.outputs.changed-files == 1
      uses: stefanzweifel/git-auto-commit-action@v5
      with:
        commit_author: "Diego Rabatone Oliveira <diraol@diraol.eng.br>"
        commit_message: "[ci] Commit new SDK ${{ steps.new-oas.outputs.NEW_VERSION }}"
        file_pattern: 'lib/*'
        push_options: '--force'
        tagging_message: v${{ steps.new-oas.outputs.NEW_VERSION}}

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.x"

    - name: Install pypa/build
      run: >-
        python3 -m
        pip install
        build
        --user

    - name: Patch Setup.py
      run: |
        # Replace multiline long_description with a hold marker
        sed -i -e '/long_description=/,/"""/d' -e '/long_description_content_type/a --HOLD--' lib/setup.py
        # Replace the hold marker with our new long_description definition
        sed -i 's/^--HOLD--$/    long_description=long_description,/g' lib/setup.py
        # Add code lines that read the README.md file
        sed -i -e '/setup(/r .github/files/setup_py_patch' -e //N lib/setup.py

    - name: Build a binary wheel and a source tarball
      id: build
      run: python3 -m build
      working-directory: ./lib

    - name: Store the distribution packages
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: lib/dist/

  publish-to-pypi:
    name: Publish Python 🐍 distribution 📦 to PyPI
    needs: GenerateSDK
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/python_sdk
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

    - name: Publish distribution 📦 to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1

  github-release:
    name: >-
      Sign the Python 🐍 distribution 📦 with Sigstore
      and upload them to GitHub Release
    needs:
    - publish-to-pypi
    runs-on: ubuntu-latest
    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases
      id-token: write  # IMPORTANT: mandatory for sigstore

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    - name: Sign the dists with Sigstore
      uses: sigstore/gh-action-sigstore-python@v2
      with:
        inputs: >-
          ./dist/*.tar.gz
          ./dist/*.whl
    - name: Create GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: >-
        gh release create
        '${{ github.ref_name }}'
        --repo '${{ github.repository }}'
        --notes ""
    - name: Upload artifact signatures to GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      # Upload to GitHub Release using the `gh` CLI.
      # `dist/` contains the built packages, and the
      # sigstore-produced signatures and certificates.
      run: >-
        gh release upload
        '${{ github.ref_name }}' dist/**
        --repo '${{ github.repository }}'

