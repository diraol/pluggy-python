{
  "openapi": "3.0.3",
  "info": {
    "title": "Pluggy API",
    "description": "Pluggy's main API to review data and execute connectors",
    "license": {
      "name": "MIT"
    },
    "contact": {
      "email": "hello@pluggy.ai",
      "name": "Pluggy",
      "url": "https://pluggy.ai"
    },
    "version": "1.0.0"
  },
  "paths": {
    "/auth": {
      "post": {
        "operationId": "auth-create",
        "summary": "Create API Key",
        "description": "Validate clientId and clientSecret and return an API Key",
        "tags": [
          "Auth"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API Key generated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "examples": {
                  "clientKeysUnauthorized": {
                    "summary": "Client id and secret are invalid",
                    "value": {
                      "code": 401,
                      "codeDescription": "CLIENT_KEYS_UNAUTHORIZED",
                      "message": "Client keys are invalid"
                    }
                  },
                  "clientDisabled": {
                    "summary": "Client is disabled",
                    "value": {
                      "code": 401,
                      "codeDescription": "CLIENT_DISABLED",
                      "message": "Client is disabled"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/connect_token": {
      "post": {
        "operationId": "connect-token-create",
        "summary": "Create Connect Token",
        "responses": {
          "200": {
            "description": "Created connect token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectTokenResponse"
                }
              }
            }
          },
          "403": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotAuthenticatedResponse"
                }
              }
            }
          },
          "404": {
            "description": "Related itemId to update not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 404,
                  "codeDescription": "ITEM_NOT_FOUND",
                  "message": "item not found"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                }
              }
            }
          }
        },
        "description": "Creates a connect token",
        "tags": [
          "Auth"
        ],
        "requestBody": {
          "description": "Create connect token payload",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectTokenRequest"
              }
            }
          }
        },
        "security": [
          {
            "default": []
          }
        ],
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "code": "const pluggy = require('pluggy-sdk');\nconst client = new pluggy.PluggyClient({\n  clientId: 'YOUR_CLIENT_ID',\n  clientSecret: 'YOUR_CLIENT_SECRET',\n});\nclient\n  .createConnectToken()\n  .then(({ accessToken }) => {\n    console.log(accessToken);\n  });"
            },
            {
              "language": "java",
              "code": "PluggyClient pluggyClient = PluggyClient.builder()\n  .clientIdAndSecret('your_client_id', 'your_secret')\n  .baseUrl('https://api.pluggy.ai')\n  .build();\nResponse<ConnectTokenResponse> connectTokenResponse = pluggyClient.service().createConnectToken().execute();"
            },
            {
              "language": "csharp",
              "code": "PluggyClient pluggyClient = new PluggyClient('YOUR_PLUGGY_API_KEY');\nConnectTokenResponse tokenResponse = await pluggyClient.CreateConnectToken();"
            }
          ]
        }
      }
    },
    "/connectors": {
      "get": {
        "operationId": "connectors-list",
        "summary": "List",
        "description": "This endpoint retrieves all available connectors.",
        "responses": {
          "200": {
            "description": "Retrieve a list of all connectors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectorListResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Connector"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "A list of countries of connectors to filter.",
            "example": "[\"BR\"]",
            "in": "query",
            "name": "countries",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "BR"
                ]
              }
            }
          },
          {
            "description": "A list of types of connectors to filter.",
            "example": "[\"PERSONAL_BANK\", \"BUSINESS_BANK\", \"INVESTMENT\", \"INVOICE\", \"TELECOMMUNICATION\", \"OTHER\"]",
            "in": "query",
            "name": "types",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "PERSONAL_BANK",
                  "BUSINESS_BANK",
                  "INVESTMENT",
                  "INVOICE",
                  "TELECOMMUNICATION",
                  "OTHER"
                ]
              }
            }
          },
          {
            "description": "Name alike look up of the connector",
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Include sandbox connectors if set to true (default: false).",
            "in": "query",
            "name": "sandbox",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Include health details about latest connections and percentage of errors (connection rate)",
            "in": "query",
            "name": "healthDetails",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Filter connectors by the `isOpenFinance` attribute. If not sent, it won't filter.",
            "in": "query",
            "name": "isOpenFinance",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Filter connectors by the `supportsPaymentInitiation` attribute. If not sent, it won't filter.",
            "in": "query",
            "name": "supportsPaymentInitiation",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "code": "const pluggy = require('pluggy-sdk');\nconst client = new pluggy.PluggyClient({\n  clientId: 'YOUR_CLIENT_ID',\n  clientSecret: 'YOUR_CLIENT_SECRET',\n});\n\nclient\n  .fetchConnectors()\n  .then(({ results: connectors }) => {\n    console.log(connectors);\n  });"
            },
            {
              "language": "java",
              "code": "PluggyClient pluggyClient = PluggyClient.builder()\n  .clientIdAndSecret(\"your_client_id\", \"your_secret\")\n  .baseUrl(\"https://api.pluggy.ai\")\n  .build();\nResponse<ConnectorsResponse> connectorsResponse = pluggyClient.service().getConnectors().execute();"
            },
            {
              "language": "csharp",
              "code": "PluggyClient pluggyClient = new PluggyClient(\"YOUR_PLUGGY_API_KEY\");\nList<Connector> connectors = await pluggyClient.FetchConnectors();"
            }
          ]
        }
      }
    },
    "/connectors/{id}": {
      "get": {
        "operationId": "connector-retrieve",
        "summary": "Retrieve",
        "responses": {
          "200": {
            "description": "Retrieve a connector.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Connector"
                }
              }
            }
          },
          "404": {
            "description": "Connector not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 404,
                  "codeDescription": "CONNECTOR_NOT_FOUND",
                  "message": "connector not found"
                }
              }
            }
          }
        },
        "description": "This endpoint retrieves a specific connector.",
        "tags": [
          "Connector"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Connector primary identifier",
            "in": "path",
            "name": "id",
            "example": 201,
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "description": "Include health details about latest connections and percentage of errors (connection rate)",
            "in": "query",
            "name": "healthDetails",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "code": "const pluggy = require('pluggy-sdk');\nconst client = new pluggy.PluggyClient({\n  clientId: 'YOUR_CLIENT_ID',\n  clientSecret: 'YOUR_CLIENT_SECRET',\n});\n\nclient\n  .fetchConnector(201)\n  .then((connector) => {\n    console.log(connector);\n  });"
            },
            {
              "language": "java",
              "code": "PluggyClient pluggyClient = PluggyClient.builder()\n  .clientIdAndSecret(\"your_client_id\", \"your_secret\")\n  .baseUrl(\"https://api.pluggy.ai\")\n  .build();\nResponse<ConnectorResponse> connectorResponse = pluggyClient.service().getConnector(201).execute();"
            },
            {
              "language": "csharp",
              "code": "PluggyClient pluggyClient = new PluggyClient(\"YOUR_PLUGGY_API_KEY\");\nConnector connector = await pluggyClient.FetchConnector(201);"
            }
          ]
        }
      }
    },
    "/connectors/{id}/validate": {
      "post": {
        "operationId": "connectors-validate",
        "summary": "Validate",
        "description": "Validates a connector parameters usign the connector validation",
        "responses": {
          "200": {
            "description": "Connector validation response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParameterValidationResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Connector"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Connector's primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "number",
              "format": "double"
            },
            "example": 2
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ItemParameter"
              }
            }
          },
          "description": "Connector's input credentials in a key-value object.",
          "required": true
        },
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "code": "const pluggy = require('pluggy-sdk');\nconst client = new pluggy.PluggyClient({\n  clientId: 'YOUR_CLIENT_ID',\n  clientSecret: 'YOUR_CLIENT_SECRET',\n});\n\nclient\n  .validateParameters(201, { user: 'my-user' })\n  .then((validationResult) => {\n    console.log(validationResult);\n  });"
            },
            {
              "language": "csharp",
              "code": "PluggyClient pluggyClient = new PluggyClient(\"YOUR_PLUGGY_API_KEY\");\nValidationResult validationResult = await pluggyClient.ValidateCredentials(201, parameters);"
            }
          ]
        }
      }
    },
    "/items": {
      "post": {
        "operationId": "items-create",
        "summary": "Create",
        "responses": {
          "200": {
            "description": "Created item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Item"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemCreationErrorResponse"
                },
                "examples": {
                  "missingMainParameter": {
                    "summary": "Missing main parameter",
                    "value": {
                      "message": "Connector parameters do not match validation rules",
                      "code": 400,
                      "codeDescription": "CONNECTOR_VALIDATION_ERROR",
                      "details": [
                        {
                          "code": "001",
                          "parameter": "user",
                          "message": "user parameter is required"
                        }
                      ]
                    }
                  },
                  "missingMFA": {
                    "summary": "Missing MFA on parameters",
                    "value": {
                      "message": "Connector parameters do not match validation rules",
                      "code": 400,
                      "codeDescription": "CONNECTOR_VALIDATION_ERROR",
                      "details": [
                        {
                          "code": "001",
                          "parameter": "token",
                          "message": "token parameter is required"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "There is a conflict creating an item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 409,
                  "codeDescription": "ITEM_CREATION_LIMIT_EXCEEDED",
                  "message": "Client exceeded item creation limit (100 items) for the current subscription level.",
                  "data": {
                    "itemsLimit": 100
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 500,
                  "codeDescription": "INTERNAL_SERVER_ERROR",
                  "message": "Internal Server Error"
                }
              }
            }
          }
        },
        "description": "Creates a item and syncs all the products with the financial institution, using as credentials the sent parameters.",
        "tags": [
          "Items"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateItem"
              },
              "examples": {
                "Plain parameters": {
                  "value": {
                    "connectorId": 2,
                    "parameters": {
                      "user": "user-ok",
                      "password": "password-ok"
                    },
                    "webhookUrl": "https://example.com/webhook"
                  }
                },
                "Encrypted parameters": {
                  "value": {
                    "connectorId": 2,
                    "parameters": "encrypted-parameters",
                    "webhookUrl": "https://example.com/webhook"
                  }
                }
              }
            }
          },
          "required": true
        },
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "code": "const pluggy = require('pluggy-sdk');\nconst client = new pluggy.PluggyClient({\n  clientId: 'YOUR_CLIENT_ID',\n  clientSecret: 'YOUR_CLIENT_SECRET',\n});\nclient\n  .createItem(2, { user: 'user-ok', password: 'password-ok' })\n  .then((item) => {\n    console.log(item);\n  });"
            },
            {
              "language": "java",
              "code": "PluggyClient pluggyClient = PluggyClient.builder()\n  .clientIdAndSecret('your_client_id', 'your_secret')\n  .baseUrl('https://api.pluggy.ai')\n  .build();\nParametersMap parametersMap = ParametersMap.map(\"user\", \"user-ok\")\n  .with(\"password\", \"password-ok\");\nCreateItemRequest createItemRequest = new CreateItemRequest(connectorId, parametersMap);\nResponse<ItemResponse> item = pluggyClient.service().createItem(createItemRequest).execute();"
            },
            {
              "language": "csharp",
              "code": "PluggyClient pluggyClient = new PluggyClient('YOUR_PLUGGY_API_KEY');\nItemParameters createItemRequest = new ItemParameters(connectorId, credentials, options);\nItem item = await pluggyClient.CreateItem(createItemRequest);"
            }
          ]
        }
      }
    },
    "/items/{id}": {
      "get": {
        "operationId": "items-retrieve",
        "summary": "Retrieve",
        "responses": {
          "200": {
            "description": "Item was retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Item"
                }
              }
            }
          },
          "404": {
            "description": "Item not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 404,
                  "codeDescription": "ITEM_NOT_FOUND",
                  "message": "item not found"
                }
              }
            }
          },
          "500": {
            "description": "Server Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                }
              }
            }
          }
        },
        "description": "Recovers the item resource by its id",
        "tags": [
          "Items"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Item primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0f8a8c0-e8e3-11e9-b210-d663bd873d93"
          }
        ],
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "code": "const pluggy = require('pluggy-sdk');\nconst client = new pluggy.PluggyClient({\n  clientId: 'YOUR_CLIENT_ID',\n  clientSecret: 'YOUR_CLIENT_SECRET',\n});\nclient\n  .fetchItem('YOUR_ITEM_ID')\n  .then((item) => {\n    console.log(item);\n  });"
            },
            {
              "language": "java",
              "code": "PluggyClient pluggyClient = PluggyClient.builder()\n  .clientIdAndSecret('your_client_id', 'your_secret')\n  .baseUrl('https://api.pluggy.ai')\n  .build();\nResponse<ItemResponse> item = pluggyClient.service().getItem(\"YOUR_ITEM_ID\").execute();"
            },
            {
              "language": "csharp",
              "code": "PluggyClient pluggyClient = new PluggyClient('YOUR_PLUGGY_API_KEY');\nItem item = await pluggyClient.FetchItem(\"YOUR_ITEM_ID\");"
            }
          ]
        }
      },
      "patch": {
        "operationId": "items-update",
        "summary": "Update",
        "responses": {
          "200": {
            "description": "Update the item was successful, new sync was triggered",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Item"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "examples": {
                  "repeatedMFA": {
                    "summary": "MFA should be updated",
                    "value": {
                      "code": 400,
                      "codeDescription": "MFA_PARAMERTER_WAS_ALREADY_USED_ERROR",
                      "message": "MFA parameter has to be updated from last execution"
                    }
                  },
                  "missingMFA": {
                    "summary": "MFA parameter was not sent",
                    "value": {
                      "message": "The parameter 'token' is required to be renewed for item update.",
                      "code": 400,
                      "codeDescription": "CONNECTOR_REQUIRED_PARAMETER_VALIDATION_ERROR",
                      "details": [
                        {
                          "code": "001",
                          "message": "Parameter 'token' is required",
                          "parameter": "token"
                        }
                      ],
                      "data": {
                        "parameter": "token"
                      }
                    }
                  },
                  "tooManyErrors": {
                    "summary": "There were more than 5 consecutive errors",
                    "value": {
                      "code": 400,
                      "codeDescription": "TOO_MANY_CONSECUTIVE_ERRORS",
                      "message": "There has been more than 5 failing syncronizations, please contact support"
                    }
                  },
                  "tooManyConsecutiveLoginFailures": {
                    "summary": "There were at least 2 consecutive login errors",
                    "value": {
                      "code": 400,
                      "codeDescription": "TOO_MANY_CONSECUTIVE_LOGIN_FAILURES",
                      "message": "must wait at least {readableBackoffTime} after {maxConsecutiveFailedLoginAttempts} consecutive login errors, last attempt was at {lastExecutionEndedAt} (can retry after: {canRetryAfterDate})",
                      "data": {
                        "readableBackoffTime": "15 minutes",
                        "maxConsecutiveFailedLoginAttempts": 2,
                        "lastExecutionEndedAt": "2020-01-01T00:00:00.000Z",
                        "canRetryAfterDate": "2020-01-01T00:15:00.000Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Item not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 404,
                  "codeDescription": "ITEM_NOT_FOUND",
                  "message": "item not found"
                }
              }
            }
          },
          "409": {
            "description": "There is a conflict updating the item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 409,
                  "codeDescription": "CLIENT_IS_UPDATING_BEFORE_ALLOWED_FREQUENCY",
                  "message": "Client updates on this item are allowed at most every {minUpdateFrequencyAllowedInHours} hours. Last update was at {lastUpdatedAt}",
                  "data": {
                    "minUpdateFrequencyAllowedInHours": 24,
                    "lastUpdatedAt": "2020-01-01T00:00:00.000Z"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                }
              }
            }
          }
        },
        "description": "Triggers new syncronization for the Item, optionally updating the stored credentials.",
        "tags": [
          "Items"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Item primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0f8a8c0-e8e3-11e9-b210-d663bd873d93"
          }
        ],
        "requestBody": {
          "description": "Update item request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateItem"
              },
              "examples": {
                "Plain parameters": {
                  "value": {
                    "webhookUrl": "https://example.com/webhook",
                    "clientUserId": "My User App Id",
                    "parameters": {
                      "user": "user-ok",
                      "password": "password-ok"
                    }
                  }
                },
                "Encrypted parameters": {
                  "value": {
                    "webhookUrl": "https://example.com/webhook",
                    "clientUserId": "My User App Id",
                    "parameters": "encrypted-parameters"
                  }
                }
              }
            }
          }
        },
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "code": "const pluggy = require('pluggy-sdk');\nconst client = new pluggy.PluggyClient({\n  clientId: 'YOUR_CLIENT_ID',\n  clientSecret: 'YOUR_CLIENT_SECRET',\n});\nclient\n  .updateItem('YOUR_ITEM_ID')\n  .then((item) => {\n    console.log(item);\n  });"
            },
            {
              "language": "java",
              "code": "PluggyClient pluggyClient = PluggyClient.builder()\n  .clientIdAndSecret('your_client_id', 'your_secret')\n  .baseUrl('https://api.pluggy.ai')\n  .build();\nResponse<ItemResponse> item = pluggyClient.service().updateItem(\"YOUR_ITEM_ID\").execute();"
            },
            {
              "language": "csharp",
              "code": "PluggyClient pluggyClient = new PluggyClient('YOUR_PLUGGY_API_KEY');\nItem item = await pluggyClient.UpdateItem(\"YOUR_ITEM_ID\");"
            }
          ]
        }
      },
      "delete": {
        "operationId": "items-delete",
        "summary": "Delete",
        "description": "Delete the item by its primary identifier",
        "responses": {
          "200": {
            "description": "Item was deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ICountResponse"
                }
              }
            }
          },
          "404": {
            "description": "Item not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 404,
                  "codeDescription": "ITEM_NOT_FOUND",
                  "message": "item not found"
                }
              }
            }
          },
          "500": {
            "description": "Server Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Items"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Item primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0f8a8c0-e8e3-11e9-b210-d663bd873d93"
          }
        ],
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "code": "const pluggy = require('pluggy-sdk');\nconst client = new pluggy.PluggyClient({\n  clientId: 'YOUR_CLIENT_ID',\n  clientSecret: 'YOUR_CLIENT_SECRET',\n});\nclient\n  .deleteItem('YOUR_ITEM_ID');"
            },
            {
              "language": "java",
              "code": "PluggyClient pluggyClient = PluggyClient.builder()\n  .clientIdAndSecret('your_client_id', 'your_secret')\n  .baseUrl('https://api.pluggy.ai')\n  .build();\nResponse<DeleteItemResponse> item = pluggyClient.service().deleteItem(\"YOUR_ITEM_ID\").execute();"
            },
            {
              "language": "csharp",
              "code": "PluggyClient pluggyClient = new PluggyClient('YOUR_PLUGGY_API_KEY');\nawait pluggyClient.DeleteItem(\"YOUR_ITEM_ID\");"
            }
          ]
        }
      }
    },
    "/items/{id}/mfa": {
      "post": {
        "operationId": "items-send-mfa",
        "summary": "Send MFA",
        "description": "When item is Waiting User Input, this method allows to submit multi-factor authentication value",
        "responses": {
          "200": {
            "description": "Parameter was sent correctly",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Item"
                }
              }
            }
          },
          "404": {
            "description": "Item not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 404,
                  "codeDescription": "ITEM_NOT_FOUND",
                  "message": "item not found"
                }
              }
            }
          },
          "500": {
            "description": "Server Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Items"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Item primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0e8448e-0156-4b4a-ae6c-3e2a6d9bff5c"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {},
                "description": "Request with the MFA value provided by the user, in the format [name]:[value]",
                "additionalProperties": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "code": "const pluggy = require('pluggy-sdk');\nconst client = new pluggy.PluggyClient({\n  clientId: 'YOUR_CLIENT_ID',\n  clientSecret: 'YOUR_CLIENT_SECRET',\n});\nclient\n  .updateItemMFA('YOUR_ITEM_ID', { key: 'value' })\n.then((item) => console.log(item));"
            },
            {
              "language": "java",
              "code": "PluggyClient pluggyClient = PluggyClient.builder()\n  .clientIdAndSecret('your_client_id', 'your_secret')\n  .baseUrl('https://api.pluggy.ai')\n  .build();\nResponse<ItemResponse> item = pluggyClient.service().updateItemSendMfa(\"YOUR_ITEM_ID\", new UpdateItemMfaRequest(\"key\", \"value\")).execute();"
            },
            {
              "language": "csharp",
              "code": "PluggyClient pluggyClient = new PluggyClient('YOUR_PLUGGY_API_KEY');\nvar parameter = new ItemParameter(\"key\", \"value\");\nItem item = await pluggyClient.UpdateItemMFA(\"YOUR_ITEM_ID\", new List<ItemParameter> { parameter });"
            }
          ]
        }
      }
    },
    "/consents": {
      "get": {
        "operationId": "consents-list",
        "summary": "List",
        "description": "Recovers all consents given to the item provided",
        "responses": {
          "200": {
            "description": "Retrieve a list of all consents given to an item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageResponseConsents"
                },
                "examples": {
                  "response": {
                    "value": {
                      "total": 1,
                      "totalPages": 1,
                      "page": 1,
                      "results": [
                        {
                          "id": "71996b6d-8991-450c-8542-ae59069d1a9d",
                          "itemId": "9aab8d24-c89b-4b0e-8974-7dd5614686e4",
                          "products": [
                            "ACCOUNTS",
                            "IDENTITY"
                          ],
                          "openFinancePermissionsGranted": [
                            "ACCOUNTS_ALL",
                            "REGISTRATION_ALL"
                          ],
                          "createdAt": "2023-10-02T03:00:00.000Z",
                          "expiresAt": "2024-10-02T03:00:00.000Z",
                          "revokedAt": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "message": "itemId should not be null or undefined,itemId must be a UUID",
                  "code": 400
                }
              }
            }
          },
          "500": {
            "description": "Server Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Consent"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Item primary identifier",
            "in": "query",
            "name": "itemId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0f8a8c0-e8e3-11e9-b210-d663bd873d93"
          }
        ]
      }
    },
    "/consents/{id}": {
      "get": {
        "operationId": "consent-retrieve",
        "summary": "Retrieve",
        "description": "Recovers the consent resource by it's id",
        "responses": {
          "200": {
            "description": "Retrieve a consent.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Consent"
                }
              }
            }
          },
          "404": {
            "description": "Consent not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 404,
                  "codeDescription": "CONSENT_NOT_FOUND",
                  "message": "Consent not found"
                }
              }
            }
          },
          "500": {
            "description": "Server Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Consent"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Consent primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "6ec156fe-e8ac-4d9a-a4b3-7770529ab01c"
          }
        ]
      }
    },
    "/accounts": {
      "get": {
        "operationId": "accounts-list",
        "summary": "List",
        "description": "Recovers all accounts collected for the item provided",
        "responses": {
          "200": {
            "description": "Retrieve a list of all accounts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "page": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "total": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "totalPages": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Account"
                      },
                      "description": "List of retrieved accounts"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "page": 1,
                      "total": 2,
                      "totalPages": 1,
                      "results": [
                        {
                          "id": "a658c848-e475-457b-8565-d1fffba127c4",
                          "type": "BANK",
                          "subtype": "CHECKING_ACCOUNT",
                          "number": "0001/12345-0",
                          "name": "Conta Corrente",
                          "marketingName": "GOLD Conta Corrente",
                          "balance": 120950,
                          "itemId": "a0922d6f-2007-4169-a181-b961500608db",
                          "taxNumber": "416.799.495-00",
                          "owner": "John Doe",
                          "currencyCode": "BRL",
                          "bankData": {
                            "transferNumber": "0001/12345-0",
                            "closingBalance": 120950,
                            "automaticallyInvestedBalance": 100
                          }
                        },
                        {
                          "id": "a658c848-e475-457b-8565-d1fffba127c4",
                          "type": "CREDIT",
                          "subtype": "CREDIT_CARD",
                          "number": "xxxx8670",
                          "name": "Mastercard Black",
                          "marketingName": "PLUGGY UNICLASS MASTERCARD BLACK",
                          "balance": 120950,
                          "itemId": "a0922d6f-2007-4169-a181-b961500608db",
                          "taxNumber": "416.799.495-00",
                          "owner": "John Doe",
                          "currencyCode": "BRL",
                          "creditData": {
                            "level": "BLACK",
                            "brand": "MASTERCARD",
                            "balanceCloseDate": "2022-01-03",
                            "balanceDueDate": "2022-01-03",
                            "availableCreditLimit": 200000.0,
                            "balanceForeignCurrency": 0,
                            "minimumPayment": 16190.0,
                            "creditLimit": 300000.0,
                            "status": "ACTIVE",
                            "holderType": "MAIN"
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Account"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Item primary identifier",
            "in": "query",
            "name": "itemId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0f8a8c0-e8e3-11e9-b210-d663bd873d93"
          },
          {
            "description": "Parameter to filter between bank accounts and credit accounts",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "BANK",
                "CREDIT"
              ]
            },
            "example": "BANK"
          }
        ],
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "code": "const pluggy = require('pluggy-sdk');\nconst client = new pluggy.PluggyClient({\n  clientId: 'YOUR_CLIENT_ID',\n  clientSecret: 'YOUR_CLIENT_SECRET',\n});\n\nclient\n  .fetchAccounts('YOUR_ITEM_ID')\n  .then(({ results: accounts }) => {\n    console.log(accounts);\n  });"
            },
            {
              "language": "java",
              "code": "PluggyClient pluggyClient = PluggyClient.builder()\n  .clientIdAndSecret('your_client_id', 'your_secret')\n  .baseUrl('https://api.pluggy.ai')\n  .build();\nResponse<AccountsResponse> accountsResponse = pluggyClient.service().getAccounts('your_item_id').execute();"
            },
            {
              "language": "csharp",
              "code": "PluggyClient pluggyClient = new PluggyClient('YOUR_PLUGGY_API_KEY');\nPageResults<Account> accountsResponse = await pluggyClient.FetchAccounts('YOUR_ITEM_ID');"
            }
          ]
        }
      }
    },
    "/accounts/{id}": {
      "get": {
        "operationId": "accounts-retrieve",
        "summary": "Retrieve",
        "description": "Recovers the account resource by its id",
        "responses": {
          "200": {
            "description": "Retrieve an account.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                },
                "examples": {
                  "bank": {
                    "value": {
                      "id": "a658c848-e475-457b-8565-d1fffba127c4",
                      "type": "BANK",
                      "subtype": "CHECKING_ACCOUNT",
                      "number": "0001/12345-0",
                      "name": "Conta Corrente",
                      "marketingName": "GOLD Conta Corrente",
                      "balance": 120950,
                      "itemId": "a0922d6f-2007-4169-a181-b961500608db",
                      "taxNumber": "416.799.495-00",
                      "owner": "John Doe",
                      "currencyCode": "BRL",
                      "bankData": {
                        "transferNumber": "0001/12345-0",
                        "closingBalance": 120950,
                        "automaticallyInvestedBalance": null
                      }
                    }
                  },
                  "credit": {
                    "value": {
                      "id": "a658c848-e475-457b-8565-d1fffba127c4",
                      "type": "CREDIT",
                      "subtype": "CREDIT_CARD",
                      "number": "xxxx8670",
                      "name": "Mastercard Black",
                      "marketingName": "PLUGGY UNICLASS MASTERCARD BLACK",
                      "balance": 120950,
                      "itemId": "a0922d6f-2007-4169-a181-b961500608db",
                      "taxNumber": "416.799.495-00",
                      "owner": "John Doe",
                      "currencyCode": "BRL",
                      "creditData": {
                        "level": "BLACK",
                        "brand": "MASTERCARD",
                        "balanceCloseDate": "2022-01-03",
                        "balanceDueDate": "2022-01-03",
                        "availableCreditLimit": 200000.0,
                        "balanceForeignCurrency": 0,
                        "minimumPayment": 16190.0,
                        "creditLimit": 300000.0,
                        "status": "ACTIVE",
                        "holderType": "MAIN"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Account not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 404,
                  "codeDescription": "ACCOUNT_NOT_FOUND",
                  "message": "account not found"
                }
              }
            }
          },
          "500": {
            "description": "Server Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Account"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Account primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "a658c848-e475-457b-8565-d1fffba127c4"
          }
        ],
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "code": "const pluggy = require('pluggy-sdk');\nconst client = new pluggy.PluggyClient({\n  clientId: 'YOUR_CLIENT_ID',\n  clientSecret: 'YOUR_CLIENT_SECRET',\n});\n\nclient\n  .fetchAccount('ACCOUNT_ID')\n  .then((account) => {\n    console.log(account);\n  });"
            },
            {
              "language": "java",
              "code": "PluggyClient pluggyClient = PluggyClient.builder()\n  .clientIdAndSecret('your_client_id', 'your_secret')\n  .baseUrl('https://api.pluggy.ai')\n  .build();\nAccount account = pluggyClient.service().getAccount(\"ACCOUNT_ID\").execute();"
            },
            {
              "language": "csharp",
              "code": "PluggyClient pluggyClient = new PluggyClient('YOUR_PLUGGY_API_KEY');\nAccount account = await pluggyClient.FetchAccount(\"ACCOUNT_ID\");"
            }
          ]
        }
      }
    },
    "/transactions": {
      "get": {
        "operationId": "transactions-list",
        "summary": "List",
        "description": "Recovers all transactions collected for the acount provided",
        "responses": {
          "200": {
            "description": "Retrieve a list of all transactions for an account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageResponseTransactions"
                },
                "examples": {
                  "response": {
                    "value": {
                      "total": 8,
                      "totalPages": 1,
                      "page": 1,
                      "results": [
                        {
                          "id": "a8534c85-53ce-4f21-94d7-50e9d2ee4957",
                          "description": "* PROV * COMPRA TESOURO DIRETO CLIENTES",
                          "descriptionRaw": "* PROV * COMPRA TESOURO DIRETO CLIENTES",
                          "currencyCode": "BRL",
                          "amount": -212.45,
                          "date": "2020-10-15T00:00:00.000Z",
                          "balance": 4439.4,
                          "category": "Fixed Income Investment",
                          "accountId": "562b795d-1653-429f-be86-74ead9502813",
                          "providerCode": null,
                          "status": "POSTED",
                          "paymentData": null,
                          "type": "DEBIT"
                        },
                        {
                          "id": "05c693bf-c196-47ea-a28c-8251d6bb8a06",
                          "description": "PAGO NETFLIX SERV",
                          "descriptionRaw": "PAGO NETFLIX SERV",
                          "currencyCode": "USD",
                          "amount": -58,
                          "amountInAccountCurrency": -298.19,
                          "date": "2020-10-15T00:00:00.000Z",
                          "balance": 4651.85,
                          "category": "Video streaming",
                          "accountId": "562b795d-1653-429f-be86-74ead9502813",
                          "providerCode": null,
                          "status": "POSTED",
                          "paymentData": null,
                          "type": "DEBIT",
                          "merchant": {
                            "name": "Netflix",
                            "businessName": "NETFLIX ENTRETENIMENTO BRASIL LTDA.",
                            "cnpj": "00000000000000",
                            "category": "Video streaming",
                            "cnae": "5911100"
                          }
                        },
                        {
                          "id": "97536285-cc22-4a5a-9d05-f5fe24410d0c",
                          "description": "* PROV * DEVOLUÇÃO DE MARGEM",
                          "descriptionRaw": "* PROV * DEVOLUÇÃO DE MARGEM",
                          "currencyCode": "BRL",
                          "amount": 2482.26,
                          "date": "2020-10-15T00:00:00.000Z",
                          "balance": 4950.04,
                          "category": "Margin Withdrawn",
                          "accountId": "562b795d-1653-429f-be86-74ead9502813",
                          "providerCode": null,
                          "status": "POSTED",
                          "paymentData": null,
                          "type": "CREDIT"
                        },
                        {
                          "id": "8caf328b-4528-4de6-b931-10639d0084c5",
                          "description": "LIQUIDO DAS OPERAÇÕES BMF PR. 14/10/2020 NC. 870947",
                          "descriptionRaw": "LIQUIDO DAS OPERAÇÕES BMF PR. 14/10/2020 NC. 870947",
                          "currencyCode": "BRL",
                          "amount": -1.06,
                          "date": "2020-10-14T00:00:00.000Z",
                          "balance": 2467.78,
                          "category": "Investment",
                          "accountId": "562b795d-1653-429f-be86-74ead9502813",
                          "providerCode": null,
                          "status": "POSTED",
                          "paymentData": null,
                          "type": "DEBIT"
                        },
                        {
                          "id": "ff9ed929-edc4-408c-a959-d51f79ab1814",
                          "description": "MERCADOLIVRE*2PRODUTOS",
                          "currencyCode": "BRL",
                          "amount": 159.2,
                          "date": "2020-10-14T00:00:00.000Z",
                          "balance": 2468.84,
                          "category": "Investment",
                          "accountId": "562b795d-1653-429f-be86-74ead9502813",
                          "providerCode": null,
                          "status": "POSTED",
                          "paymentData": null,
                          "type": "CREDIT",
                          "creditCardMetadata": {
                            "totalAmount": 320,
                            "totalInstallments": 2,
                            "installmentNumber": 2,
                            "purchaseDate": "2020-09-14T00:00:00.000Z",
                            "payeeMCC": 1234,
                            "cardNumber": "0597",
                            "billId": "abced929-edc4-408c-a959-d51f79ab1123"
                          }
                        },
                        {
                          "id": "093fc873-442a-4bd8-9171-51f17892fb09",
                          "description": "LIQUIDO DAS OPERAÇÕES BM&F PR. 14/10/2020 NC. 870947",
                          "descriptionRaw": "LIQUIDO DAS OPERAÇÕES BM&F PR. 14/10/2020 NC. 870947",
                          "currencyCode": "BRL",
                          "amount": -10.3,
                          "date": "2020-10-14T00:00:00.000Z",
                          "balance": 2309.64,
                          "category": "Investment",
                          "accountId": "562b795d-1653-429f-be86-74ead9502813",
                          "providerCode": null,
                          "status": "POSTED",
                          "paymentData": null,
                          "type": "DEBIT"
                        },
                        {
                          "id": "6ec156fe-e8ac-4d9a-a4b3-7770529ab01c",
                          "description": "TED Example",
                          "descriptionRaw": null,
                          "currencyCode": "BRL",
                          "amount": 1500,
                          "date": "2020-10-14T00:00:00.000Z",
                          "balance": 3500,
                          "category": "Transfer",
                          "accountId": "03cc0eff-4ec5-495c-adb3-1ef9611624fc",
                          "providerCode": "123456",
                          "type": "CREDIT",
                          "status": "POSTED",
                          "paymentData": {
                            "payer": {
                              "name": "Tiago Rodrigues Santos",
                              "branchNumber": "090",
                              "accountNumber": "1234-5",
                              "routingNumber": "001",
                              "documentNumber": {
                                "type": "CPF",
                                "value": "882.937.076-23"
                              }
                            },
                            "reason": "Taxa de serviço",
                            "receiver": {
                              "name": "Pluggy",
                              "branchNumber": "999",
                              "accountNumber": "9876-1",
                              "routingNumber": "002",
                              "documentNumber": {
                                "type": "CNPJ",
                                "value": "08.050.608/0001-32"
                              }
                            },
                            "paymentMethod": "TED",
                            "referenceNumber": "123456789"
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "message": "accountId should not be null or undefined,accountId must be a UUID",
                  "code": 400
                }
              }
            }
          },
          "500": {
            "description": "Server Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Transaction"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Account primary identifier",
            "in": "query",
            "name": "accountId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "562b795d-1653-429f-be86-74ead9502813"
          },
          {
            "description": "Filter greater than date. Format (yyyy-mm-dd)",
            "in": "query",
            "name": "from",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2020-10-13"
          },
          {
            "description": "Filter lower than date. Format (yyyy-mm-dd)",
            "in": "query",
            "name": "to",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2020-10-15"
          },
          {
            "description": "Page size for the paging request, default: 20",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            },
            "example": "50"
          },
          {
            "description": "Page number for the paging request, default: 1",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            },
            "example": "1"
          }
        ],
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "code": "const pluggy = require('pluggy-sdk');\nconst client = new pluggy.PluggyClient({\n  clientId: 'YOUR_CLIENT_ID',\n  clientSecret: 'YOUR_CLIENT_SECRET',\n});\n\nclient\n  .fetchTransactions('ACCOUNT_ID')\n  .then(({results: transactions}) => {\n    console.log(transactions);\n  });"
            },
            {
              "language": "java",
              "code": "PluggyClient pluggyClient = PluggyClient.builder()\n  .clientIdAndSecret('YOUR_CLIENT_ID', 'YOUR_CLIENT_SECRET')\n  .baseUrl('https://api.pluggy.ai')\n  .build();\nResponse<TransactionsResponse> transactions = pluggyClient.service().getTransactions(\"ACCOUNT_ID\").execute();"
            },
            {
              "language": "csharp",
              "code": "PluggyClient pluggyClient = new PluggyClient('YOUR_PLUGGY_API_KEY');\nPageResults<Transaction> transactions = await pluggyClient.FetchTransactions(\"ACCOUNT_ID\");"
            }
          ]
        }
      }
    },
    "/transactions/{id}": {
      "get": {
        "operationId": "transactions-retrieve",
        "summary": "Retrieve",
        "description": "Recovers the transaction resource by it's id",
        "responses": {
          "200": {
            "description": "Retrieve a transaction.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          },
          "404": {
            "description": "Transaction not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 404,
                  "codeDescription": "TRANSACTION_NOT_FOUND",
                  "message": "Transaction not found"
                }
              }
            }
          },
          "500": {
            "description": "Server Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Transaction"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "transaction primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "6ec156fe-e8ac-4d9a-a4b3-7770529ab01c"
          }
        ],
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "code": "const pluggy = require('pluggy-sdk');\nconst client = new pluggy.PluggyClient({\n  clientId: 'YOUR_CLIENT_ID',\n  clientSecret: 'YOUR_CLIENT_SECRET',\n});\n\nclient\n  .fetchTransaction('ACCOUNT_ID')\n  .then((transaction) => {\n    console.log(transaction);\n  });"
            },
            {
              "language": "java",
              "code": "PluggyClient pluggyClient = PluggyClient.builder()\n  .clientIdAndSecret('YOUR_CLIENT_ID', 'YOUR_CLIENT_SECRET')\n  .baseUrl('https://api.pluggy.ai')\n  .build();\nResponse<Transaction> transaction = pluggyClient.service().getTransaction(\"TRANSACTION_ID\").execute();"
            },
            {
              "language": "csharp",
              "code": "PluggyClient pluggyClient = new PluggyClient('YOUR_PLUGGY_API_KEY');\nTransaction transaction = await pluggyClient.FetchTransactioNs(\"TRANSACTION_ID\");"
            }
          ]
        }
      },
      "patch": {
        "operationId": "transactions-Update",
        "summary": "Update",
        "description": "Update the transaction's category by it's id",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTransaction"
              }
            }
          },
          "description": "New category identifier",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Retrieve an updated transaction.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          },
          "400": {
            "description": "Missing parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "message": "Transaction Id should not be null or undefined, transactionId must be a UUID",
                  "code": 400
                }
              }
            }
          },
          "404": {
            "description": "Transaction not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 404,
                  "message": "Transaction not found"
                }
              }
            }
          },
          "500": {
            "description": "Server Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Transaction"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "transaction primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "6ec156fe-e8ac-4d9a-a4b3-7770529ab01c"
          }
        ],
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "code": "const pluggy = require('pluggy-sdk');\nconst client = new pluggy.PluggyClient({\n  clientId: 'YOUR_CLIENT_ID',\n  clientSecret: 'YOUR_CLIENT_SECRET',\n});\n\nclient\n  .updateTransactionCategory('TRANSACTION_ID','CATEGORY_ID')\n  .then((transaction) => {\n    console.log(transaction);\n  });"
            }
          ]
        }
      }
    },
    "/acquirer-sales": {
      "get": {
        "operationId": "acquirer-sales-list",
        "summary": "List",
        "description": "Recovers all acquirer sales collected for the item provided",
        "responses": {
          "200": {
            "description": "Retrieve a list of all acquirer sales for a item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageResponseAcquirerSales"
                },
                "examples": {
                  "response": {
                    "value": {
                      "total": 1,
                      "totalPages": 1,
                      "page": 1,
                      "results": [
                        {
                          "id": "71996b6d-8991-450c-8542-ae59069d1a9d",
                          "itemId": "9aab8d24-c89b-4b0e-8974-7dd5614686e4",
                          "description": "",
                          "currencyCode": "BRL",
                          "date": "2023-10-02T03:00:00.000Z",
                          "grossAmount": 34,
                          "installmentCount": 2,
                          "paymentMethod": "CARD",
                          "authorizationCode": "123456",
                          "cardFlag": "Visa",
                          "cardNumber": "123456******1234",
                          "cardFundingSource": "CREDIT",
                          "nsu": "12345678912345",
                          "status": "APPROVED",
                          "netAmount": 30.6,
                          "mdrFee": 10,
                          "mdrFeeAmount": 3.4,
                          "installments": [
                            {
                              "number": 1,
                              "netAmount": 15.3,
                              "grossAmount": 17,
                              "receiptDate": "2023-08-28T00:00:00"
                            },
                            {
                              "number": 2,
                              "netAmount": 15.3,
                              "grossAmount": 17,
                              "receiptDate": "2023-07-28T00:00:00"
                            }
                          ],
                          "terminalId": "1234561234561234"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "message": "itemId should not be null or undefined,itemId must be a UUID",
                  "code": 400
                }
              }
            }
          },
          "500": {
            "description": "Server Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Acquirer Sale"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Item primary identifier",
            "in": "query",
            "name": "itemId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "562b795d-1653-429f-be86-74ead9502813"
          },
          {
            "description": "Filter greater than date. Format (yyyy-mm-dd)",
            "in": "query",
            "name": "from",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2020-10-13"
          },
          {
            "description": "Filter lower than date. Format (yyyy-mm-dd)",
            "in": "query",
            "name": "to",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2020-10-15"
          },
          {
            "description": "Page size for the paging request, default: 20",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            },
            "example": "50"
          },
          {
            "description": "Page number for the paging request, default: 1",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            },
            "example": "1"
          }
        ]
      }
    },
    "/acquirer-sales/{id}": {
      "get": {
        "operationId": "acquirer-sales-retrieve",
        "summary": "Retrieve",
        "description": "Recovers the acquirer sale resource by it's id",
        "responses": {
          "200": {
            "description": "Retrieve a acquirer sale.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSale"
                }
              }
            }
          },
          "404": {
            "description": "Acquirer Sale not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 404,
                  "codeDescription": "ACQUIRER_SALE_NOT_FOUND",
                  "message": "Acquirer Sale not found"
                }
              }
            }
          },
          "500": {
            "description": "Server Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Acquirer Sale"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Acquirer sale primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "6ec156fe-e8ac-4d9a-a4b3-7770529ab01c"
          }
        ]
      }
    },
    "/acquirer-receivables": {
      "get": {
        "operationId": "acquirer-receivables-list",
        "summary": "List",
        "description": "Recovers all acquirer receivables collected for the item provided",
        "responses": {
          "200": {
            "description": "Retrieve a list of all acquirer receivables for a item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageResponseAcquirerReceivables"
                },
                "examples": {
                  "response": {
                    "value": {
                      "total": 1,
                      "totalPages": 1,
                      "page": 1,
                      "results": [
                        {
                          "id": "71996b6d-8991-450c-8542-ae59069d1a9d",
                          "itemId": "9aab8d24-c89b-4b0e-8974-7dd5614686e4",
                          "description": "",
                          "currencyCode": "BRL",
                          "grossAmount": 34,
                          "netAmount": 31.1,
                          "date": "2023-10-02T03:00:00.000Z",
                          "paymentId": "123445567755353",
                          "settlementStatus": "PAID",
                          "destinationAccount": {
                            "receivingBank": "Banco do Brasil S.A.",
                            "agency": "1234",
                            "account": "12345678-9"
                          },
                          "cardFlag": "VISA",
                          "relatedSales": [
                            {
                              "date": "2023-10-01T18:31:51.697Z",
                              "grossAmount": 315,
                              "netAmount": 310.5585,
                              "installmentCount": 1,
                              "installmentNumber": 1,
                              "nsu": "42111111111222"
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "message": "itemId should not be null or undefined,itemId must be a UUID",
                  "code": 400
                }
              }
            }
          },
          "500": {
            "description": "Server Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Acquirer Receivable"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Item primary identifier",
            "in": "query",
            "name": "itemId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "562b795d-1653-429f-be86-74ead9502813"
          },
          {
            "description": "Filter greater than date. Format (yyyy-mm-dd)",
            "in": "query",
            "name": "from",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2020-10-13"
          },
          {
            "description": "Filter lower than date. Format (yyyy-mm-dd)",
            "in": "query",
            "name": "to",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2020-10-15"
          },
          {
            "description": "Page size for the paging request, default: 20",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            },
            "example": "50"
          },
          {
            "description": "Page number for the paging request, default: 1",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            },
            "example": "1"
          }
        ]
      }
    },
    "/acquirer-receivables/{id}": {
      "get": {
        "operationId": "acquirer-receivable-retrieve",
        "summary": "Retrieve",
        "description": "Recovers the acquirer receivable resource by it's id",
        "responses": {
          "200": {
            "description": "Retrieve a acquirer receivable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerReceivable"
                }
              }
            }
          },
          "404": {
            "description": "Acquirer Receivable not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 404,
                  "codeDescription": "ACQUIRER_RECEIVABLE_NOT_FOUND",
                  "message": "Acquirer Receivable not found"
                }
              }
            }
          },
          "500": {
            "description": "Server Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Acquirer Receivable"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Acquirer receivable primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "6ec156fe-e8ac-4d9a-a4b3-7770529ab01c"
          }
        ]
      }
    },
    "/acquirer-anticipations": {
      "get": {
        "operationId": "acquirer-anticipations-list",
        "summary": "List",
        "description": "Recovers all acquirer anticipations collected for the item provided",
        "responses": {
          "200": {
            "description": "Retrieve a list of all acquirer anticipations for a item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageResponseAcquirerAnticipations"
                },
                "examples": {
                  "response": {
                    "value": {
                      "total": 1,
                      "totalPages": 1,
                      "page": 1,
                      "results": [
                        {
                          "id": "71996b6d-8991-450c-8542-ae59069d1a9d",
                          "itemId": "9aab8d24-c89b-4b0e-8974-7dd5614686e4",
                          "description": "",
                          "currencyCode": "BRL",
                          "grossAmount": 313.28,
                          "date": "2023-02-06T03:00:00.000Z",
                          "status": "APPROVED",
                          "netAmount": 308.66,
                          "fee": 1.82,
                          "feeAmount": 4.62
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "message": "itemId should not be null or undefined,itemId must be a UUID",
                  "code": 400
                }
              }
            }
          },
          "500": {
            "description": "Server Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Acquirer Anticipation"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Item primary identifier",
            "in": "query",
            "name": "itemId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "562b795d-1653-429f-be86-74ead9502813"
          },
          {
            "description": "Filter greater than date. Format (yyyy-mm-dd)",
            "in": "query",
            "name": "from",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2020-10-13"
          },
          {
            "description": "Filter lower than date. Format (yyyy-mm-dd)",
            "in": "query",
            "name": "to",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2020-10-15"
          },
          {
            "description": "Page size for the paging request, default: 20",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            },
            "example": "50"
          },
          {
            "description": "Page number for the paging request, default: 1",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            },
            "example": "1"
          }
        ]
      }
    },
    "/acquirer-anticipations/{id}": {
      "get": {
        "operationId": "acquirer-anticipation-retrieve",
        "summary": "Retrieve",
        "description": "Recovers the acquirer anticipation resource by it's id",
        "responses": {
          "200": {
            "description": "Retrieve a acquirer anticipation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerAnticipation"
                }
              }
            }
          },
          "404": {
            "description": "Acquirer Anticipation not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 404,
                  "codeDescription": "ACQUIRER_ANTICIPATION_NOT_FOUND",
                  "message": "Acquirer Receivable not found"
                }
              }
            }
          },
          "500": {
            "description": "Server Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Acquirer Anticipation"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Acquirer anticipation primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "6ec156fe-e8ac-4d9a-a4b3-7770529ab01c"
          }
        ]
      }
    },
    "/investments": {
      "get": {
        "operationId": "investments-list",
        "summary": "List",
        "description": "Recovers all investments collected for the item provided",
        "responses": {
          "200": {
            "description": "Retrieve a list of all investments",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "page": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "total": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "totalPages": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Investment"
                      },
                      "description": "List of investments"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "page": 1,
                      "total": 3,
                      "totalPages": 1,
                      "results": [
                        {
                          "id": "f77eccf4-7714-498e-92a9-1bebe70335d9",
                          "code": "12.345.678/0001-00",
                          "name": "Bahia AM Advisory FIC de FIM",
                          "balance": 1359.39,
                          "currencyCode": "BRL",
                          "type": "MUTUAL_FUND",
                          "subtype": "MULTIMARKET_FUND",
                          "lastMonthRate": 0.24,
                          "annualRate": 3.24,
                          "lastTwelveMonthsRate": 3,
                          "itemId": "207f5bcd-312a-439c-abbe-166b6632c980",
                          "value": 500,
                          "quantity": 3,
                          "amount": 1500,
                          "taxes": 40.61,
                          "taxes2": 100,
                          "date": "2020-07-19T18:27:41.802Z",
                          "owner": "John Doe",
                          "number": null,
                          "amountProfit": 310.5,
                          "amountWithdrawal": 1310.5,
                          "amountOriginal": 1000,
                          "status": "ACTIVE",
                          "transactions": [
                            {
                              "tradeDate": "2020-10-01T00:00:00.000Z",
                              "date": "2020-10-01T00:00:00.000Z",
                              "description": "Aplicação Fondo de Investimento Premium",
                              "quantity": 1.25,
                              "value": 2,
                              "amount": 5,
                              "type": "BUY",
                              "movementType": "CREDIT"
                            }
                          ]
                        },
                        {
                          "id": "2a96b873-53bb-4d16-a3d8-385a57e78d7e",
                          "number": null,
                          "name": "CDB1194KL0Z - BANCO MAXIMA S/A",
                          "balance": 2000,
                          "currencyCode": "BRL",
                          "type": "FIXED_INCOME",
                          "subtype": "CDB",
                          "itemId": "207f5bcd-312a-439c-abbe-166b6632c980",
                          "code": "0001-02",
                          "amount": 2500,
                          "taxes": null,
                          "taxes2": null,
                          "date": "2020-07-19T18:27:41.802Z",
                          "owner": "John Doe",
                          "rate": 30,
                          "rateType": "CDI",
                          "fixedAnnualRate": 10.5,
                          "amountProfit": null,
                          "amountWithdrawal": 2000,
                          "amountOriginal": 1000,
                          "issuer": "Pluggy",
                          "issuerCNPJ": "08.050.608/0001-32",
                          "issueDate": "2020-07-19T18:27:41.802Z",
                          "status": "ACTIVE"
                        },
                        {
                          "id": "ded7d2f1-6b90-44a8-9ace-de747b9f5bfe",
                          "number": "123456-2",
                          "name": "Pluggy PREVIDENCIA",
                          "balance": 1359.39,
                          "currencyCode": "BRL",
                          "type": "SECURITY",
                          "subtype": "RETIREMENT",
                          "annualRate": 3.24,
                          "itemId": "207f5bcd-312a-439c-abbe-166b6632c980",
                          "code": null,
                          "value": 500,
                          "quantity": 3,
                          "amount": 1500,
                          "taxes": 0,
                          "taxes2": 0,
                          "date": "2020-07-19T18:27:41.802Z",
                          "owner": "John Doe",
                          "amountProfit": 359.39,
                          "amountWithdrawal": 1310.5,
                          "status": "ACTIVE",
                          "institution": {
                            "name": "BANCO BTG PACTUAL S/A",
                            "number": "30306294000145"
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Investment"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Item's primary identifier",
            "in": "query",
            "name": "itemId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0e8a7f0-6d86-11ea-b77f-2e728ce88125"
          },
          {
            "description": "Investment's type to filter",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "COE",
                "EQUITY",
                "ETF",
                "FIXED_INCOME",
                "MUTUAL_FUND",
                "SECURITY",
                "OTHER"
              ]
            }
          },
          {
            "description": "Page size for the paging request, default: 500",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            },
            "example": "50"
          },
          {
            "description": "Page number for the paging request, default: 1",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            },
            "example": "1"
          }
        ],
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "code": "const pluggy = require('pluggy-sdk');\nconst client = new pluggy.PluggyClient({\n  clientId: 'YOUR_CLIENT_ID',\n  clientSecret: 'YOUR_CLIENT_SECRET',\n});\nclient\n  .fetchInvestments(\"d619cfde-a8d7-4fe0-a10d-6de488bde4e0\")\n  .then(({ results: investments }) => {\n    console.log(investments);\n  });"
            },
            {
              "language": "csharp",
              "code": "PluggyClient pluggyClient = new PluggyClient(\"YOUR_CLIENT_ID\", \"YOUR_CLIENT_SECRET\");\nList<Investment> investments = await pluggyClient.FetchInvestments(\"d619cfde-a8d7-4fe0-a10d-6de488bde4e0\");"
            },
            {
              "language": "java",
              "code": "PluggyClient pluggyClient = PluggyClient.builder()\n  .clientIdAndSecret(“YOUR_CLIENT_ID', 'YOUR_CLIENT_SECRET')\n  .build();\nResponse<InvestmentsResponse> investmentsResponse = pluggyClient.service().getInvestments(\"YOUR_ITEM_ID\").execute();"
            }
          ]
        }
      }
    },
    "/investments/{id}": {
      "get": {
        "operationId": "investments-retrieve",
        "summary": "Retrieve",
        "responses": {
          "200": {
            "description": "Retrieve an investment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Investment"
                }
              }
            }
          },
          "404": {
            "description": "Investment not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 404,
                  "codeDescription": "INVESTMENT_NOT_FOUND",
                  "message": "investment not found"
                }
              }
            }
          }
        },
        "description": "Recovers the investment resource by its id",
        "tags": [
          "Investment"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "investment primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0e8a7f0-6d86-11ea-b77f-2e728ce88125"
          }
        ]
      }
    },
    "/investments/{id}/transactions": {
      "get": {
        "operationId": "investment-transactions-list",
        "summary": "List investment transactions",
        "description": "Recovers all investment transactions for the investment provided",
        "responses": {
          "200": {
            "description": "Retrieve a list of all transactions for an investment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageResponseInvestmentTransactions"
                },
                "examples": {
                  "response": {
                    "value": {
                      "total": 2,
                      "totalPages": 1,
                      "page": 1,
                      "results": [
                        {
                          "id": "910419d2-e833-41f2-af43-080693f7ef8a",
                          "amount": 60000,
                          "description": null,
                          "value": 1200,
                          "quantity": 50,
                          "tradeDate": "2021-09-15T00:00:00.000Z",
                          "date": "2021-09-15T00:00:00.000Z",
                          "type": "SELL",
                          "movementType": "DEBIT",
                          "netAmount": null,
                          "brokerageNumber": null,
                          "expenses": {}
                        },
                        {
                          "id": "f24f7eec-5a5b-4e54-8727-d40b0b91115a",
                          "amount": 110000,
                          "description": null,
                          "value": 1100,
                          "quantity": 100,
                          "tradeDate": "2021-09-01T00:00:00.000Z",
                          "date": "2021-09-01T00:00:00.000Z",
                          "type": "BUY",
                          "movementType": "CREDIT",
                          "netAmount": 10000,
                          "brokerageNumber": "1234",
                          "expenses": {}
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Investment"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Investment primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "562b795d-1653-429f-be86-74ead9502813"
          },
          {
            "description": "Page size for the paging request, default: 20",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            },
            "example": "50"
          },
          {
            "description": "Page number for the paging request, default: 1",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            },
            "example": "1"
          }
        ]
      }
    },
    "/identity": {
      "get": {
        "operationId": "identity-find-by-item",
        "summary": "Find by item",
        "description": "Recovers identity of an item if available",
        "responses": {
          "200": {
            "description": "Retrieve an identity by itemId",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityResponse"
                },
                "example": {
                  "id": "42888436-62f5-49d2-8cf9-e312c7939509",
                  "fullName": "Francisco Sousa",
                  "companyName": "Pluggy Inc.",
                  "document": "076.630.975-48",
                  "taxNumber": "38.512.121/0001-95",
                  "documentType": "CPF",
                  "jobTitle": "Comercial",
                  "birthDate": "1991-05-01T00:00:00.000Z",
                  "establishmentCode": "001",
                  "establishmentName": "Pluggy Establishment",
                  "addresses": [
                    {
                      "fullAddress": "Av. Lúcio Costa 1234, Copacabana, Rio de Janeiro, Brasil",
                      "country": "Brasil",
                      "state": "RJ",
                      "city": "Rio de Janeiro",
                      "postalCode": "22620-171",
                      "primaryAddress": "Av. Lúcio Costa, 1234",
                      "type": "Personal"
                    }
                  ],
                  "phoneNumbers": [
                    {
                      "type": "Personal",
                      "value": "+54 911 12345678"
                    }
                  ],
                  "emails": [
                    {
                      "type": "Personal",
                      "value": "myemail@pluggy.ai"
                    }
                  ],
                  "relations": [
                    {
                      "type": "Father",
                      "name": "Juan Gonzalez"
                    },
                    {
                      "type": "Spouse",
                      "name": "Laura Garcia"
                    }
                  ],
                  "createdAt": "2020-09-30T14:38:12.724Z",
                  "updatedAt": "2020-09-30T14:38:12.724Z"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "message": "itemId must be a UUID",
                  "code": 400
                }
              }
            }
          },
          "404": {
            "description": "Identity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 404,
                  "codeDescription": "IDENTITY_NOT_FOUND",
                  "message": "identity not found"
                }
              }
            }
          },
          "500": {
            "description": "Server Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Identity"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Item's primary identifier",
            "in": "query",
            "name": "itemId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0e8a7f0-6d86-11ea-b77f-2e728ce88125"
          }
        ],
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "code": "const pluggy = require('pluggy-sdk');\nconst client = new pluggy.PluggyClient({\n  clientId: 'YOUR_CLIENT_ID',\n  clientSecret: 'YOUR_CLIENT_SECRET',\n});\n\nclient\n  .fetchIdentityByItemId('YOUR_ITEM_ID')\n  .then((identity) => {\n    console.log(identity);\n  });"
            },
            {
              "language": "java",
              "code": "PluggyClient pluggyClient = PluggyClient.builder()\n  .clientIdAndSecret('your_client_id', 'your_secret')\n  .baseUrl('https://api.pluggy.ai')\n  .build();\nResponse<IdentityResponse> item = pluggyClient.service().getIdentityByItemId(\"YOUR_ITEM_ID\").execute();"
            },
            {
              "language": "csharp",
              "code": "PluggyClient pluggyClient = new PluggyClient('YOUR_PLUGGY_API_KEY');\nIdentity identity = await pluggyClient.FetchIdentityByItemId(\"YOUR_ITEM_ID\");"
            }
          ]
        }
      }
    },
    "/identity/{id}": {
      "get": {
        "operationId": "identity-retrieve",
        "summary": "Retrieve",
        "description": "Recovers the identity resource by its id",
        "responses": {
          "200": {
            "description": "Retrieve an Identity resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityResponse"
                },
                "example": {
                  "id": "42888436-62f5-49d2-8cf9-e312c7939509",
                  "fullName": "Francisco Sousa",
                  "companyName": "Pluggy Inc.",
                  "document": "076.630.975-48",
                  "taxNumber": "38.512.121/0001-95",
                  "documentType": "CPF",
                  "jobTitle": "Comercial",
                  "birthDate": "1991-05-01T00:00:00.000Z",
                  "establishmentCode": "001",
                  "establishmentName": "Pluggy Establishment",
                  "addresses": [
                    {
                      "fullAddress": "Av. Lúcio Costa 1234, Copacabana, Rio de Janeiro, Brasil",
                      "country": "Brasil",
                      "state": "RJ",
                      "city": "Rio de Janeiro",
                      "postalCode": "22620-171",
                      "primaryAddress": "Av. Lúcio Costa, 1234",
                      "type": "Personal"
                    }
                  ],
                  "phoneNumbers": [
                    {
                      "type": "Personal",
                      "value": "+54 911 12345678"
                    }
                  ],
                  "emails": [
                    {
                      "type": "Personal",
                      "value": "myemail@pluggy.ai"
                    }
                  ],
                  "relations": [
                    {
                      "type": "Father",
                      "name": "Juan Gonzalez"
                    },
                    {
                      "type": "Spouse",
                      "name": "Laura Garcia"
                    }
                  ],
                  "createdAt": "2020-09-30T14:38:12.724Z",
                  "updatedAt": "2020-09-30T14:38:12.724Z"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "message": "itemId must be a UUID",
                  "code": 400
                }
              }
            }
          },
          "404": {
            "description": "Identity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 404,
                  "codeDescription": "IDENTITY_NOT_FOUND",
                  "message": "identity not found"
                }
              }
            }
          },
          "500": {
            "description": "Server Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Identity"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "identity primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0e8a7f0-6d86-11ea-b77f-2e728ce88125"
          }
        ],
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "code": "const pluggy = require('pluggy-sdk');\nconst client = new pluggy.PluggyClient({\n  clientId: 'YOUR_CLIENT_ID',\n  clientSecret: 'YOUR_CLIENT_SECRET',\n});\n\nclient\n  .fetchIdentity('YOUR_IDENTITY_ID')\n  .then((identity) => {\n    console.log(identity);\n  });"
            },
            {
              "language": "java",
              "code": "PluggyClient pluggyClient = PluggyClient.builder()\n  .clientIdAndSecret('your_client_id', 'your_secret')\n  .baseUrl('https://api.pluggy.ai')\n  .build();\nResponse<IdentityResponse> identityByIdResponse = pluggyClient.service().getIdentityById(\"YOUR_IDENTITY_ID\").execute();"
            },
            {
              "language": "csharp",
              "code": "PluggyClient pluggyClient = new PluggyClient('YOUR_PLUGGY_API_KEY');\nIdentity identity = await pluggyClient.FetchIdentity(\"YOUR_IDENTITY_ID\");"
            }
          ]
        }
      }
    },
    "/portfolio/{itemId}": {
      "get": {
        "operationId": "aggregated-portfolio-find-by-item",
        "summary": "Find aggregated portfolio yield by item",
        "description": "Recovers aggregated portfolio yield of an item if available",
        "responses": {
          "200": {
            "description": "Retrieve the aggregated portfolio yield by itemId",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AggregatedPortfolioResponse"
                },
                "example": {
                  "total": 2,
                  "totalPages": 1,
                  "page": 1,
                  "results": [
                    {
                      "balance": 8955.58,
                      "percentage": 0.8,
                      "amount": 1218.78,
                      "currency": "BRL",
                      "date": "2023-01-24T12:35:10.775Z",
                      "percentageOverIndex": {
                        "value": 7.72,
                        "index": "CDI"
                      },
                      "period": "CURRENT_YEAR",
                      "assetDistribution": [
                        {
                          "MUTUAL_FUND": 2,
                          "FIXED_INCOME": 1,
                          "SECURITY": 1,
                          "ETF": 1,
                          "EQUITY": 2
                        }
                      ]
                    },
                    {
                      "balance": 38.78,
                      "percentage": 0.73,
                      "amount": 1051.62,
                      "currency": "BRL",
                      "date": "2023-01-24T12:35:10.775Z",
                      "percentageOverIndex": {
                        "value": 1.42,
                        "index": "CDI"
                      },
                      "period": "LAST_TWELVE_MONTHS",
                      "assetDistribution": [
                        {
                          "MUTUAL_FUND": 2,
                          "FIXED_INCOME": 1,
                          "SECURITY": 1,
                          "ETF": 1,
                          "EQUITY": 2
                        }
                      ]
                    }
                  ],
                  "id": "b4377a31-d0af-45be-9c8c-84020c0036fd",
                  "itemId": "7ceaefb3-3c47-49ef-aab5-2612eebd28b7"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "message": "itemId must be a UUID",
                  "code": 400
                }
              }
            }
          },
          "404": {
            "description": "Portgolio Yield not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 404,
                  "codeDescription": "PORTFOLIO_NOT_FOUND",
                  "message": "portfolio not found"
                }
              }
            }
          },
          "500": {
            "description": "Server Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Portfolio Yield"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Item's primary identifier",
            "in": "path",
            "name": "itemId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0e8a7f0-6d86-11ea-b77f-2e728ce88125"
          }
        ]
      }
    },
    "/portfolio/{itemId}/monthly": {
      "get": {
        "operationId": "monthly-portfolio-find-by-item",
        "summary": "Find monthly portfolio yield by item",
        "description": "Recovers monthly portfolio yield of an item if available",
        "responses": {
          "200": {
            "description": "Retrieve the monthly portfolio yield by itemId",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MonthlyPortfolioResponse"
                },
                "example": {
                  "total": 2,
                  "totalPages": 1,
                  "page": 1,
                  "results": [
                    {
                      "balance": 104.11,
                      "yieldPercentage": 6.57,
                      "yieldAmount": -6.7,
                      "yieldCurrency": "BRL",
                      "date": "2023-01-01T03:00:00.775Z",
                      "yieldPercentageOverIndex": {
                        "value": 9.46,
                        "index": "CDI"
                      },
                      "currentMonth": true
                    },
                    {
                      "balance": 116.84,
                      "yieldPercentage": 6.69,
                      "yieldAmount": -6.95,
                      "yieldCurrency": "BRL",
                      "date": "2022-12-01T03:00:00.775Z",
                      "yieldPercentageOverIndex": {
                        "value": 9.52,
                        "index": "CDI"
                      },
                      "currentMonth": false
                    }
                  ],
                  "id": "b4377a31-d0af-45be-9c8c-84020c0036fd",
                  "itemId": "7ceaefb3-3c47-49ef-aab5-2612eebd28b7"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "message": "itemId must be a UUID",
                  "code": 400
                }
              }
            }
          },
          "404": {
            "description": "Portfolio Yield not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 404,
                  "codeDescription": "PORTFOLIO_NOT_FOUND",
                  "message": "portfolio not found"
                }
              }
            }
          },
          "500": {
            "description": "Server Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Portfolio Yield"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Item's primary identifier",
            "in": "path",
            "name": "itemId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0e8a7f0-6d86-11ea-b77f-2e728ce88125"
          }
        ]
      }
    },
    "/income-reports": {
      "get": {
        "operationId": "income-reports-find-by-item",
        "summary": "Find income reports by item",
        "description": "Recovers income reports of an item if available",
        "responses": {
          "200": {
            "description": "Retrieve income reports by itemId",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IncomeReportsResponse"
                },
                "example": {
                  "total": 2,
                  "totalPages": 1,
                  "page": 1,
                  "results": [
                    {
                      "url": "presigned-s3-file-url",
                      "year": 2023
                    },
                    {
                      "url": "presigned-s3-file-url",
                      "year": 2022
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "message": "itemId must be a UUID",
                  "code": 400
                }
              }
            }
          },
          "404": {
            "description": "Item not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 404,
                  "codeDescription": "ITEM_NOT_FOUND",
                  "message": "item not found"
                }
              }
            }
          },
          "500": {
            "description": "Server Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Income Report"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Item's primary identifier",
            "in": "query",
            "name": "itemId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0e8a7f0-6d86-11ea-b77f-2e728ce88125"
          }
        ]
      }
    },
    "/webhooks": {
      "get": {
        "operationId": "webhooks-list",
        "summary": "List",
        "description": "Retrieves all Webhooks associated with your application",
        "responses": {
          "200": {
            "description": "List of Webhooks",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "page": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "total": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "totalPages": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Webhook"
                      },
                      "description": ""
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "page": 1,
                      "total": 2,
                      "totalPages": 1,
                      "results": [
                        {
                          "id": "d619cfde-a8d7-4fe0-a10d-6de488bde4e0",
                          "event": "item/updated",
                          "url": "https://www.myapi.com/notifications",
                          "disabledAt": "2020-06-24T21:29:40.300Z",
                          "createdAt": "2020-06-24T21:29:40.300Z",
                          "updatedAt": "2020-06-24T21:29:40.300Z"
                        },
                        {
                          "id": "207f5bcd-312a-439c-abbe-166b6632c980",
                          "event": "item/all",
                          "url": "https://www.myapi.com/notifications",
                          "disabledAt": null,
                          "createdAt": "2020-06-24T21:29:40.300Z",
                          "updatedAt": "2020-06-24T21:29:40.300Z"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 500,
                  "message": "Internal Server Error"
                }
              }
            }
          },
          "204": {
            "description": "No content"
          }
        },
        "tags": [
          "Webhook"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "code": "const pluggy = require('pluggy-sdk');\nconst client = new pluggy.PluggyClient({\n  clientId: 'YOUR_CLIENT_ID',\n  clientSecret: 'YOUR_CLIENT_SECRET',\n});\nclient\n  .fetchWebhooks()\n  .then(({ results: webhooks }) => {\n    console.log(webhook);\n  });"
            },
            {
              "language": "csharp",
              "code": "PluggyClient pluggyClient = new PluggyClient(\"YOUR_PLUGGY_API_KEY\");\nList<Webhook> webhooks = await pluggyClient.FetchWebhooks();"
            }
          ]
        }
      },
      "post": {
        "operationId": "webhooks-create",
        "summary": "Create",
        "description": "Creates a webhook attached to the specific event and provides the notification url",
        "responses": {
          "201": {
            "description": "Created webhook",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemCreationErrorResponse"
                },
                "examples": {
                  "invalidEvent": {
                    "summary": "Invalid event type",
                    "value": {
                      "message": "Invalid event type '{event}' for webhook",
                      "code": 400
                    }
                  },
                  "alreadyExists": {
                    "summary": "Webhook event already created for the specified url",
                    "value": {
                      "message": "A webhook for event '{event}' and url '{url}' already exists.",
                      "code": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 500,
                  "codeDescription": "INTERNAL_SERVER_ERROR",
                  "message": "Internal Server Error"
                }
              }
            }
          }
        },
        "tags": [
          "Webhook"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/CreateWebhook"
        },
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "code": "const pluggy = require('pluggy-sdk');\nconst client = new pluggy.PluggyClient({\n  clientId: 'YOUR_CLIENT_ID',\n  clientSecret: 'YOUR_CLIENT_SECRET',\n});\nclient\n  .createWebhook({\n    event: 'item/updated',\n    url: 'https://www.myapi.com/notifications',\n})\n  .then((webhook) => {\n    console.log(webhook);\n  });"
            },
            {
              "language": "csharp",
              "code": "PluggyClient pluggyClient = new PluggyClient(\"YOUR_PLUGGY_API_KEY\");\nWebhook webhook = await pluggyClient.CreateWebhook(\"https://www.myapi.com/notifications\", WebhookEvent.ItemCreated);"
            }
          ]
        }
      }
    },
    "/webhooks/{id}": {
      "get": {
        "operationId": "webhooks-retrieve",
        "summary": "Retrieve",
        "description": "Retrieves a specific webhook",
        "responses": {
          "200": {
            "description": "Retrieve a webhook.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            }
          },
          "404": {
            "description": "Webhook not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 404,
                  "codeDescription": "WEBHOOK_NOT_FOUND",
                  "message": "webhook not found"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 500,
                  "message": "Internal Server Error"
                }
              }
            }
          }
        },
        "tags": [
          "Webhook"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "webhook primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "d0e8a7f0-6d86-11ea-b77f-2e728ce88125"
          }
        ],
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "code": "const pluggy = require('pluggy-sdk');\nconst client = new pluggy.PluggyClient({\n  clientId: 'YOUR_CLIENT_ID',\n  clientSecret: 'YOUR_CLIENT_SECRET',\n});\nclient\n  .fetchWebhook('YOUR_WEBHOOK_ID')\n  .then((webhook) => {\n    console.log(webhook);\n  });"
            },
            {
              "language": "csharp",
              "code": "PluggyClient pluggyClient = new PluggyClient(\"YOUR_PLUGGY_API_KEY\");\nWebhook webhook = await pluggyClient.FetchWebhook(\"YOUR_WEBHOOK_ID\");"
            }
          ]
        }
      },
      "patch": {
        "operationId": "webhooks-update",
        "summary": "Update",
        "description": "Updates a webhook event and/or url listener. Once updated all events that are triggered will replicate the updated logic",
        "responses": {
          "200": {
            "description": "Update the webhook that was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookCreationErrorResponse"
                },
                "example": {
                  "message": "Webhook url must be valid URL address and not localhost",
                  "code": 400
                }
              }
            }
          },
          "404": {
            "description": "Webhook not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 404,
                  "codeDescription": "WEBHOOK_NOT_FOUND",
                  "message": "webhook not found"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 500,
                  "message": "Internal Server Error"
                }
              }
            }
          }
        },
        "tags": [
          "Webhook"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "webhook primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0e8a7f0-6d86-11ea-b77f-2e728ce88125"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/CreateWebhook"
        },
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "code": "const pluggy = require('pluggy-sdk');\nconst client = new pluggy.PluggyClient({\n  clientId: 'YOUR_CLIENT_ID',\n  clientSecret: 'YOUR_CLIENT_SECRET',\n});\nclient\n  .updateWebhook('YOUR_WEBHOOK_ID', {\n    event: 'all',\n    url: 'https://www.myapi.com/notifications',\n})\n  .then((webhook) => {\n    console.log(webhook);\n  });"
            },
            {
              "language": "csharp",
              "code": "PluggyClient pluggyClient = new PluggyClient(\"YOUR_PLUGGY_API_KEY\");\nWebhook webhook = await pluggyClient.UpdateWebhook(\"YOUR_WEBHOOK_ID\", \"https://www.myapi.com/notifications\", WebhookEvent.All);"
            }
          ]
        }
      },
      "delete": {
        "operationId": "webhooks-delete",
        "summary": "Delete",
        "description": "Deletes a webhook listener by its id",
        "responses": {
          "200": {
            "description": "Webhook was deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ICountResponse"
                }
              }
            }
          },
          "404": {
            "description": "Webhook not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 404,
                  "codeDescription": "WEBHOOK_NOT_FOUND",
                  "message": "webhook not found"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 500,
                  "message": "Internal Server Error"
                }
              }
            }
          }
        },
        "tags": [
          "Webhook"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "webhook primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0e8a7f0-6d86-11ea-b77f-2e728ce88125"
          }
        ],
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "code": "const pluggy = require('pluggy-sdk');\nconst client = new pluggy.PluggyClient({\n  clientId: 'YOUR_CLIENT_ID',\n  clientSecret: 'YOUR_CLIENT_SECRET',\n});\nclient\n  .deleteWebhook('YOUR_WEBHOOK_ID')\n  .then(() => {\n    console.log('deleted!');\n  });"
            },
            {
              "language": "csharp",
              "code": "PluggyClient pluggyClient = new PluggyClient(\"YOUR_PLUGGY_API_KEY\");\nawait pluggyClient.deleteWebhook(\"YOUR_WEBHOOK_ID\");"
            }
          ]
        }
      }
    },
    "/categories": {
      "get": {
        "operationId": "categories-list",
        "summary": "List",
        "description": "Recovers all categories active from the data categorization.\nCan be filtered by the parentId of the category.",
        "responses": {
          "200": {
            "description": "Retrieve a list of all categories",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Category"
                  }
                },
                "example": {
                  "page": 1,
                  "total": 2,
                  "totalPages": 1,
                  "results": [
                    {
                      "id": "01000000",
                      "description": "Income",
                      "descriptionTranslated": "Renda"
                    },
                    {
                      "id": "01010000",
                      "description": "Salary/pro-labore",
                      "descriptionTranslated": "Salário",
                      "parentId": "01000000",
                      "parentDescription": "Income"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Category"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Parent's primary identifier",
            "in": "query",
            "name": "parentId",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "01000000"
          }
        ],
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "code": "const pluggy = require('pluggy-sdk');\nconst client = new pluggy.PluggyClient({\n  clientId: 'YOUR_CLIENT_ID',\n  clientSecret: 'YOUR_CLIENT_SECRET',\n});\nclient\n  .fetchCategories()\n  .then(({ results: categories }) => {\n    console.log(categories);\n  });"
            },
            {
              "language": "java",
              "code": "PluggyClient pluggyClient = PluggyClient.builder()\n  .clientIdAndSecret('your_client_id', 'your_secret')\n  .baseUrl('https://api.pluggy.ai')\n  .build();\nResponse<CategoriesResponse> categoriesResponse = pluggyClient.service().getCategories().execute();"
            },
            {
              "language": "csharp",
              "code": "PluggyClient pluggyClient = new PluggyClient('YOUR_PLUGGY_API_KEY');\nPageResults<Category> categoriesResponse = await pluggyClient.FetchCategories();"
            }
          ]
        }
      }
    },
    "/categories/{id}": {
      "get": {
        "operationId": "categories-retrieve",
        "summary": "Retrieve",
        "description": "Recovers the category resource by its id",
        "responses": {
          "200": {
            "description": "Retrieve a category.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "404": {
            "description": "Category not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 404,
                  "codeDescription": "CATEGORY_NOT_FOUND",
                  "message": "category not found"
                }
              }
            }
          }
        },
        "tags": [
          "Category"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "category primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "01000000"
          }
        ],
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "code": "const pluggy = require('pluggy-sdk');\nconst client = new pluggy.PluggyClient({\n  clientId: 'YOUR_CLIENT_ID',\n  clientSecret: 'YOUR_CLIENT_SECRET',\n});\nclient\n  .fetchCategory('CATEGORY_ID')\n  .then((category) => {\n    console.log(category);\n  });"
            },
            {
              "language": "java",
              "code": "PluggyClient pluggyClient = PluggyClient.builder()\n  .clientIdAndSecret('your_client_id', 'your_secret')\n  .baseUrl('https://api.pluggy.ai')\n  .build();\nCategory category = pluggyClient.service().getCategory(\"CATEGORY_ID\").execute();"
            },
            {
              "language": "csharp",
              "code": "PluggyClient pluggyClient = new PluggyClient('YOUR_PLUGGY_API_KEY');\nCategory category = await pluggyClient.FetchCategory(\"CATEGORY_ID\");"
            }
          ]
        }
      }
    },
    "/categories/rules": {
      "get": {
        "operationId": "client-category-rules-list",
        "summary": "List Category Rules",
        "description": "Recovers category rules",
        "responses": {
          "200": {
            "description": "Retrieve a list of all client category rules.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PageResponseCategoryRules"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Category"
        ],
        "security": [
          {
            "default": []
          }
        ]
      },
      "post": {
        "operationId": "client-category-rules-create",
        "summary": "Create Category Rule",
        "description": "Create a single category rule",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateClientCategoryRule"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Creates a Category Rule and recover the result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientCategoryRule"
                }
              }
            }
          },
          "404": {
            "description": "Category not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 404,
                  "codeDescription": "CATEGORY_NOT_FOUND",
                  "message": "category not found"
                }
              }
            }
          },
          "400": {
            "description": "Invalid description",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 400,
                  "message": "description must be a string"
                }
              }
            }
          }
        },
        "tags": [
          "Category"
        ],
        "security": [
          {
            "default": []
          }
        ]
      }
    },
    "/loans": {
      "get": {
        "operationId": "loans-list",
        "summary": "List",
        "description": "Recovers all loans collected for the item provided",
        "responses": {
          "200": {
            "description": "Retrieve a list of all loans",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "page": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "total": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "totalPages": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Loan"
                      },
                      "description": "List of loans"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "page": 1,
                      "total": 1,
                      "totalPages": 1,
                      "results": [
                        {
                          "id": "05c693bf-c196-47ea-a28c-8251d6bb8a06",
                          "itemId": "5e9f8f8f-f8f8-4f8f-8f8f-8f8f8f8f8f8f",
                          "contractNumber": "000000721792794",
                          "ipocCode": "92792126019929279212650822221989319252576",
                          "productName": "Crédito Pessoal Consignado",
                          "type": "CREDITO_PESSOAL_COM_CONSIGNACAO",
                          "date": "2023-07-20T00:00:00",
                          "contractDate": "2022-08-01T00:00:00",
                          "disbursementDates": [
                            "2018-01-15T00:00:00"
                          ],
                          "settlementDate": "2018-01-15T00:00:00",
                          "contractAmount": 50000,
                          "currencyCode": "BRL",
                          "dueDate": "2028-01-15T00:00:00",
                          "installmentPeriodicity": "MONTHLY",
                          "installmentPeriodicityAdditionalInfo": "",
                          "firstInstallmentDueDate": "2018-02-15T00:00:00",
                          "CET": 0.29,
                          "amortizationScheduled": "SAC",
                          "amortizationScheduledAdditionalInfo": "",
                          "cnpjConsignee": "60.500.998/0001-35",
                          "interestRates": [
                            {
                              "taxType": "EFETIVA",
                              "interestRateType": "SIMPLES",
                              "taxPeriodicity": "AA",
                              "calculation": "21/252",
                              "referentialRateIndexerType": "PRE_FIXADO",
                              "referentialRateIndexerSubType": "TJLP",
                              "referentialRateIndexerAdditionalInfo": "",
                              "preFixedRate": 0.6,
                              "postFixedRate": 0.55,
                              "additionalInfo": ""
                            }
                          ],
                          "contractedFees": [
                            {
                              "name": "Renovação de cadastro",
                              "code": "CADASTRO",
                              "chargeType": "UNICA",
                              "charge": "MINIMO",
                              "amount": 100000.04,
                              "rate": 0.062
                            }
                          ],
                          "contractedFinanceCharges": [
                            {
                              "type": "JUROS_REMUNERATORIOS_POR_ATRASO",
                              "chargeAdditionalInfo": "",
                              "chargeRate": 0.07
                            }
                          ],
                          "warranties": [
                            {
                              "currencyCode": "BRL",
                              "type": "CESSAO_DIREITOS_CREDITORIOS",
                              "subtype": "NOTAS_PROMISSORIAS_OUTROS_DIREITOS_CREDITO",
                              "amount": 1000.04
                            }
                          ],
                          "installments": {
                            "typeNumberOfInstallments": "MES",
                            "totalNumberOfInstallments": 130632,
                            "typeContractRemaining": "DIA",
                            "contractRemainingNumber": 14600,
                            "paidInstallments": 73,
                            "dueInstallments": 57,
                            "pastDueInstallments": 73,
                            "balloonPayments": [
                              {
                                "dueDate": "2021-05-21T00:00:00",
                                "amount": {
                                  "value": 1000.04,
                                  "currencyCode": "BRL"
                                }
                              }
                            ]
                          },
                          "payments": {
                            "contractOutstandingBalance": 1000.04,
                            "releases": [
                              {
                                "isOverParcelPayment": true,
                                "installmentId": "WGx0aExYcEJMVm93TFRsZFcyRXRla0V0V2pBdE9Wd3RYWH",
                                "paidDate": "2021-05-21T00:00:00",
                                "currencyCode": "BRL",
                                "paidAmount": 1000.04,
                                "overParcel": {
                                  "fees": [
                                    {
                                      "name": "Reavaliação periódica do bem",
                                      "code": "aval_bem",
                                      "amount": 100000.04
                                    }
                                  ],
                                  "charges": [
                                    {
                                      "type": "JUROS_REMUNERATORIOS_POR_ATRASO",
                                      "additionalInfo": "",
                                      "amount": 1000.04
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Loan"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Item's primary identifier",
            "in": "query",
            "name": "itemId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0e8a7f0-6d86-11ea-b77f-2e728ce88125"
          }
        ]
      }
    },
    "/loans/{id}": {
      "get": {
        "operationId": "loans-retrieve",
        "summary": "Retrieve",
        "responses": {
          "200": {
            "description": "Retrieve a loan.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Loan"
                },
                "examples": {
                  "response": {
                    "value": {
                      "id": "05c693bf-c196-47ea-a28c-8251d6bb8a06",
                      "itemId": "5e9f8f8f-f8f8-4f8f-8f8f-8f8f8f8f8f8f",
                      "contractNumber": "000000721792794",
                      "ipocCode": "92792126019929279212650822221989319252576",
                      "productName": "Crédito Pessoal Consignado",
                      "type": "CREDITO_PESSOAL_COM_CONSIGNACAO",
                      "date": "2023-07-20T00:00:00",
                      "contractDate": "2022-08-01T00:00:00",
                      "disbursementDates": [
                        "2018-01-15T00:00:00"
                      ],
                      "settlementDate": "2018-01-15T00:00:00",
                      "contractAmount": 50000,
                      "currencyCode": "BRL",
                      "dueDate": "2028-01-15T00:00:00",
                      "installmentPeriodicity": "MONTHLY",
                      "installmentPeriodicityAdditionalInfo": "",
                      "firstInstallmentDueDate": "2018-02-15T00:00:00",
                      "CET": 0.29,
                      "amortizationScheduled": "SAC",
                      "amortizationScheduledAdditionalInfo": "",
                      "cnpjConsignee": "60.500.998/0001-35",
                      "interestRates": [
                        {
                          "taxType": "EFETIVA",
                          "interestRateType": "SIMPLES",
                          "taxPeriodicity": "AA",
                          "calculation": "21/252",
                          "referentialRateIndexerType": "PRE_FIXADO",
                          "referentialRateIndexerSubType": "TJLP",
                          "referentialRateIndexerAdditionalInfo": "",
                          "preFixedRate": 0.6,
                          "postFixedRate": 0.55,
                          "additionalInfo": ""
                        }
                      ],
                      "contractedFees": [
                        {
                          "name": "Renovação de cadastro",
                          "code": "CADASTRO",
                          "chargeType": "UNICA",
                          "charge": "MINIMO",
                          "amount": 100000.04,
                          "rate": 0.062
                        }
                      ],
                      "contractedFinanceCharges": [
                        {
                          "type": "JUROS_REMUNERATORIOS_POR_ATRASO",
                          "chargeAdditionalInfo": "",
                          "chargeRate": 0.07
                        }
                      ],
                      "warranties": [
                        {
                          "currencyCode": "BRL",
                          "type": "CESSAO_DIREITOS_CREDITORIOS",
                          "subtype": "NOTAS_PROMISSORIAS_OUTROS_DIREITOS_CREDITO",
                          "amount": 1000.04
                        }
                      ],
                      "installments": {
                        "typeNumberOfInstallments": "MES",
                        "totalNumberOfInstallments": 130632,
                        "typeContractRemaining": "DIA",
                        "contractRemainingNumber": 14600,
                        "paidInstallments": 73,
                        "dueInstallments": 57,
                        "pastDueInstallments": 73,
                        "balloonPayments": [
                          {
                            "dueDate": "2021-05-21T00:00:00",
                            "amount": {
                              "value": 1000.04,
                              "currencyCode": "BRL"
                            }
                          }
                        ]
                      },
                      "payments": {
                        "contractOutstandingBalance": 1000.04,
                        "releases": [
                          {
                            "isOverParcelPayment": true,
                            "installmentId": "WGx0aExYcEJMVm93TFRsZFcyRXRla0V0V2pBdE9Wd3RYWH",
                            "paidDate": "2021-05-21T00:00:00",
                            "currencyCode": "BRL",
                            "paidAmount": 1000.04,
                            "overParcel": {
                              "fees": [
                                {
                                  "name": "Reavaliação periódica do bem",
                                  "code": "aval_bem",
                                  "amount": 100000.04
                                }
                              ],
                              "charges": [
                                {
                                  "type": "JUROS_REMUNERATORIOS_POR_ATRASO",
                                  "additionalInfo": "",
                                  "amount": 1000.04
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Loan not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 404,
                  "codeDescription": "LOAN_NOT_FOUND",
                  "message": "loan not found"
                }
              }
            }
          }
        },
        "description": "Recovers the loan resource by its id",
        "tags": [
          "Loan"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "loan primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0e8a7f0-6d86-11ea-b77f-2e728ce88125"
          }
        ]
      }
    },
    "/benefits": {
      "get": {
        "operationId": "benefits-list",
        "summary": "List",
        "description": "Recovers all benefits collected for the item provided",
        "responses": {
          "200": {
            "description": "Retrieve a list of all benefits",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "page": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "total": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "totalPages": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/BenefitResponse"
                      },
                      "description": "List of benefits"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "page": 1,
                      "total": 1,
                      "totalPages": 1,
                      "results": [
                        {
                          "id": "05c693bf-c196-47ea-a28c-8251d6bb8a06",
                          "itemId": "5e9f8f8f-f8f8-4f8f-8f8f-8f8f8f8f8f8f",
                          "number": "000000721792794",
                          "type": "BENEFIT",
                          "beneficiaryName": "John Doe",
                          "marginBaseValue": 1000,
                          "availableMarginValue": 1000,
                          "usedMarginValue": 0,
                          "reservedMarginValue": 0,
                          "payrollDeductibleAvailableMarginValue": 1000,
                          "payingInstitution": {
                            "name": "Bank",
                            "code": "001",
                            "agency": "",
                            "account": "123456"
                          },
                          "payrollLoans": [
                            {
                              "contractCode": "123456",
                              "nominalInterestRate": 3,
                              "efectiveInterestRate": 10,
                              "cetAnnualRate": 12,
                              "cetMonthRate": 2,
                              "currencyCode": "BRL",
                              "amortizationRegime": "PRICE",
                              "operationHiringDate": "2021-01-01",
                              "installmentsQuantity": 12,
                              "installmentsValue": 1000,
                              "dueDateFirstInstallment": "2021-02-01",
                              "dueDateLastInstallment": "2022-01-01",
                              "cnpjCorrespondentBanking": "12345678901234",
                              "pdfContract": "cGRmIGV4YW1wbGU=",
                              "client": {
                                "document": "12345678901",
                                "name": "John Doe",
                                "phone": "11999999999",
                                "addresStreet": "Main Street",
                                "addressNumber": "123",
                                "addressCity": "Sao Paulo",
                                "addressZipCode": "12345678",
                                "addressState": "SP"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Benefit"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Item's primary identifier",
            "in": "query",
            "name": "itemId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0e8a7f0-6d86-11ea-b77f-2e728ce88125"
          }
        ]
      }
    },
    "/benefits/{id}": {
      "get": {
        "operationId": "benefit-retrieve-by-id",
        "summary": "Retrieve",
        "responses": {
          "200": {
            "description": "Retrieve a benefit by it's id.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BenefitResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "id": "05c693bf-c196-47ea-a28c-8251d6bb8a06",
                      "itemId": "5e9f8f8f-f8f8-4f8f-8f8f-8f8f8f8f8f8f",
                      "number": "000000721792794",
                      "type": "BENEFIT",
                      "beneficiaryName": "John Doe",
                      "marginBaseValue": 1000,
                      "availableMarginValue": 1000,
                      "usedMarginValue": 0,
                      "reservedMarginValue": 0,
                      "payrollDeductibleAvailableMarginValue": 1000,
                      "payingInstitution": {
                        "name": "Bank",
                        "code": "001",
                        "agency": "",
                        "account": "123456"
                      },
                      "payrollLoans": [
                        {
                          "contractCode": "123456",
                          "nominalInterestRate": 3,
                          "efectiveInterestRate": 10,
                          "cetAnnualRate": 12,
                          "cetMonthRate": 2,
                          "currencyCode": "BRL",
                          "amortizationRegime": "PRICE",
                          "operationHiringDate": "2021-01-01",
                          "installmentsQuantity": 12,
                          "installmentsValue": 1000,
                          "dueDateFirstInstallment": "2021-02-01",
                          "dueDateLastInstallment": "2022-01-01",
                          "cnpjCorrespondentBanking": "12345678901234",
                          "pdfContract": "cGRmIGV4YW1wbGU=",
                          "client": {
                            "document": "12345678901",
                            "name": "John Doe",
                            "phone": "11999999999",
                            "addresStreet": "Main Street",
                            "addressNumber": "123",
                            "addressCity": "Sao Paulo",
                            "addressZipCode": "12345678",
                            "addressState": "SP"
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Benefit not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 404,
                  "codeDescription": "BENEFIT_NOT_FOUND",
                  "message": "Benefit not found"
                }
              }
            }
          }
        },
        "description": "Recovers the benefit resource by its id",
        "tags": [
          "Benefit"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "benefit primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0e8a7f0-6d86-11ea-b77f-2e728ce88125"
          }
        ]
      }
    },
    "/bills": {
      "get": {
        "operationId": "bills-list",
        "summary": "List",
        "description": "Recovers all credit card bills collected for the account provided",
        "responses": {
          "200": {
            "description": "Retrieve a list of all credit card bills",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "page": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "total": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "totalPages": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Bill"
                      },
                      "description": "List of credit card bills"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "page": 1,
                      "total": 1,
                      "totalPages": 1,
                      "results": [
                        {
                          "id": "05c693bf-c196-47ea-a28c-8251d6bb8a06",
                          "dueDate": "2023-07-20T00:00:00",
                          "totalAmount": 50000,
                          "totalAmountCurrencyCode": "BRL",
                          "minimumPaymentAmount": 50000,
                          "allowsInstallments": true,
                          "financeCharges": [
                            {
                              "id": "123456bf-c196-47ea-a28c-8251d6bb8777",
                              "type": "IOF",
                              "amount": 20.51,
                              "currencyCode": "BRL",
                              "additionalInfo": "NA"
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Bill"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Account's primary identifier",
            "in": "query",
            "name": "accountId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0e8a7f0-6d86-11ea-b77f-2e728ce88125"
          }
        ]
      }
    },
    "/bills/{id}": {
      "get": {
        "operationId": "bills-retrieve",
        "summary": "Retrieve",
        "responses": {
          "200": {
            "description": "Retrieve a credit card bill.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Bill"
                },
                "examples": {
                  "response": {
                    "value": {
                      "id": "05c693bf-c196-47ea-a28c-8251d6bb8a06",
                      "accountId": "5e9f8f8f-f8f8-4f8f-8f8f-8f8f8f8f8f8f",
                      "dueDate": "2023-07-20T00:00:00",
                      "totalAmount": 50000,
                      "totalAmountCurrencyCode": "BRL",
                      "minimumPaymentAmount": 50000,
                      "allowsInstallments": true,
                      "financeCharges": [
                        {
                          "id": "123456bf-c196-47ea-a28c-8251d6bb8777",
                          "creditCardBillId": "05c693bf-c196-47ea-a28c-8251d6bb8a06",
                          "type": "IOF",
                          "amount": 20.51,
                          "currencyCode": "BRL",
                          "additionalInfo": "NA"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Bill not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 404,
                  "codeDescription": "CREDIT_CARD_BILL_NOT_FOUND",
                  "message": "Bill not found"
                }
              }
            }
          }
        },
        "description": "Recovers the bill resource by its id",
        "tags": [
          "Bill"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Bill primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0e8a7f0-6d86-11ea-b77f-2e728ce88125"
          }
        ]
      }
    },
    "/payments/requests": {
      "get": {
        "operationId": "payment-requests-list",
        "summary": "List",
        "description": "Recovers all created payment requests",
        "responses": {
          "200": {
            "description": "Retrieve a list of all payment requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "page": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "total": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "totalPages": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PaymentRequest"
                      },
                      "description": "List of payment requests"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "page": 1,
                      "total": 1,
                      "totalPages": 1,
                      "results": [
                        {
                          "id": "05c693bf-c196-47ea-a28c-8251d6bb8a06",
                          "amount": 100.5,
                          "description": "Transferência",
                          "status": "CREATED",
                          "createdAt": "2023-11-06T13:03:45.689Z",
                          "updatedAt": "2023-11-06T13:03:45.689Z",
                          "callbackUrls": null,
                          "paymentUrl": "https://pay.pluggy.ai/05c693bf-c196-47ea-a28c-8251d6bb8a06",
                          "recipient": null,
                          "pixQrCode": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Payment Request"
        ],
        "security": [
          {
            "default": []
          }
        ]
      },
      "post": {
        "operationId": "payment-request-create",
        "summary": "Create",
        "responses": {
          "200": {
            "description": "Success creating payment request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentRequest"
                },
                "examples": {
                  "response": {
                    "value": {
                      "id": "05c693bf-c196-47ea-a28c-8251d6bb8a06",
                      "amount": 100.5,
                      "description": "Transferência",
                      "status": "CREATED",
                      "createdAt": "2023-11-06T13:03:45.689Z",
                      "updatedAt": "2023-11-06T13:03:45.689Z",
                      "callbackUrls": null,
                      "paymentUrl": "https://pay.pluggy.ai/05c693bf-c196-47ea-a28c-8251d6bb8a06"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Creates the payment request resource",
        "tags": [
          "Payment Request"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePaymentRequest"
              },
              "examples": {
                "Plain parameters": {
                  "value": {
                    "amount": 100.5,
                    "description": "Transferência"
                  }
                }
              }
            }
          },
          "required": true
        }
      }
    },
    "/payments/requests/{id}/schedules": {
      "get": {
        "operationId": "payment-schedules-list",
        "summary": "Schedule List",
        "description": "Recovers all scheduled payments from a payment request",
        "responses": {
          "200": {
            "description": "Retrieve a list of all payment schedules",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "page": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "total": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "totalPages": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SchedulePayment"
                      },
                      "description": "List of scheduled payments from a payment request"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "page": 1,
                      "total": 1,
                      "totalPages": 1,
                      "results": [
                        {
                          "id": "05c693bf-c196-47ea-a28c-8251d6bb8a06",
                          "scheduledDate": "2024-06-04",
                          "description": "PAGAMENTO AGENDADO 2/20",
                          "status": "SCHEDULED"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "Payment request primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0e8a7f0-6d86-11ea-b77f-2e728ce88125"
          }
        ],
        "tags": [
          "Payment Request"
        ],
        "security": [
          {
            "default": []
          }
        ]
      }
    },
    "/payments/requests/pix-qr": {
      "post": {
        "operationId": "payment-request-create-pix-qr",
        "summary": "Create PIX QR payment request",
        "responses": {
          "200": {
            "description": "Create a PIX QR payment request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentRequest"
                },
                "examples": {
                  "response": {
                    "value": {
                      "id": "05c693bf-c196-47ea-a28c-8251d6bb8a06",
                      "amount": 100.5,
                      "description": "Transferência",
                      "status": "CREATED",
                      "createdAt": "2023-11-06T13:03:45.689Z",
                      "updatedAt": "2023-11-06T13:03:45.689Z",
                      "callbackUrls": null,
                      "paymentUrl": "https://pay.pluggy.ai/05c693bf-c196-47ea-a28c-8251d6bb8a06"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Creates the PIX QR payment request resource",
        "tags": [
          "Payment Request"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePixQrPaymentRequest"
              },
              "examples": {
                "request": {
                  "value": {
                    "pixQrCode": "00020126490014br.gov.bcb.pix0108dict-key0215additional-info52040000530398654031005802BR5912example-name6006Cidade62090505tx-id63045E20",
                    "callbackUrls": null
                  }
                }
              }
            }
          },
          "required": true
        }
      }
    },
    "/payments/requests/boleto": {
      "post": {
        "operationId": "payment-request-create-boleto",
        "summary": "Create boleto payment request",
        "responses": {
          "200": {
            "description": "Create a boleto payment request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentRequest"
                },
                "examples": {
                  "response": {
                    "value": {
                      "id": "05c693bf-c196-47ea-a28c-8251d6bb8a06",
                      "amount": 31.12,
                      "description": "Pagamento de boleto",
                      "status": "CREATED",
                      "createdAt": "2023-11-06T13:03:45.689Z",
                      "updatedAt": "2023-11-06T13:03:45.689Z",
                      "callbackUrls": null,
                      "paymentUrl": "https://pay.pluggy.ai/05c693bf-c196-47ea-a28c-8251d6bb8a06",
                      "boleto": {
                        "digitableLine": "27490001011000000011660070701507297010000001111",
                        "barcode": "27492970100000028200001010000000116007071111",
                        "payer": {
                          "taxNumber": "11111111111",
                          "name": "John Doe"
                        },
                        "recipient": {
                          "taxNumber": "37943755000130",
                          "name": "PLUGGY BRASIL INSTITUICAO DE PAGAMENTO LTDA"
                        },
                        "date": "2024-04-10T10:42:12",
                        "dueDate": "2024-04-29T00:00:00",
                        "expirationDate": "2024-12-31T00:00:00",
                        "baseAmount": 28.2,
                        "penaltyAmount": 2.82,
                        "interestAmount": 0.1034,
                        "discountAmount": 0,
                        "totalAmount": 31.12,
                        "updatedAt": "2020-04-21T15:00:00.000Z"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Creates the boleto payment request resource",
        "tags": [
          "Payment Request"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBoletoPaymentRequest"
              },
              "examples": {
                "request": {
                  "value": {
                    "description": "Pagamento de boleto",
                    "boletoDigitableLine": "27490.00101.10000.000116.60070.701507.2.970 1 0000002820",
                    "callbackUrls": null
                  }
                }
              }
            }
          },
          "required": true
        }
      }
    },
    "/payments/requests/{id}": {
      "get": {
        "operationId": "payment-request-retrieve",
        "summary": "Retrieve",
        "responses": {
          "200": {
            "description": "Retrieve a payment request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentRequest"
                },
                "examples": {
                  "response": {
                    "value": {
                      "id": "05c693bf-c196-47ea-a28c-8251d6bb8a06",
                      "amount": 100.5,
                      "description": "Transferência",
                      "status": "CREATED",
                      "createdAt": "2023-11-06T13:03:45.689Z",
                      "updatedAt": "2023-11-06T13:03:45.689Z",
                      "callbackUrls": null,
                      "paymentUrl": "https://pay.pluggy.ai/05c693bf-c196-47ea-a28c-8251d6bb8a06",
                      "recipient": null
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Payment Request not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 404,
                  "codeDescription": "PAYMENT_REQUEST_NOT_FOUND",
                  "message": "Payment request not found"
                }
              }
            }
          }
        },
        "description": "Recovers the payment request resource by its id",
        "tags": [
          "Payment Request"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Payment request primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0e8a7f0-6d86-11ea-b77f-2e728ce88125"
          }
        ]
      },
      "delete": {
        "operationId": "payment-request-delete",
        "summary": "Delete",
        "responses": {
          "200": {
            "description": "Delete a payment request."
          },
          "404": {
            "description": "Payment Request not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 404,
                  "codeDescription": "PAYMENT_REQUEST_NOT_FOUND",
                  "message": "Payment request not found"
                }
              }
            }
          }
        },
        "description": "Deletes the payment request resource by its id",
        "tags": [
          "Payment Request"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Payment request primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0e8a7f0-6d86-11ea-b77f-2e728ce88125"
          }
        ]
      },
      "patch": {
        "operationId": "payment-request-update",
        "summary": "Update",
        "responses": {
          "200": {
            "description": "Update a payment request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePaymentRequest"
                },
                "examples": {
                  "response": {
                    "value": {
                      "id": "05c693bf-c196-47ea-a28c-8251d6bb8a06",
                      "amount": 100.5,
                      "description": "Transferência",
                      "status": "CREATED",
                      "createdAt": "2023-11-06T13:03:45.689Z",
                      "updatedAt": "2023-11-06T13:03:45.689Z",
                      "callbackUrls": null,
                      "paymentUrl": "https://pay.pluggy.ai/05c693bf-c196-47ea-a28c-8251d6bb8a06"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Updates the payment request resource",
        "tags": [
          "Payment Request"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Payment request primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0f8a8c0-e8e3-11e9-b210-d663bd873d93"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePaymentRequest"
              },
              "examples": {
                "Plain parameters": {
                  "value": {
                    "amount": 100.5,
                    "description": "Transferência"
                  }
                }
              }
            }
          },
          "required": true
        }
      }
    },
    "/payments/requests/{id}/receipts": {
      "post": {
        "tags": [
          "Payment Request"
        ],
        "operationId": "payment-request-receipt-create",
        "summary": "Create",
        "description": "Creates the payment receipt resource",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success creating payment receipt",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentReceipt"
                },
                "examples": {
                  "response": {
                    "value": {
                      "id": "05c693bf-c196-47ea-a28c-8251d6bb8a06",
                      "amount": 100.5,
                      "description": "Transferência",
                      "paymentRequestId": "d0e8a7f0-6d86-11ea-b77f-2e728ce88125",
                      "receiptUrl": "https://pay.pluggy.ai/receipt/05c693bf-c196-47ea-a28c-8251d6bb8a06",
                      "creditor": {
                        "name": "Juan Gonzalez",
                        "taxNumber": "12345678900",
                        "bankAccount": {
                          "agency": "0001",
                          "account": "12345678-9",
                          "name": "Itaú"
                        },
                        "creditor": {
                          "name": "Juan Gonzalez",
                          "taxNumber": "12345678900",
                          "bankAccount": {
                            "agency": "0001",
                            "account": "12345678-9",
                            "name": "Itaú"
                          }
                        },
                        "referenceId": "12345678900",
                        "expiresAt": "2023-11-06T13:03:45.689Z",
                        "date": "2023-11-06T13:03:45.689Z"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Payment Request"
        ],
        "operationId": "payment-request-receipt-list",
        "summary": "List",
        "description": "Recovers all created payment receipts for the payment request provided",
        "responses": {
          "200": {
            "description": "Retrieve a list of all payment receipts for the payment request provided",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "page": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "total": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "totalPages": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PaymentReceipt"
                      },
                      "description": "List of payment receipts"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "page": 1,
                      "total": 1,
                      "totalPages": 1,
                      "results": [
                        {
                          "id": "05c693bf-c196-47ea-a28c-8251d6bb8a06",
                          "amount": 100.5,
                          "description": "Transferência",
                          "paymentRequestId": "d0e8a7f0-6d86-11ea-b77f-2e728ce88125",
                          "receiptUrl": "https://pay.pluggy.ai/receipt/05c693bf-c196-47ea-a28c-8251d6bb8a06",
                          "creditor": {
                            "name": "Juan Gonzalez",
                            "taxNumber": "12345678900",
                            "bankAccount": {
                              "agency": "0001",
                              "account": "12345678-9",
                              "name": "Itaú"
                            },
                            "creditor": {
                              "name": "Juan Gonzalez",
                              "taxNumber": "12345678900",
                              "bankAccount": {
                                "agency": "0001",
                                "account": "12345678-9",
                                "name": "Itaú"
                              }
                            },
                            "referenceId": "12345678900",
                            "expiresAt": "2023-11-06T13:03:45.689Z",
                            "date": "2023-11-06T13:03:45.689Z"
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "description": "Payment request primary identifier",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "example": "d0e8a7f0-6d86-11ea-b77f-2e728ce88125"
        }
      ]
    },
    "/payments/requests/{payment-request-id}/receipts/{payment-receipt-id}": {
      "get": {
        "tags": [
          "Payment Request"
        ],
        "operationId": "payment-request-receipt-retrieve",
        "summary": "Retrieve",
        "description": "Recovers the payment receipt resource by its id",
        "responses": {
          "200": {
            "description": "Retrieve a payment receipt.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentReceipt"
                },
                "examples": {
                  "response": {
                    "value": {
                      "id": "05c693bf-c196-47ea-a28c-8251d6bb8a06",
                      "amount": 100.5,
                      "description": "Transferência",
                      "paymentRequestId": "d0e8a7f0-6d86-11ea-b77f-2e728ce88125",
                      "receiptUrl": "https://pay.pluggy.ai/05c693bf-c196-47ea-a28c-8251d6bb8a06",
                      "creditor": {
                        "name": "Juan Gonzalez",
                        "taxNumber": "12345678900",
                        "bankAccount": {
                          "agency": "0001",
                          "account": "12345678-9",
                          "name": "Itaú"
                        },
                        "creditor": {
                          "name": "Juan Gonzalez",
                          "taxNumber": "12345678900",
                          "bankAccount": {
                            "agency": "0001",
                            "account": "12345678-9",
                            "name": "Itaú"
                          }
                        },
                        "referenceId": "12345678900",
                        "expiresAt": "2023-11-06T13:03:45.689Z",
                        "date": "2023-11-06T13:03:45.689Z"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "payment-request-id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "payment-receipt-id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/payments/intents": {
      "get": {
        "operationId": "payment-intents-list",
        "summary": "List",
        "description": "Recovers all created payment intents for the payment request provided",
        "responses": {
          "200": {
            "description": "Retrieve a list of all payment intents for the payment request provided",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "page": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "total": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "totalPages": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PaymentIntent"
                      },
                      "description": "List of payment intents"
                    }
                  }
                },
                "examples": {
                  "payment request": {
                    "value": {
                      "page": 1,
                      "total": 1,
                      "totalPages": 1,
                      "results": [
                        {
                          "id": "4cfe1f6d-ae71-4c35-aae0-8f8a535ffbbd",
                          "status": "CONSENT_AWAITING_AUTHORIZATION",
                          "createdAt": "2023-11-06T15:38:47.861Z",
                          "updatedAt": "2023-11-06T15:38:47.861Z",
                          "paymentRequest": {
                            "id": "c2a6b7d9-3349-435d-8341-44021449ebbc",
                            "amount": 100.5,
                            "description": "Transferência",
                            "status": "IN_PROGRESS",
                            "createdAt": "2023-11-06T13:03:45.689Z",
                            "updatedAt": "2023-11-06T15:38:47.861Z",
                            "callbackUrls": null,
                            "recipient": null,
                            "paymentUrl": "https://pay.pluggy.ai/05c693bf-c196-47ea-a28c-8251d6bb8a06"
                          },
                          "connector": {
                            "id": 603,
                            "name": "Bradesco",
                            "primaryColor": "e5173f",
                            "institutionUrl": "https://banco.bradesco/open-finance/logo/icones_vetorial-pf.svg",
                            "country": "BR",
                            "type": "PERSONAL_BANK",
                            "credentials": [
                              {
                                "validation": "^\\d{3}\\.?\\d{3}\\.?\\d{3}-?\\d{2}$",
                                "validationMessage": "CPF deve ter 11 números.",
                                "label": "CPF",
                                "name": "cpf",
                                "type": "number",
                                "placeholder": "",
                                "optional": false
                              }
                            ],
                            "imageUrl": "https://cdn.pluggy.ai/assets/connector-icons/203.svg",
                            "hasMFA": false,
                            "oauth": true,
                            "health": {
                              "status": "ONLINE",
                              "stage": null
                            },
                            "products": [
                              "ACCOUNTS",
                              "TRANSACTIONS",
                              "IDENTITY",
                              "CREDIT_CARDS",
                              "PAYMENT_DATA",
                              "LOANS",
                              "INVESTMENTS"
                            ],
                            "createdAt": "2023-07-12T20:20:17.253Z",
                            "isSandbox": false,
                            "isOpenFinance": true
                          },
                          "consentUrl": "https://consenturl.com"
                        }
                      ]
                    }
                  },
                  "bulk payment": {
                    "value": {
                      "page": 1,
                      "total": 1,
                      "totalPages": 1,
                      "results": [
                        {
                          "id": "4cfe1f6d-ae71-4c35-aae0-8f8a535ffbbd",
                          "status": "CONSENT_AWAITING_AUTHORIZATION",
                          "createdAt": "2023-11-06T15:38:47.861Z",
                          "updatedAt": "2023-11-06T15:38:47.861Z",
                          "bulkPayment": {
                            "id": "c2a6b7d9-3349-435d-8341-44021449ebbc",
                            "status": "IN_PROGRESS",
                            "createdAt": "2023-11-06T13:03:45.689Z",
                            "updatedAt": "2023-11-06T15:38:47.861Z",
                            "callbackUrls": null,
                            "paymentUrl": "https://pay.pluggy.ai/bulk/05c693bf-c196-47ea-a28c-8251d6bb8a06",
                            "paymentRequests": [
                              {
                                "id": "05c693bf-c196-47ea-a28c-8251d6bb8a06",
                                "amount": 100.5,
                                "description": "Transferência",
                                "status": "CREATED",
                                "createdAt": "2023-11-06T13:03:45.689Z",
                                "updatedAt": "2023-11-06T13:03:45.689Z",
                                "callbackUrls": null,
                                "recipient": null
                              }
                            ]
                          },
                          "connector": {
                            "id": 603,
                            "name": "Bradesco",
                            "primaryColor": "e5173f",
                            "institutionUrl": "https://banco.bradesco/open-finance/logo/icones_vetorial-pf.svg",
                            "country": "BR",
                            "type": "PERSONAL_BANK",
                            "credentials": [
                              {
                                "validation": "^\\d{3}\\.?\\d{3}\\.?\\d{3}-?\\d{2}$",
                                "validationMessage": "CPF deve ter 11 números.",
                                "label": "CPF",
                                "name": "cpf",
                                "type": "number",
                                "placeholder": "",
                                "optional": false
                              }
                            ],
                            "imageUrl": "https://cdn.pluggy.ai/assets/connector-icons/203.svg",
                            "hasMFA": false,
                            "oauth": true,
                            "health": {
                              "status": "ONLINE",
                              "stage": null
                            },
                            "products": [
                              "ACCOUNTS",
                              "TRANSACTIONS",
                              "IDENTITY",
                              "CREDIT_CARDS",
                              "PAYMENT_DATA",
                              "LOANS",
                              "INVESTMENTS"
                            ],
                            "createdAt": "2023-07-12T20:20:17.253Z",
                            "isSandbox": false,
                            "isOpenFinance": true
                          },
                          "consentUrl": "https://consenturl.com"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Payment Intent"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Payment request primary identifier",
            "in": "query",
            "name": "paymentRequestId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0e8a7f0-6d86-11ea-b77f-2e728ce88125"
          }
        ]
      },
      "post": {
        "operationId": "payment-intent-create",
        "summary": "Create",
        "responses": {
          "200": {
            "description": "Create a payment intent.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentIntent"
                }
              }
            }
          }
        },
        "description": "Creates the payment intent resource",
        "tags": [
          "Payment Intent"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePaymentIntent"
              },
              "examples": {
                "Plain parameters": {
                  "value": {
                    "paymentRequestId": "c2a6b7d9-3349-435d-8341-44021449ebbc",
                    "connectorId": 603,
                    "parameters": {
                      "cpf": "11111111111"
                    }
                  }
                }
              }
            }
          },
          "required": true
        }
      }
    },
    "/payments/intents/{id}": {
      "get": {
        "operationId": "payment-intent-retrieve",
        "summary": "Retrieve",
        "responses": {
          "200": {
            "description": "Retrieve a payment intent.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentIntent"
                },
                "examples": {
                  "response": {
                    "value": {
                      "id": "4cfe1f6d-ae71-4c35-aae0-8f8a535ffbbd",
                      "status": "CONSENT_AWAITING_AUTHORIZATION",
                      "createdAt": "2023-11-06T15:38:47.861Z",
                      "updatedAt": "2023-11-06T15:45:19.384Z",
                      "paymentRequest": {
                        "id": "c2a6b7d9-3349-435d-8341-44021449ebbc",
                        "amount": 100.5,
                        "description": "Transferência",
                        "status": "IN_PROGRESS",
                        "createdAt": "2023-11-06T13:03:45.689Z",
                        "updatedAt": "2023-11-06T15:45:19.401Z",
                        "callbackUrls": null,
                        "recipient": null,
                        "paymentUrl": "https://pay.pluggy.ai/05c693bf-c196-47ea-a28c-8251d6bb8a06"
                      },
                      "connector": {
                        "id": 603,
                        "name": "Bradesco",
                        "primaryColor": "e5173f",
                        "institutionUrl": "https://banco.bradesco/open-finance/logo/icones_vetorial-pf.svg",
                        "country": "BR",
                        "type": "PERSONAL_BANK",
                        "credentials": [
                          {
                            "validation": "^\\d{3}\\.?\\d{3}\\.?\\d{3}-?\\d{2}$",
                            "validationMessage": "CPF deve ter 11 números.",
                            "label": "CPF",
                            "name": "cpf",
                            "type": "number",
                            "placeholder": "",
                            "optional": false
                          }
                        ],
                        "imageUrl": "https://cdn.pluggy.ai/assets/connector-icons/203.svg",
                        "hasMFA": false,
                        "oauth": true,
                        "health": {
                          "status": "ONLINE",
                          "stage": null
                        },
                        "products": [
                          "ACCOUNTS",
                          "TRANSACTIONS",
                          "IDENTITY",
                          "CREDIT_CARDS",
                          "PAYMENT_DATA",
                          "LOANS",
                          "INVESTMENTS"
                        ],
                        "createdAt": "2023-07-12T20:20:17.253Z",
                        "isSandbox": false,
                        "isOpenFinance": true
                      },
                      "consentUrl": "https://consenturl.com"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Payment Intent not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 404,
                  "codeDescription": "PAYMENT_INTENT_NOT_FOUND",
                  "message": "Payment intent not found"
                }
              }
            }
          }
        },
        "description": "Recovers the payment intent resource by its id",
        "tags": [
          "Payment Intent"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Payment intent primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0e8a7f0-6d86-11ea-b77f-2e728ce88125"
          }
        ]
      }
    },
    "/payments/customers": {
      "get": {
        "operationId": "payment-customers-list",
        "summary": "List",
        "description": "Recovers all created payment customers",
        "responses": {
          "200": {
            "description": "Retrieve a list of all payment customers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "page": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "total": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "totalPages": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PaymentCustomer"
                      },
                      "description": "List of payment customers"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "page": 1,
                      "total": 1,
                      "totalPages": 1,
                      "results": [
                        {
                          "id": "05c693bf-c196-47ea-a28c-8251d6bb8a06",
                          "name": "Marco Silva",
                          "email": "msilva@pluggy.ai",
                          "createdAt": "2023-11-06T13:03:45.689Z",
                          "updatedAt": "2023-11-06T13:03:45.689Z"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Payment Customer"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Page size for the paging request, default: 20",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            },
            "example": "50"
          },
          {
            "description": "Page number for the paging request, default: 1",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            },
            "example": "1"
          }
        ]
      },
      "post": {
        "operationId": "payment-customer-create",
        "summary": "Create",
        "responses": {
          "200": {
            "description": "Create a payment customer.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentCustomer"
                }
              }
            }
          },
          "400": {
            "description": "Payment Customer its Invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 400,
                  "message": "email its not an email"
                }
              }
            }
          }
        },
        "tags": [
          "Payment Customer"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePaymentCustomerRequestBody"
              }
            }
          },
          "required": true
        }
      }
    },
    "/payments/customers/{id}": {
      "get": {
        "operationId": "payment-customer-retrieve",
        "summary": "Retrieve",
        "responses": {
          "200": {
            "description": "Retrieve a customer request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentCustomer"
                }
              }
            }
          },
          "404": {
            "description": "Payment Customer not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 404,
                  "codeDescription": "PAYMENT_CUSTOMER_NOT_FOUND",
                  "message": "Payment customer not found"
                }
              }
            }
          }
        },
        "description": "Recovers the payment customer resource by its id",
        "tags": [
          "Payment Customer"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Payment customer primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0e8a7f0-6d86-11ea-b77f-2e728ce88125"
          }
        ]
      },
      "delete": {
        "operationId": "payment-customer-delete",
        "summary": "Delete",
        "responses": {
          "200": {
            "description": "Delete a customer request."
          },
          "404": {
            "description": "Payment customer not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 404,
                  "codeDescription": "PAYMENT_CUSTOMER_NOT_FOUND",
                  "message": "Payment customer not found"
                }
              }
            }
          }
        },
        "description": "Deletes the payment customer resource by its id",
        "tags": [
          "Payment Customer"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Payment customer primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0e8a7f0-6d86-11ea-b77f-2e728ce88125"
          }
        ]
      },
      "patch": {
        "operationId": "payment-customer-update",
        "summary": "Update",
        "responses": {
          "200": {
            "description": "Update a payment customer.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentCustomer"
                }
              }
            }
          }
        },
        "description": "Updates the payment customer resource",
        "tags": [
          "Payment Customer"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Payment customer primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0f8a8c0-e8e3-11e9-b210-d663bd873d93"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrUpdatePaymentCustomer"
              }
            }
          },
          "required": true
        }
      }
    },
    "/payments/recipients": {
      "get": {
        "operationId": "payment-recipients-list",
        "summary": "List",
        "description": "Recovers all created payment recipients",
        "responses": {
          "200": {
            "description": "Retrieve a list of all payment recipients",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "page": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "total": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "totalPages": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PaymentRecipient"
                      },
                      "description": "List of payment recipients"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Payment Recipient"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Filter recipients only if its default or not",
            "in": "query",
            "name": "isDefault",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "example": "true"
          },
          {
            "description": "Page size for the paging request, default: 20",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            },
            "example": "50"
          },
          {
            "description": "Page number for the paging request, default: 1",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            },
            "example": "1"
          }
        ]
      },
      "post": {
        "operationId": "payment-recipient-create",
        "summary": "Create",
        "responses": {
          "200": {
            "description": "Create a payment recipient.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentRecipient"
                }
              }
            }
          },
          "400": {
            "description": "Payment Recipient its Invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 400,
                  "message": "taxNumber is required"
                }
              }
            }
          }
        },
        "description": "Creates the payment recipient resource",
        "tags": [
          "Payment Recipient"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePaymentRecipient"
              }
            }
          },
          "required": true
        }
      }
    },
    "/payments/recipients/{id}": {
      "get": {
        "operationId": "payment-recipient-retrieve",
        "summary": "Retrieve",
        "responses": {
          "200": {
            "description": "Retrieve a recipient.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentRecipient"
                }
              }
            }
          },
          "404": {
            "description": "Payment Recipient not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 404,
                  "codeDescription": "PAYMENT_RECIPIENT_NOT_FOUND",
                  "message": "Payment recipient not found"
                }
              }
            }
          }
        },
        "description": "Recovers the payment recipient resource by its id",
        "tags": [
          "Payment Recipient"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Payment recipient primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0e8a7f0-6d86-11ea-b77f-2e728ce88125"
          }
        ]
      },
      "patch": {
        "operationId": "payment-recipient-update",
        "summary": "Update",
        "responses": {
          "200": {
            "description": "Update a payment recipient.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentRecipient"
                }
              }
            }
          }
        },
        "description": "Updates the payment recipient resource",
        "tags": [
          "Payment Recipient"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Payment recipient primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0f8a8c0-e8e3-11e9-b210-d663bd873d93"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePaymentRecipient"
              }
            }
          },
          "required": true
        }
      },
      "delete": {
        "operationId": "payment-recipient-delete",
        "summary": "Delete",
        "responses": {
          "200": {
            "description": "Delete a recipient."
          },
          "404": {
            "description": "Payment recipient not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 404,
                  "codeDescription": "PAYMENT_RECIPIENT_NOT_FOUND",
                  "message": "Payment recipient not found"
                }
              }
            }
          }
        },
        "description": "Deletes the payment recipient resource by its id",
        "tags": [
          "Payment Recipient"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Payment recipient primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0e8a7f0-6d86-11ea-b77f-2e728ce88125"
          }
        ]
      }
    },
    "/payments/recipients/institutions": {
      "get": {
        "operationId": "payment-recipients-institution-list",
        "summary": "List Institutions",
        "description": "Recovers all created payment institutions",
        "responses": {
          "200": {
            "description": "Retrieve a list of all payment institutions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "page": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "total": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "totalPages": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PaymentInstitution"
                      },
                      "description": "List of payment institutions"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Payment Recipient"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Page size for the paging request, default: 20",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            },
            "example": "50"
          },
          {
            "description": "Page number for the paging request, default: 1",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            },
            "example": "1"
          },
          {
            "description": "Filter institutions by name",
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Itau"
          }
        ]
      }
    },
    "/payments/recipients/institutions/{id}": {
      "get": {
        "operationId": "payment-recipient-institutions-retrieve",
        "summary": "Retrieve Institution",
        "responses": {
          "200": {
            "description": "Retrieve a payment institution.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentInstitution"
                }
              }
            }
          },
          "404": {
            "description": "Payment Institution not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 404,
                  "codeDescription": "PAYMENT_INSTITUTION_NOT_FOUND",
                  "message": "Payment institution not found"
                }
              }
            }
          }
        },
        "description": "Recovers the payment institution resource by its id",
        "tags": [
          "Payment Recipient"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Payment institution primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0e8a7f0-6d86-11ea-b77f-2e728ce88125"
          }
        ]
      }
    },
    "/payments/smart-accounts": {
      "get": {
        "operationId": "smart-accounts-list",
        "summary": "List",
        "description": "Recovers all created smart accounts",
        "responses": {
          "200": {
            "description": "Retrieve a list of all smart accounts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "page": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "total": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "totalPages": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SmartAccount"
                      },
                      "description": "List of smart accounts"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "page": 1,
                      "total": 1,
                      "totalPages": 1,
                      "results": [
                        {
                          "id": "05c693bf-c196-47ea-a28c-8251d6bb8a06",
                          "agency": "001",
                          "number": "14244",
                          "verifyingDigit": "1",
                          "type": "CHECKING_ACCOUNT"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Smart account"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Page size for the paging request, default: 20",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            },
            "example": "50"
          },
          {
            "description": "Page number for the paging request, default: 1",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            },
            "example": "1"
          }
        ]
      },
      "post": {
        "operationId": "smart-account-create",
        "summary": "Create",
        "responses": {
          "200": {
            "description": "Create a smart account.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmartAccount"
                }
              }
            }
          },
          "400": {
            "description": "Smart account is Invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 400,
                  "message": "taxNumber is required"
                }
              }
            }
          }
        },
        "description": "Creates the smart account resource",
        "tags": [
          "Smart account"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSmartAccountRequest"
              }
            }
          },
          "required": true
        }
      }
    },
    "/payments/smart-accounts/{id}": {
      "get": {
        "operationId": "smart-account-retrieve",
        "summary": "Retrieve",
        "responses": {
          "200": {
            "description": "Retrieve a smart account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmartAccount"
                }
              }
            }
          },
          "404": {
            "description": "Smart account not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 404,
                  "codeDescription": "SMART_ACCOUNT_NOT_FOUND",
                  "message": "Smart account not found"
                }
              }
            }
          }
        },
        "description": "Recovers the smart account resource by its id",
        "tags": [
          "Smart account"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Smart account primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0e8a7f0-6d86-11ea-b77f-2e728ce88125"
          }
        ]
      }
    },
    "/payments/smart-accounts/{id}/balance": {
      "get": {
        "operationId": "smart-account-balance-retrieve",
        "summary": "Retrieve Balance",
        "responses": {
          "200": {
            "description": "Retrieve a smart account balance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmartAccountBalance"
                }
              }
            }
          },
          "404": {
            "description": "Smart account not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 404,
                  "codeDescription": "SMART_ACCOUNT_NOT_FOUND",
                  "message": "Smart account not found"
                }
              }
            }
          }
        },
        "description": "Recovers the smart account balance resource by its id",
        "tags": [
          "Smart account"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Smart account primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0e8a7f0-6d86-11ea-b77f-2e728ce88125"
          }
        ]
      }
    },
    "/payments/smart-accounts/{id}/transfers": {
      "post": {
        "operationId": "smart-account-transfer-create",
        "summary": "Create Transfer",
        "responses": {
          "200": {
            "description": "Create a transfer.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmartAccountTransfer"
                }
              }
            }
          },
          "400": {
            "description": "Smart account transfer is Invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 400,
                  "message": "taxNumber is required"
                }
              }
            }
          }
        },
        "description": "Creates the smart account transfer resource",
        "tags": [
          "Smart account"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Smart account primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0e8a7f0-6d86-11ea-b77f-2e728ce88125"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSmartAccountTransferRequest"
              }
            }
          },
          "required": true
        }
      }
    },
    "/payments/smart-accounts/{id}/transfers/{transfer_id}": {
      "get": {
        "operationId": "smart-account-transfer",
        "summary": "Retrieve Transfer",
        "responses": {
          "200": {
            "description": "Retrieve",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmartAccountTransfer"
                }
              }
            }
          },
          "404": {
            "description": "Smart account not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 404,
                  "codeDescription": "SMART_ACCOUNT_NOT_FOUND",
                  "message": "Smart account not found"
                }
              }
            }
          },
          "400": {
            "description": "Smart account insufficient balance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 400,
                  "codeDescription": "SMART_ACCOUNT_INSUFFICIENT_BALANCE",
                  "message": "Smart Account has insufficient balance"
                }
              }
            }
          }
        },
        "tags": [
          "Smart account"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "description": "Get a transfer from the smart account",
        "parameters": [
          {
            "description": "Smart account primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0e8a7f0-6d86-11ea-b77f-2e728ce88125"
          },
          {
            "description": "Transfer primary identifier",
            "in": "path",
            "name": "transfer_id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0e8a7f0-6d86-11ea-b77f-2e728ce88125"
          }
        ]
      }
    },
    "/payments/bulk": {
      "get": {
        "operationId": "bulk-payments-list",
        "summary": "List",
        "description": "Recovers all created bulk payments",
        "responses": {
          "200": {
            "description": "Retrieve a list of all bulk payments",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "page": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "total": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "totalPages": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/BulkPayment"
                      },
                      "description": "List of bulk payments"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "page": 1,
                      "total": 1,
                      "totalPages": 1,
                      "results": [
                        {
                          "id": "05c693bf-c196-47ea-a28c-8251d6bb8a06",
                          "status": "TOP_UP_STARTED",
                          "paymentRequests": [
                            {
                              "id": "05c693bf-c196-47ea-a28c-8251d6bb8a06",
                              "amount": 100.5,
                              "description": "Transferência",
                              "status": "IN_PROGRESS",
                              "createdAt": "2023-11-06T13:03:45.689Z",
                              "updatedAt": "2023-11-06T13:03:45.689Z"
                            }
                          ],
                          "smartAccount": {
                            "id": "05c693bf-c196-47ea-a28c-8251d6bb8a06",
                            "agency": "001",
                            "number": "14244",
                            "verifyingDigit": "1",
                            "type": "CHECKING_ACCOUNT"
                          },
                          "createdAt": "2023-11-06T13:03:45.689Z",
                          "updatedAt": "2023-11-06T13:03:45.689Z"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Bulk payment"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Page size for the paging request, default: 20",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            },
            "example": "50"
          },
          {
            "description": "Page number for the paging request, default: 1",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            },
            "example": "1"
          }
        ]
      },
      "post": {
        "operationId": "bulk-payment-create",
        "summary": "Create",
        "responses": {
          "200": {
            "description": "Create a Bulk Payment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkPayment"
                }
              }
            }
          },
          "400": {
            "description": "Bulk Payment is Invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 400,
                  "message": "smartAccountId is required"
                }
              }
            }
          }
        },
        "description": "Creates the bulk payment resource",
        "tags": [
          "Bulk payment"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBulkPayment"
              }
            }
          },
          "required": true
        }
      }
    },
    "/payments/bulk/{id}": {
      "get": {
        "operationId": "bulk-payment-retrieve",
        "summary": "Retrieve",
        "responses": {
          "200": {
            "description": "Retrieve a bulk payment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkPayment"
                }
              }
            }
          },
          "404": {
            "description": "Bulk payment not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 404,
                  "codeDescription": "BULK_PAYMENT_NOT_FOUND",
                  "message": "Bulk payment not found"
                }
              }
            }
          }
        },
        "description": "Recovers the bulk payment resource by its id",
        "tags": [
          "Bulk payment"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Bulk payment primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0e8a7f0-6d86-11ea-b77f-2e728ce88125"
          }
        ]
      }
    }
  },
  "servers": [
    {
      "url": "https://api.pluggy.ai",
      "description": "Pluggy API"
    }
  ],
  "components": {
    "requestBodies": {
      "CreateWebhook": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreateWebhook"
            }
          }
        },
        "description": "Expects the following webhooks parameters:\nevent: One of the event types that are supported.\nurl: An https url that will receive the POST of the event.\nheaders: optional key-value pairs to send with the POST of the event.",
        "required": true
      }
    },
    "securitySchemes": {
      "default": {
        "type": "apiKey",
        "name": "X-API-KEY",
        "in": "header"
      }
    },
    "schemas": {
      "BankData": {
        "description": "Bank account additional fields",
        "properties": {
          "transferNumber": {
            "type": "string",
            "description": "Complete number of the bank account `(agency code / account number)`"
          },
          "closingBalance": {
            "type": "number",
            "format": "double",
            "description": "Balance including not posted transactions"
          },
          "automaticallyInvestedBalance": {
            "type": "number",
            "format": "double",
            "description": "Balance automatically invested in the account by the FI"
          }
        },
        "type": "object"
      },
      "CreditData": {
        "description": "Credit account additional fields",
        "properties": {
          "level": {
            "type": "string",
            "description": "Card level (Black, Signature)"
          },
          "brand": {
            "type": "string",
            "description": "Card Brand (Visa, Mastercard, Elo)"
          },
          "balanceCloseDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the balance was closed"
          },
          "balanceDueDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the balance is dued"
          },
          "availableCreditLimit": {
            "type": "number",
            "format": "double",
            "description": "Credit limit available to spent"
          },
          "balanceForeignCurrency": {
            "type": "number",
            "format": "double",
            "description": "Balance in USD"
          },
          "minimumPayment": {
            "type": "number",
            "format": "double",
            "description": "Minimum payment due"
          },
          "creditLimit": {
            "type": "number",
            "format": "double",
            "description": "Maximum amount that can be spent"
          },
          "status": {
            "enum": [
              "ACTIVE",
              "BLOCKED",
              "CANCELLED"
            ],
            "type": "string",
            "description": "Credit card status"
          },
          "holderType": {
            "enum": [
              "MAIN",
              "ADDITIONAL"
            ],
            "type": "string",
            "description": "Credit card holder type"
          }
        },
        "type": "object"
      },
      "Account": {
        "description": "Account of type bank",
        "properties": {
          "id": {
            "type": "string",
            "description": "Primary account identifier",
            "example": "a658c848-e475-457b-8565-d1fffba127c4"
          },
          "type": {
            "enum": [
              "BANK",
              "CREDIT"
            ],
            "type": "string",
            "description": "Type of account, may be BANK or CREDIT",
            "example": "BANK"
          },
          "subtype": {
            "enum": [
              "SAVINGS_ACCOUNT",
              "CHECKING_ACCOUNT",
              "CREDIT_CARD"
            ],
            "type": "string",
            "description": "Subtype of corresponding type of account",
            "example": "SAVINGS_ACCOUNT"
          },
          "number": {
            "type": "string",
            "description": "External identifier of the account",
            "example": "40114687/1234"
          },
          "name": {
            "type": "string",
            "description": "Name of the account in a descriptive format",
            "example": "Conta Corrente"
          },
          "marketingName": {
            "type": "string",
            "description": "Name of the account as defined externally",
            "example": "SIGNATURE CJA. AHORRO PESOS"
          },
          "balance": {
            "type": "number",
            "format": "double",
            "description": "Funds of the account",
            "example": 120950.0
          },
          "itemId": {
            "type": "string",
            "description": "Attached item's primary identifier",
            "format": "uuid",
            "example": "a0922d6f-2007-4169-a181-b961500608db"
          },
          "taxNumber": {
            "type": "string",
            "description": "Tax ID of the corresponding owner",
            "example": "416.799.495-00"
          },
          "owner": {
            "type": "string",
            "description": "Name of the owner of the account",
            "example": "John Doe"
          },
          "currencyCode": {
            "type": "string",
            "description": "Code referencing the currency of the balance",
            "example": "BRL"
          },
          "bankData": {
            "$ref": "#/components/schemas/BankData"
          },
          "creditData": {
            "$ref": "#/components/schemas/CreditData"
          }
        },
        "type": "object",
        "required": [
          "id",
          "type",
          "subtype",
          "number",
          "name",
          "balance",
          "itemId",
          "currencyCode"
        ]
      },
      "CredentialSelectOption": {
        "description": "Option for ConnectorCredential of type select",
        "properties": {
          "value": {
            "type": "string",
            "description": "Value for the option"
          },
          "label": {
            "type": "string",
            "description": "Label for the option"
          }
        },
        "type": "object",
        "required": [
          "value",
          "label"
        ]
      },
      "ConnectorCredential": {
        "description": "Credential details for a connector",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the key"
          },
          "label": {
            "type": "string",
            "description": "Label for input"
          },
          "type": {
            "enum": [
              "text",
              "password",
              "number",
              "image",
              "select"
            ],
            "type": "string",
            "description": "Type of credential required"
          },
          "assistiveText": {
            "type": "string",
            "description": "Text to help the user when completing the input"
          },
          "data": {
            "type": "string",
            "description": "Used to return base64 images"
          },
          "placeholder": {
            "type": "string",
            "description": "Placeholder text for the input"
          },
          "validation": {
            "type": "string",
            "description": "Regex validation for the user's input"
          },
          "validationMessage": {
            "type": "string",
            "description": "Validation message when input doesn't match the regex"
          },
          "mfa": {
            "type": "boolean",
            "description": "Credential is an MFA parameter and must be refreshed on each execution"
          },
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CredentialSelectOption"
            },
            "description": "List of possible values for the input"
          }
        },
        "type": "object",
        "required": [
          "name",
          "label",
          "type"
        ]
      },
      "ConnectorUserAction": {
        "description": "User action details for an item",
        "properties": {
          "instructions": {
            "type": "string",
            "description": "Instructions related to the user action"
          },
          "attributes": {
            "type": "object",
            "description": "'{ [key]:[value] }'. Additional information related to the user action, for exampke in some device authorization flow"
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time",
            "description": "User action expiration date"
          }
        },
        "type": "object",
        "required": [
          "instructions"
        ]
      },
      "Connector": {
        "description": "Connector object",
        "properties": {
          "id": {
            "type": "number",
            "format": "integer",
            "description": "Primary identifier"
          },
          "name": {
            "type": "string",
            "description": "Name of the institution"
          },
          "institutionUrl": {
            "type": "string",
            "description": "Homepage of the institution"
          },
          "imageUrl": {
            "type": "string",
            "description": "Image of the logo hosted by Pluggy"
          },
          "primaryColor": {
            "type": "string",
            "description": "Primary color"
          },
          "type": {
            "type": "string",
            "description": "Type of institution"
          },
          "country": {
            "type": "string",
            "description": "Country located"
          },
          "credentials": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConnectorCredential"
            },
            "description": "Parameters required to start the connection"
          },
          "hasMFA": {
            "type": "boolean",
            "description": "Does the connector require an MFA to execute?"
          },
          "products": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ACCOUNTS",
                "CREDIT_CARDS",
                "TRANSACTIONS",
                "PAYMENT_DATA",
                "INVESTMENTS",
                "INVESTMENTS_TRANSACTIONS",
                "IDENTITY",
                "BROKERAGE_NOTE",
                "OPPORTUNITIES",
                "PORTFOLIO",
                "INCOME_REPORTS",
                "MOVE_SECURITY",
                "LOANS",
                "ACQUIRER_OPERATIONS"
              ]
            },
            "description": "Products supported by the connector"
          },
          "oauth": {
            "type": "boolean",
            "description": "If 'true', the connector requires an Oauth flow to execute"
          },
          "oauthUrl": {
            "type": "string",
            "description": "URL to perform Oauth flow if needed"
          },
          "resetPasswordUrl": {
            "type": "string",
            "description": "URL to the financial institution to reset the password"
          },
          "health": {
            "$ref": "#/components/schemas/ConnectorHealth"
          },
          "isOpenFinance": {
            "type": "boolean",
            "description": "Indicates if the connector uses the regulated Open Finance APIs"
          },
          "supportsPaymentInitiation": {
            "type": "boolean",
            "description": "Indicates if the connector supports the payment initiation API"
          }
        },
        "type": "object",
        "required": [
          "id"
        ],
        "example": {
          "id": 201,
          "name": "Itaú",
          "primaryColor": "EC7000",
          "institutionUrl": "https://www.itau.com.br",
          "country": "BR",
          "type": "PERSONAL_BANK",
          "credentials": [
            {
              "label": "Agência",
              "name": "agency",
              "type": "number",
              "placeholder": "Agência",
              "validation": "^\\d{4}$",
              "validationMessage": "O agencia deve ter 4 dígito"
            },
            {
              "label": "Conta",
              "name": "account",
              "type": "number",
              "placeholder": "Conta",
              "validation": "^\\d{4,6}$",
              "validationMessage": "O conta deve ter 6 dígito"
            },
            {
              "label": "Senha",
              "name": "password",
              "type": "number",
              "placeholder": "Senha",
              "validation": "^\\d{6}$",
              "validationMessage": "O senha deve ter 6 dígito"
            }
          ],
          "imageUrl": "https://res.cloudinary.com/dkr0vihmp/image/upload/v1588853552/connectors-logos/itau_ntodvn.png",
          "hasMFA": false,
          "products": [
            "ACCOUNTS",
            "TRANSACTIONS",
            "CREDIT_CARDS",
            "INVESTMENTS",
            "IDENTITY",
            "PAYMENT_DATA"
          ],
          "oauthUrl": "https://example-oauth-url.com"
        }
      },
      "ConnectorListResponse": {
        "description": "Connector List Response",
        "type": "object",
        "properties": {
          "page": {
            "type": "number",
            "format": "double",
            "description": ""
          },
          "total": {
            "type": "number",
            "format": "double",
            "description": ""
          },
          "totalPages": {
            "type": "number",
            "format": "double",
            "description": ""
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Connector"
            },
            "description": ""
          }
        },
        "example": {
          "page": 1,
          "total": 1,
          "totalPages": 1,
          "results": [
            {
              "id": 201,
              "name": "Itaú",
              "primaryColor": "EC7000",
              "institutionUrl": "https://www.itau.com.br",
              "country": "BR",
              "type": "PERSONAL_BANK",
              "credentials": [
                {
                  "label": "Agência",
                  "name": "agency",
                  "type": "number",
                  "placeholder": "Agência",
                  "validation": "^\\d{4}$",
                  "validationMessage": "O agencia deve ter 4 dígito"
                },
                {
                  "label": "Conta",
                  "name": "account",
                  "type": "number",
                  "placeholder": "Conta",
                  "validation": "^\\d{4,6}$",
                  "validationMessage": "O conta deve ter 6 dígito"
                },
                {
                  "label": "Senha",
                  "name": "password",
                  "type": "number",
                  "placeholder": "Senha",
                  "validation": "^\\d{6}$",
                  "validationMessage": "O senha deve ter 6 dígito"
                }
              ],
              "imageUrl": "https://res.cloudinary.com/dkr0vihmp/image/upload/v1588853552/connectors-logos/itau_ntodvn.png",
              "hasMFA": false,
              "products": [
                "ACCOUNTS",
                "TRANSACTIONS",
                "CREDIT_CARDS",
                "INVESTMENTS",
                "IDENTITY",
                "PAYMENT_DATA"
              ],
              "oauthUrl": "https://example-oauth-url.com",
              "health": {
                "status": "ONLINE",
                "stage": null,
                "details": {
                  "connectionRateLast6Hours": 94.3,
                  "connectionsLast6Hours": 53
                }
              }
            }
          ]
        }
      },
      "ConnectorHealth": {
        "description": "Connector health status",
        "properties": {
          "status": {
            "type": "string",
            "description": "'ONLINE' | 'OFFLINE' | 'UNSTABLE'"
          },
          "stage": {
            "type": "string"
          },
          "details": {
            "type": "object",
            "description": "Statistics about your recent connections on the connector and recent connection rate (percentage of healthy connections). This field is only present if you include the parameter healthDetails=true. This will be null if there was an error obtaining health details.",
            "properties": {
              "connectionRateLast6Hours": {
                "type": "number",
                "description": "A number from 0 to 100: the percentage of executions that succesfully connect to the institution: status of CONNECTION_ERROR,ERROR,SITE_NOT_AVAILABLE decrease the percentage. Any other status (like SUCCESS/LOGIN_ERROR) increase the percentage. The value will be null if there were no connections"
              },
              "connectionsLast6Hours": {
                "type": "number",
                "description": "Amount of your connections for this connector during the last 6 hours. 0 if there were no connections"
              }
            }
          }
        }
      },
      "Item": {
        "description": "Item object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Primary identifier"
          },
          "connector": {
            "$ref": "#/components/schemas/Connector"
          },
          "status": {
            "type": "string",
            "description": "Status of the Item"
          },
          "executionStatus": {
            "type": "string",
            "description": "Status of the sync execution"
          },
          "error": {
            "type": "object",
            "description": "Detailed error message",
            "properties": {
              "code": {
                "type": "string",
                "description": "Error code"
              },
              "message": {
                "type": "string",
                "description": "Detailed error message"
              },
              "providerMessage": {
                "type": "string",
                "description": "Information provider by the institution mainly when user needs to perform an action"
              },
              "attributes": {
                "type": "object",
                "description": "'{ [key]:[value] }'. Additional information necessary for future executions, used for example in some device authorization flow"
              }
            },
            "required": [
              "code",
              "message"
            ]
          },
          "parameter": {
            "$ref": "#/components/schemas/ConnectorCredential"
          },
          "userAction": {
            "$ref": "#/components/schemas/ConnectorUserAction"
          },
          "webhookUrl": {
            "type": "string",
            "description": "Url to be notified of item changes"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date of creation"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date of last modification"
          },
          "lastUpdatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date of last syncronization"
          },
          "statusDetail": {
            "$ref": "#/components/schemas/StatusDetail"
          },
          "nextAutoSyncAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date of next auto-sync, or null if auto-sync is disabled for this Item"
          },
          "consecutiveFailedLoginAttempts": {
            "type": "number",
            "format": "integer",
            "description": "Consecutives execution that ends up with a LOGIN_ERROR status"
          },
          "products": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ACCOUNTS",
                "CREDIT_CARDS",
                "TRANSACTIONS",
                "PAYMENT_DATA",
                "INVESTMENTS",
                "INVESTMENTS_TRANSACTIONS",
                "IDENTITY",
                "BROKERAGE_NOTE",
                "OPPORTUNITIES",
                "PORTFOLIO",
                "INCOME_REPORTS",
                "MOVE_SECURITY",
                "LOANS",
                "ACQUIRER_OPERATIONS"
              ]
            },
            "description": "Products collected by the item"
          }
        },
        "type": "object",
        "required": [
          "id",
          "status",
          "executionStatus"
        ],
        "example": {
          "id": "a5d1ca6c-24c0-41c7-8b44-9272cc868663",
          "createdAt": "2021-12-28T21:48:02.863Z",
          "updatedAt": "2021-12-28T21:48:02.952Z",
          "connector": {
            "id": 201,
            "name": "Itaú",
            "primaryColor": "EC7000",
            "institutionUrl": "https://www.itau.com.br",
            "country": "BR",
            "type": "PERSONAL_BANK",
            "credentials": [
              {
                "label": "Agência",
                "name": "agency",
                "type": "number",
                "placeholder": "Agência",
                "validation": "^\\d{4}$",
                "validationMessage": "O agencia deve ter 4 dígito"
              },
              {
                "label": "Conta",
                "name": "account",
                "type": "number",
                "placeholder": "Conta",
                "validation": "^\\d{4,6}$",
                "validationMessage": "O conta deve ter 6 dígito"
              },
              {
                "label": "Senha",
                "name": "password",
                "type": "number",
                "placeholder": "Senha",
                "validation": "^\\d{6}$",
                "validationMessage": "O senha deve ter 6 dígito"
              }
            ],
            "imageUrl": "https://res.cloudinary.com/dkr0vihmp/image/upload/v1588853552/connectors-logos/itau_ntodvn.png",
            "hasMFA": false,
            "products": [
              "ACCOUNTS",
              "TRANSACTIONS",
              "CREDIT_CARDS",
              "INVESTMENTS",
              "IDENTITY",
              "PAYMENT_DATA"
            ],
            "oauthUrl": "https://example-oauth-url.com"
          },
          "status": "UPDATING",
          "executionStatus": "CREATED",
          "lastUpdatedAt": null,
          "webhookUrl": null,
          "error": null,
          "clientUserId": "My User App Id",
          "parameter": null,
          "userAction": null,
          "statusDetail": {
            "accounts": {
              "isUpdated": true,
              "lastUpdatedAt": "2022-03-08T22:43:04.796Z",
              "warnings": []
            },
            "identity": {
              "isUpdated": false,
              "lastUpdatedAt": null,
              "warnings": []
            },
            "creditCards": {
              "isUpdated": true,
              "lastUpdatedAt": "2022-03-08T22:43:04.796Z",
              "warnings": []
            },
            "investments": {
              "isUpdated": true,
              "lastUpdatedAt": "2022-03-08T22:43:04.796Z",
              "warnings": [
                {
                  "code": "001",
                  "message": "You lack permissions to view Investments on this account",
                  "providerMessage": "Meu perfil não permite visualizar investimentos"
                }
              ]
            },
            "transactions": {
              "isUpdated": true,
              "lastUpdatedAt": "2022-03-08T22:43:04.796Z",
              "warnings": []
            },
            "paymentData": null
          },
          "nextAutoSyncAt": null,
          "consecutiveFailedLoginAttempts": 0,
          "products": [
            "ACCOUNTS",
            "TRANSACTIONS",
            "CREDIT_CARDS",
            "INVESTMENTS",
            "IDENTITY",
            "PAYMENT_DATA"
          ]
        }
      },
      "CreateItem": {
        "description": "Create Item Request",
        "properties": {
          "connectorId": {
            "type": "number",
            "description": "Primary identifier of the connector"
          },
          "parameters": {
            "oneOf": [
              {
                "type": "object"
              },
              {
                "type": "string"
              }
            ],
            "properties": {},
            "description": "Connector's credentials that are required to execute on a Key-Value object or a string if they are encrypted",
            "additionalProperties": {
              "type": "string"
            }
          },
          "webhookUrl": {
            "type": "string",
            "format": "uri",
            "description": "Url to be notified of item changes"
          },
          "clientUserId": {
            "type": "string",
            "description": "Client's identifier for the user, it can be a ID, UUID or even an email."
          },
          "products": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ACCOUNTS",
                "CREDIT_CARDS",
                "TRANSACTIONS",
                "PAYMENT_DATA",
                "INVESTMENTS",
                "INVESTMENTS_TRANSACTIONS",
                "IDENTITY",
                "BROKERAGE_NOTE",
                "OPPORTUNITIES",
                "PORTFOLIO",
                "INCOME_REPORTS",
                "MOVE_SECURITY",
                "LOANS",
                "ACQUIRER_OPERATIONS"
              ]
            },
            "description": "Products to be collected in the connection"
          }
        },
        "type": "object",
        "required": [
          "connectorId",
          "parameters"
        ],
        "example": {
          "connectorId": 2,
          "parameters": {
            "user": "user-ok",
            "password": "password-ok"
          },
          "webhookUrl": "https://example.com/webhook"
        }
      },
      "UpdateItem": {
        "description": "Update Item Request",
        "properties": {
          "parameters": {
            "oneOf": [
              {
                "type": "object"
              },
              {
                "type": "string"
              }
            ],
            "properties": {},
            "description": "Parameters to update on the item stored credentials.",
            "additionalProperties": {
              "type": "string"
            }
          },
          "clientUserId": {
            "type": "string",
            "description": "Client's identifier for the user, it can be a ID, UUID or even an email."
          },
          "webhookUrl": {
            "type": "string",
            "format": "uri",
            "description": "Url to be notified of item changes"
          },
          "products": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ACCOUNTS",
                "CREDIT_CARDS",
                "TRANSACTIONS",
                "PAYMENT_DATA",
                "INVESTMENTS",
                "INVESTMENTS_TRANSACTIONS",
                "IDENTITY",
                "BROKERAGE_NOTE",
                "OPPORTUNITIES",
                "PORTFOLIO",
                "INCOME_REPORTS",
                "MOVE_SECURITY",
                "LOANS",
                "ACQUIRER_OPERATIONS"
              ]
            },
            "description": "Products to be collected in the connection"
          }
        },
        "type": "object",
        "example": {
          "webhookUrl": "https://example.com/webhook",
          "clientUserId": "My User App Id",
          "parameters": {
            "user": "user-ok",
            "password": "password-ok"
          }
        }
      },
      "StatusDetail": {
        "description": "Detailed status of the item. This field will be present when the status is PARTIAL_SUCCESS or when a product in the item has warnings",
        "type": "object",
        "properties": {
          "accounts": {
            "$ref": "#/components/schemas/StatusDetailProduct"
          },
          "creditCards": {
            "$ref": "#/components/schemas/StatusDetailProduct"
          },
          "transactions": {
            "$ref": "#/components/schemas/StatusDetailProduct"
          },
          "investments": {
            "$ref": "#/components/schemas/StatusDetailProduct"
          },
          "identity": {
            "$ref": "#/components/schemas/StatusDetailProduct"
          },
          "investmentTransactions": {
            "$ref": "#/components/schemas/StatusDetailProduct"
          },
          "paymentData": {
            "$ref": "#/components/schemas/StatusDetailProduct"
          },
          "incomeReports": {
            "$ref": "#/components/schemas/StatusDetailProduct"
          },
          "loans": {
            "$ref": "#/components/schemas/StatusDetailProduct"
          },
          "portfolio": {
            "$ref": "#/components/schemas/StatusDetailProduct"
          },
          "opportunities": {
            "$ref": "#/components/schemas/StatusDetailProduct"
          }
        },
        "example": {
          "accounts": {
            "isUpdated": true,
            "lastUpdatedAt": "2022-03-08T22:43:04.796Z"
          },
          "identity": {
            "isUpdated": false,
            "lastUpdatedAt": null
          },
          "creditCards": {
            "isUpdated": true,
            "lastUpdatedAt": "2022-03-08T22:43:04.796Z"
          },
          "investments": {
            "isUpdated": true,
            "lastUpdatedAt": "2022-03-08T22:43:04.796Z"
          },
          "transactions": {
            "isUpdated": true,
            "lastUpdatedAt": "2022-03-08T22:43:04.796Z"
          },
          "paymentData": null
        }
      },
      "StatusDetailProduct": {
        "description": "Detailed status of the product",
        "type": "object",
        "properties": {
          "lastUpdatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the product was last updated"
          },
          "isUpdated": {
            "type": "boolean",
            "description": "Product was updated in the last execution"
          },
          "warnings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StatusDetailProductWarning"
            },
            "description": "Warnings about the product data. For example, a warning about missing permissions for viewing a product"
          }
        },
        "example": {
          "isUpdated": true,
          "lastUpdatedAt": "2022-03-08T22:43:04.796Z"
        }
      },
      "StatusDetailProductWarning": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The warning code generated by Pluggy"
          },
          "message": {
            "type": "string",
            "description": "The warning message in english generated by Pluggy"
          },
          "providerMessage": {
            "type": "string",
            "description": "The warning message from the FI if provided"
          }
        },
        "required": [
          "code",
          "message"
        ]
      },
      "ICountResponse": {
        "description": "Deletion response",
        "properties": {
          "count": {
            "type": "number",
            "description": "Amount of items deleted"
          }
        },
        "type": "object",
        "required": [
          "count"
        ],
        "example": {
          "count": 1
        }
      },
      "Webhook": {
        "description": "",
        "properties": {
          "id": {
            "type": "string",
            "description": "UUID identifier for the entity"
          },
          "url": {
            "type": "string",
            "description": "Url to be notified of item changes"
          },
          "event": {
            "enum": [
              "all",
              "item/created",
              "item/updated",
              "item/error",
              "item/deleted",
              "item/waiting_user_input",
              "item/waiting_user_action",
              "item/login_succeeded",
              "connector/status_updated"
            ],
            "type": "string",
            "description": ""
          },
          "disabledAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the webhook was disabled"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when it was created"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date of the last update"
          }
        },
        "type": "object",
        "required": [
          "id",
          "url",
          "event"
        ]
      },
      "CreateWebhook": {
        "description": "",
        "properties": {
          "url": {
            "type": "string",
            "description": ""
          },
          "event": {
            "enum": [
              "all",
              "item/created",
              "item/updated",
              "item/error",
              "item/deleted",
              "item/waiting_user_input",
              "item/waiting_user_action",
              "item/login_succeeded",
              "connector/status_updated",
              "transactions/deleted",
              "payment_intent/created",
              "payment_intent/completed",
              "payment_intent/waiting_payer_authorization",
              "payment_intent/error"
            ],
            "type": "string",
            "description": ""
          },
          "headers": {
            "type": "object",
            "description": "HTTP headers that will be included in the webhook notifications (useful for things like authorization)"
          }
        },
        "type": "object",
        "required": [
          "url",
          "event"
        ]
      },
      "ParameterValidationError": {
        "description": "",
        "properties": {
          "code": {
            "type": "string",
            "description": ""
          },
          "message": {
            "type": "string",
            "description": ""
          },
          "parameter": {
            "type": "string",
            "description": ""
          }
        },
        "type": "object",
        "required": [
          "code",
          "message",
          "parameter"
        ]
      },
      "ItemParameter": {
        "description": "Key-Value credentials neccesary to create an item",
        "properties": {},
        "additionalProperties": {
          "type": "string"
        },
        "type": "object",
        "example": {
          "user": "my-user",
          "password": "my-password"
        }
      },
      "PaymentIntentParameter": {
        "description": "Credentials neccesary to create a payment intent",
        "properties": {
          "cpf": {
            "type": "string",
            "description": "CPF of the payer"
          },
          "cnpj": {
            "type": "string",
            "description": "CNPJ of the payer"
          }
        },
        "type": "object",
        "example": {
          "cpf": "416.799.495-00",
          "cnpj": "41.679.495/0001-00"
        },
        "required": [
          "cpf"
        ]
      },
      "ParameterValidationResponse": {
        "description": "Response to parameter's validations",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ParameterValidationError"
            },
            "description": ""
          },
          "parameters": {
            "$ref": "#/components/schemas/ItemParameter"
          }
        },
        "type": "object",
        "example": {
          "parameters": {
            "user": "my-user",
            "password": "1234"
          },
          "errors": [
            {
              "code": "002",
              "message": "A senha deve ter pelo menos 6 dígitos.",
              "parameter": "password",
              "data": {
                "min": 6
              }
            }
          ]
        }
      },
      "Document": {
        "description": "Document object containing type & value",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of document",
            "example": "CPF",
            "enum": [
              "CPF",
              "CNPJ"
            ]
          },
          "value": {
            "type": "string",
            "description": "Formatted value of the document",
            "example": "416.799.495-00"
          }
        },
        "type": "object"
      },
      "PaymentDataParticipant": {
        "description": "Participant of the payment data",
        "properties": {
          "documentNumber": {
            "$ref": "#/components/schemas/Document"
          },
          "name": {
            "type": "string",
            "description": "Fullname of the participant"
          },
          "accountNumber": {
            "type": "string",
            "description": "Account number on the branch"
          },
          "branchNumber": {
            "type": "string",
            "description": "Agency number"
          },
          "routingNumber": {
            "type": "string",
            "description": "COMPE Bank number"
          },
          "routingNumberISPB": {
            "type": "string",
            "description": "ISPB Bank number"
          }
        },
        "type": "object"
      },
      "PaymentData": {
        "description": "Payment or Transfer participant's data",
        "properties": {
          "payer": {
            "$ref": "#/components/schemas/PaymentDataParticipant"
          },
          "receiver": {
            "$ref": "#/components/schemas/PaymentDataParticipant"
          },
          "reason": {
            "type": "string",
            "description": "User's motive submitted while making the transfer"
          },
          "referenceNumber": {
            "type": "string",
            "description": "Reference number for the transfer/payment"
          },
          "receiverReferenceId": {
            "type": "string",
            "description": "String submitted by the receiver associated with the payment when generating the payment request."
          },
          "paymentMethod": {
            "type": "string",
            "description": "Type of transfer. TED, DOC, PIX or TEV"
          }
        },
        "type": "object"
      },
      "AcquirerData": {
        "description": "Data of a transaction specific to institutions of type PAYMENT_ACCOUNT (acquiring banks)",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of acquiring bank transaction",
            "enum": [
              "SALE",
              "RECEIVABLE",
              "ANTICIPATION",
              "CHARGEBACK"
            ]
          },
          "saleData": {
            "$ref": "#/components/schemas/AcquirerSaleData"
          },
          "receivableData": {
            "$ref": "#/components/schemas/AcquirerReceivableData"
          },
          "anticipationData": {
            "$ref": "#/components/schemas/AcquirerAnticipationData"
          }
        },
        "type": "object"
      },
      "AcquirerSaleData": {
        "type": "object",
        "required": [
          "nsu"
        ],
        "properties": {
          "nsu": {
            "type": "string",
            "description": "Tax id of the transaction"
          },
          "authorizationCode": {
            "type": "string",
            "description": "Code generated by the card issuer to authorize the sale"
          },
          "paymentMethod": {
            "type": "string",
            "enum": [
              "CARD",
              "PIX"
            ]
          },
          "netAmount": {
            "type": "number",
            "description": "The total net amount of the sale"
          },
          "mdrFee": {
            "type": "number",
            "description": "Merchant discount rate percentage"
          },
          "mdrFeeAmount": {
            "type": "number",
            "description": "Merchant discount rate ampount"
          },
          "status": {
            "type": "string",
            "enum": [
              "APPROVED",
              "CANCELLED"
            ]
          },
          "installmentCount": {
            "type": "number",
            "description": "Number of installments of the sale"
          },
          "installments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AcquirerSaleInstallment"
            }
          },
          "cardFlag": {
            "type": "string",
            "description": "Flag of the card used"
          },
          "cardNumber": {
            "type": "string",
            "description": "Masked number of the card used"
          },
          "cardFundingSource": {
            "type": "string",
            "enum": [
              "CREDIT",
              "DEBIT"
            ]
          },
          "terminalId": {
            "type": "string",
            "description": "Id of the terminal (posnet) used for the sale"
          }
        }
      },
      "AcquirerSaleInstallment": {
        "type": "object",
        "required": [
          "nsu"
        ],
        "properties": {
          "number": {
            "type": "number",
            "description": "Ordinal number of the installment"
          },
          "netAmount": {
            "type": "number",
            "description": "Amount of the installment, with taxes applied"
          },
          "receiptDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the installment was received"
          }
        }
      },
      "AcquirerReceivableData": {
        "type": "object",
        "properties": {
          "settlementStatus": {
            "type": "string",
            "enum": [
              "SENT",
              "PAID",
              "REJECTED",
              "EXPECTED",
              "OTHER"
            ]
          },
          "cardFlag": {
            "type": "string"
          },
          "establishment": {
            "type": "object",
            "properties": {
              "companyCode": {
                "type": "string",
                "description": "CNPJ of the company that receives the payment"
              },
              "companyName": {
                "type": "string",
                "description": "Name of the company that receives the payment"
              },
              "receivingBank": {
                "type": "string",
                "description": "Bank of the receiving account"
              },
              "agency": {
                "type": "string",
                "description": "Agency number of the receiving account"
              },
              "account": {
                "type": "string",
                "description": "Account number of the receiving account (with check digit)"
              }
            }
          },
          "netAmount": {
            "type": "number",
            "description": "Net amount of the receivable"
          }
        }
      },
      "AcquirerAnticipationData": {
        "type": "object",
        "required": [
          "status",
          "netAmount",
          "fee",
          "feeAmount"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SIMULATED",
              "REQUESTED",
              "APPROVED",
              "CANCELLED",
              "IN_ANALYSIS"
            ]
          },
          "netAmount": {
            "type": "number",
            "description": "Net amount of the anticipation"
          },
          "fee": {
            "type": "number",
            "description": "Percentage of monthly fee (e.g 1.5 = 1.5%)"
          },
          "feeAmount": {
            "type": "number",
            "description": "Fee amount"
          }
        }
      },
      "Merchant": {
        "description": "Merchant extracted from the transaction data",
        "properties": {
          "name": {
            "type": "string",
            "description": "Merchants name"
          },
          "businessName": {
            "type": "string",
            "description": "Merchant legal business name"
          },
          "cnpj": {
            "type": "string",
            "description": "Document number related to the merchant"
          },
          "cnae": {
            "type": "string",
            "description": "Economic activity classification number related to the merchant"
          },
          "category": {
            "type": "string",
            "description": "Merchant associated category"
          }
        },
        "type": "object"
      },
      "CreditCardMetadata": {
        "description": "Data of a transaction specific to credit card transactions",
        "properties": {
          "installmentNumber": {
            "type": "number",
            "description": "Number of the current installment of the purchase"
          },
          "totalInstallments": {
            "type": "number",
            "description": "Total number of installments of the purchase"
          },
          "totalAmount": {
            "type": "number",
            "description": "Total amount of the purchase"
          },
          "purchaseDate": {
            "type": "string",
            "format": "date-time",
            "description": "Original Date of the purchase"
          },
          "payeeMCC": {
            "type": "string",
            "description": "Merchant Category Code of the merchant"
          },
          "cardNumber": {
            "type": "string",
            "description": "Credit Card Number associated with transaction, can be different from the account if its done by an additional or virtual card."
          },
          "billId": {
            "type": "string",
            "description": "Id of the bill associated to this transaction"
          }
        },
        "type": "object"
      },
      "Transaction": {
        "description": "Transaction product",
        "properties": {
          "id": {
            "type": "string",
            "description": "Primary identifier of the transaction"
          },
          "description": {
            "type": "string",
            "description": "Clean description of the transaction"
          },
          "currencyCode": {
            "type": "string",
            "description": "Currency ISO code"
          },
          "amount": {
            "type": "number",
            "format": "double",
            "description": "Transaction amount"
          },
          "amountInAccountCurrency": {
            "type": "number",
            "format": "double",
            "description": "Transaction amount in Account's Currency. Only present if the transaction is in a different currency than the account's currency"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the transaction was made"
          },
          "type": {
            "type": "string",
            "description": "Type of the transaction. DEBIT (outflow) or CREDIT (inflow)",
            "enum": [
              "DEBIT",
              "CREDIT"
            ]
          },
          "balance": {
            "type": "number",
            "format": "double",
            "description": "Balance after the transaction"
          },
          "providerCode": {
            "type": "string",
            "description": "Institution provided code"
          },
          "status": {
            "type": "string",
            "description": "Status of the movement. POSTED / PENDING"
          },
          "category": {
            "type": "string",
            "description": "Category of the transaction (e.g. Restaurants, Education). See the Transaction Categorization section in our guides."
          },
          "categoryId": {
            "type": "string",
            "description": "Id of the transaction category. Can be used to identify the category in the Categories endpoint"
          },
          "paymentData": {
            "$ref": "#/components/schemas/PaymentData"
          },
          "acquirerData": {
            "$ref": "#/components/schemas/AcquirerData"
          },
          "creditCardMetadata": {
            "$ref": "#/components/schemas/CreditCardMetadata"
          },
          "merchant": {
            "$ref": "#/components/schemas/Merchant"
          }
        },
        "type": "object",
        "required": [
          "id",
          "description",
          "currencyCode",
          "amount",
          "date"
        ],
        "example": {
          "id": "6ec156fe-e8ac-4d9a-a4b3-7770529ab01c",
          "description": "TED Example",
          "descriptionRaw": null,
          "currencyCode": "BRL",
          "amount": 1500,
          "date": "2020-10-14T00:00:00.000Z",
          "balance": 3500,
          "category": "Transfers",
          "categoryId": "05000000",
          "accountId": "03cc0eff-4ec5-495c-adb3-1ef9611624fc",
          "providerCode": "123456",
          "type": "CREDIT",
          "status": "POSTED",
          "paymentData": {
            "payer": {
              "name": "Tiago Rodrigues Santos",
              "branchNumber": "090",
              "accountNumber": "1234-5",
              "routingNumber": "001",
              "documentNumber": {
                "type": "CPF",
                "value": "882.937.076-23"
              }
            },
            "reason": "Taxa de serviço",
            "receiver": {
              "name": "Pluggy",
              "branchNumber": "999",
              "accountNumber": "9876-1",
              "routingNumber": "002",
              "documentNumber": {
                "type": "CNPJ",
                "value": "08.050.608/0001-32"
              }
            },
            "paymentMethod": "TED",
            "referenceNumber": "123456789"
          },
          "merchant": null
        }
      },
      "PageResponseTransactions": {
        "description": "",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Transaction"
            },
            "description": ""
          },
          "page": {
            "type": "number",
            "format": "double",
            "description": ""
          },
          "total": {
            "type": "number",
            "format": "double",
            "description": ""
          },
          "totalPages": {
            "type": "number",
            "format": "double",
            "description": ""
          }
        },
        "type": "object",
        "required": [
          "results",
          "page",
          "total",
          "totalPages"
        ]
      },
      "UpdateTransaction": {
        "description": "Update transaction category request body",
        "properties": {
          "categoryId": {
            "type": "string",
            "description": "Identifier of the category"
          }
        },
        "type": "object",
        "required": [
          "categoryId"
        ],
        "example": {
          "categoryId": "07010000"
        }
      },
      "Category": {
        "description": "Cateogry response",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier for the category"
          },
          "description": {
            "type": "string",
            "description": "Description of the category"
          },
          "descriptionTranslated": {
            "type": "string",
            "description": "Description of the category, translated to portuguese"
          },
          "parentId": {
            "type": "string",
            "description": "Parent's identifier"
          },
          "parentDescription": {
            "type": "string",
            "description": "Parent's category description"
          }
        },
        "type": "object",
        "required": [
          "id",
          "description"
        ],
        "example": {
          "id": "01010000",
          "description": "Salary/pro-labore",
          "parentId": "01000000",
          "parentDescription": "Income"
        }
      },
      "ClientCategoryRule": {
        "description": "Category rule by client id",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the transaction rule."
          },
          "categoryId": {
            "type": "string",
            "description": "Identifier of the category"
          },
          "category": {
            "type": "string",
            "description": "Description of the category"
          },
          "clientId": {
            "type": "string",
            "description": "Identifier of the client"
          }
        },
        "type": "object",
        "required": [
          "description",
          "category"
        ],
        "example": {
          "description": "uber payment",
          "category": "Salary/pro-labore",
          "categoryId": "05000000"
        }
      },
      "CreateClientCategoryRule": {
        "description": "Create client category rule",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the transaction rule."
          },
          "categoryId": {
            "type": "string",
            "description": "Identifier of the category"
          },
          "clientId": {
            "type": "string",
            "description": "Identifier of the client"
          }
        },
        "type": "object",
        "required": [
          "description",
          "categoryId",
          "clientId"
        ],
        "example": {
          "description": "uber payment",
          "categoryId": "05000000"
        }
      },
      "InvestmentExpenses": {
        "description": "Taxes and fees that applied to the transaction",
        "properties": {
          "serviceTax": {
            "type": "number",
            "format": "double",
            "description": "(ISS) Service tax that varies according to state"
          },
          "brokerageFee": {
            "type": "number",
            "format": "double",
            "description": "Commission charged by the brokerage for carrying out transactions on the stock market"
          },
          "incomeTax": {
            "type": "number",
            "format": "double",
            "description": "(IRRF) Income Tax Withholding, amount paid to the Internal Revenue Service"
          },
          "tradingAssetsNoticeFee": {
            "type": "number",
            "format": "double",
            "description": "(ANA) Fee of Notice of Trading in Assets"
          },
          "maintenanceFee": {
            "type": "number",
            "format": "double",
            "description": "(termo/opções) Fees charged by BM&F Bovespa in negotiations"
          },
          "settlementFee": {
            "type": "number",
            "format": "double",
            "description": "Liquidation fee for the settlement of a position on the expiration date or the financial settlement of physical delivery"
          },
          "clearingFee": {
            "type": "number",
            "format": "double",
            "description": "Registration fee"
          },
          "stockExchangeFee": {
            "type": "number",
            "format": "double",
            "description": "(Emolumentos) Fees charged by BM&F Bovespa as a source of operating income"
          },
          "custodyFee": {
            "type": "number",
            "format": "double",
            "description": "Fee by brokers to keep recordsin their home broker systems or on the trading desk"
          },
          "operatingFee": {
            "type": "number",
            "format": "double",
            "description": "Amount paid to the Operator for the intermediation service"
          },
          "other": {
            "type": "number",
            "format": "double",
            "description": "Sum of other not defined expenses"
          }
        },
        "type": "object"
      },
      "InvestmentTransaction": {
        "description": "Movement of the investment",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of transactions",
            "enum": [
              "BUY",
              "SELL",
              "TAX",
              "TRANSFER"
            ]
          },
          "movementType": {
            "type": "string",
            "description": "Type of movement of the transaction",
            "enum": [
              "CREDIT",
              "DEBIT"
            ]
          },
          "quantity": {
            "type": "number",
            "format": "double",
            "description": "Quantity of the transaction"
          },
          "value": {
            "type": "number",
            "format": "double",
            "description": "Value on the transaction's Date"
          },
          "amount": {
            "type": "number",
            "format": "double",
            "description": "Gross amount of the operation. May be null only if type is TRANSFER"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the transaction was made"
          },
          "tradeDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the transaction was confirmed"
          },
          "expenses": {
            "$ref": "#/components/schemas/InvestmentExpenses"
          }
        },
        "type": "object",
        "required": [
          "type",
          "date"
        ]
      },
      "PageResponseInvestmentTransactions": {
        "description": "",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvestmentTransaction"
            },
            "description": ""
          },
          "page": {
            "type": "number",
            "format": "double",
            "description": ""
          },
          "total": {
            "type": "number",
            "format": "double",
            "description": ""
          },
          "totalPages": {
            "type": "number",
            "format": "double",
            "description": ""
          }
        },
        "type": "object",
        "required": [
          "results",
          "page",
          "total",
          "totalPages"
        ]
      },
      "PageResponseCategoryRules": {
        "description": "",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClientCategoryRule"
            },
            "description": ""
          },
          "page": {
            "type": "number",
            "format": "double",
            "description": ""
          },
          "total": {
            "type": "number",
            "format": "double",
            "description": ""
          },
          "totalPages": {
            "type": "number",
            "format": "double",
            "description": ""
          }
        },
        "type": "object",
        "required": [
          "results",
          "page",
          "total",
          "totalPages"
        ]
      },
      "InvestmentMetadata": {
        "description": "Investment metadata for Previdencia migrations",
        "properties": {
          "taxRegime": {
            "type": "string",
            "description": "Description of the type of tax applied to previdencia"
          },
          "proposalNumber": {
            "type": "string",
            "description": "Previdencial proposal number"
          },
          "processNumber": {
            "type": "string",
            "description": "Number of the process of a previdencia"
          },
          "fundName": {
            "type": "string",
            "description": "Name of the fund associated with the previdencia."
          },
          "insurer": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Company"
              }
            ],
            "description": "Insurer of the Security Investment"
          }
        },
        "type": "object"
      },
      "Company": {
        "description": "Company object that holds the company's information",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the company"
          },
          "cnpj": {
            "type": "string",
            "description": "CNPJ of the company"
          }
        },
        "type": "object"
      },
      "Investment": {
        "description": "Investment representing a specific asset",
        "properties": {
          "id": {
            "type": "string",
            "description": "Primary identifier"
          },
          "itemId": {
            "type": "string",
            "description": "Identifier of the item linked to the investment",
            "format": "uuid"
          },
          "type": {
            "enum": [
              "COE",
              "EQUITY",
              "ETF",
              "FIXED_INCOME",
              "MUTUAL_FUND",
              "SECURITY",
              "OTHER"
            ],
            "type": "string",
            "description": "Investment Asset type"
          },
          "subtype": {
            "enum": [
              "STRUCTURED_NOTE",
              "STOCK",
              "ETF",
              "REAL_ESTATE_FUND",
              "BDR",
              "DERIVATIVES",
              "OPTION",
              "TREASURY",
              "LCI",
              "LCA",
              "LF",
              "CDB",
              "CRI",
              "CRA",
              "CORPORATE_DEBT",
              "LC",
              "DEBENTURES",
              "INVESTMENT_FUND",
              "MULTIMARKET_FUND",
              "FIXED_INCOME_FUND",
              "STOCK_FUND",
              "ETF_FUND",
              "OFFSHORE_FUND",
              "FIP_FUND",
              "EXCHANGE_FUND",
              "RETIREMENT",
              "OTHER"
            ],
            "type": "string",
            "description": "Investment subtype, depends on the type"
          },
          "number": {
            "type": "string",
            "description": "Reference number for this holder's asset"
          },
          "balance": {
            "type": "number",
            "format": "double",
            "description": "The current net balance amount of the investment"
          },
          "name": {
            "type": "string",
            "description": "Name on the provider"
          },
          "lastMonthRate": {
            "type": "number",
            "format": "double",
            "description": "The performance rate of the investment in the last month"
          },
          "lastTwelveMonthsRate": {
            "type": "number",
            "format": "double",
            "description": "The performance rate of the investment in the last 12 months"
          },
          "annualRate": {
            "type": "number",
            "format": "double",
            "description": "The performance rate of the investment in the last year"
          },
          "currencyCode": {
            "type": "string",
            "description": "Currency ISO code for the amounts"
          },
          "code": {
            "type": "string",
            "description": "Associated Code for the investment. For example, the code for a mutual fund is the CNPJ"
          },
          "isin": {
            "type": "string",
            "description": "12-character ISIN, a globally unique identifier"
          },
          "value": {
            "type": "number",
            "format": "double",
            "description": "Quota's current value at \"date\""
          },
          "quantity": {
            "type": "number",
            "format": "double",
            "description": "Quantity of quota at disposal"
          },
          "amount": {
            "type": "number",
            "format": "double",
            "description": "Gross amount of the investment"
          },
          "taxes": {
            "type": "number",
            "format": "double",
            "description": "Income taxes applied to the investment"
          },
          "taxes2": {
            "type": "number",
            "format": "double",
            "description": "Financial taxes applied to the investment"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "description": "Value's quota date"
          },
          "owner": {
            "type": "string",
            "description": "Owner/beneficiary associated with the investment"
          },
          "amountProfit": {
            "type": "number",
            "format": "double",
            "description": "Profit/Loss to date over the investment"
          },
          "amountWithdrawal": {
            "type": "number",
            "format": "double",
            "description": "The amount available to withdraw"
          },
          "amountOriginal": {
            "type": "number",
            "format": "double",
            "description": "Amount originally invested"
          },
          "metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InvestmentMetadata"
              }
            ],
            "description": "Security Portability details"
          },
          "transactions": {
            "type": "array",
            "deprecated": true,
            "items": {
              "$ref": "#/components/schemas/InvestmentTransaction"
            },
            "description": "(DEPRECATED: this field will be removed for new applications created from 21st March 2023 onward. Use the paginated `GET /investment/{id}/transactions` endpoint instead.) Transactions made on the investment (Buy, Sell, Transfer, Tax)"
          },
          "dueDate": {
            "type": "string",
            "format": "date-time",
            "description": "Expiration Date"
          },
          "issuer": {
            "type": "string",
            "description": "The entity that issued the investment"
          },
          "issuerCNPJ": {
            "type": "string",
            "description": "The entity CNPJ that issued the investment"
          },
          "issueDate": {
            "type": "string",
            "format": "date-time",
            "description": "The date that the investment was issued"
          },
          "rate": {
            "type": "number",
            "format": "double",
            "description": "Fixed rate percentage applied to the investment"
          },
          "rateType": {
            "type": "string",
            "description": "Type of fixed-rate"
          },
          "fixedAnnualRate": {
            "type": "number",
            "format": "double",
            "description": "Fixed income annual rate"
          },
          "status": {
            "type": "string",
            "description": "Current status of the investment enum value",
            "enum": [
              "ACTIVE",
              "PENDING",
              "TOTAL_WITHDRAWAL"
            ]
          }
        },
        "type": "object",
        "required": [
          "id",
          "itemId",
          "type",
          "balance",
          "name",
          "currencyCode",
          "date"
        ],
        "example": {
          "id": "f77eccf4-7714-498e-92a9-1bebe70335d9",
          "code": "12.345.678/0001-00",
          "name": "Bahia AM Advisory FIC de FIM",
          "balance": 1359.39,
          "currencyCode": "BRL",
          "type": "MUTUAL_FUND",
          "subtype": "MULTIMARKET_FUND",
          "lastMonthRate": 0.24,
          "annualRate": 3.24,
          "lastTwelveMonthsRate": 3,
          "itemId": "207f5bcd-312a-439c-abbe-166b6632c980",
          "value": 500,
          "quantity": 3,
          "amount": 1500,
          "taxes": 40.61,
          "taxes2": 100,
          "date": "2020-07-19T18:27:41.802Z",
          "owner": "John Doe",
          "number": null,
          "amountProfit": 310.5,
          "amountWithdrawal": 1310.5,
          "amountOriginal": 1000,
          "status": "ACTIVE",
          "transactions": [
            {
              "tradeDate": "2020-10-01T00:00:00.000Z",
              "date": "2020-10-01T00:00:00.000Z",
              "description": "Aplicação Fondo de Investimento Premium",
              "quantity": 1.25,
              "value": 2,
              "amount": 5,
              "type": "BUY",
              "movementType": "CREDIT"
            }
          ]
        }
      },
      "PhoneNumber": {
        "description": "The phone number object contains data related to contact information.",
        "properties": {
          "type": {
            "enum": [
              "Personal",
              "Work",
              "Residencial"
            ],
            "type": "string",
            "description": "Type of phone number: personal, work or residencial"
          },
          "value": {
            "type": "string",
            "description": "The complete phone number"
          }
        },
        "type": "object",
        "required": [
          "value"
        ]
      },
      "Email": {
        "description": "The email object contains emails associated with the owner of the account",
        "properties": {
          "type": {
            "enum": [
              "Personal",
              "Work"
            ],
            "type": "string",
            "description": ""
          },
          "value": {
            "type": "string",
            "description": "The full email of the person."
          }
        },
        "type": "object",
        "required": [
          "value"
        ]
      },
      "Address": {
        "description": "The address object contains data related to an specific owner's location.",
        "properties": {
          "fullAddress": {
            "type": "string",
            "description": "Full address using all components available"
          },
          "primaryAddress": {
            "type": "string",
            "description": "Primary address, stret name and street number"
          },
          "city": {
            "type": "string",
            "description": "The complete city name"
          },
          "postalCode": {
            "type": "string",
            "description": "The Zip code"
          },
          "state": {
            "type": "string",
            "description": "The state or province"
          },
          "country": {
            "type": "string",
            "description": "The complete country name"
          },
          "type": {
            "enum": [
              "Personal",
              "Work"
            ],
            "type": "string",
            "description": "Type of address, Personal or Work"
          }
        },
        "type": "object"
      },
      "IdentityRelation": {
        "description": "The relation object contains name and relation to the owner of the account",
        "properties": {
          "type": {
            "enum": [
              "Mother",
              "Father",
              "Spouse"
            ],
            "type": "string",
            "description": "Type of relation: Father, Mother or Spouse"
          },
          "name": {
            "type": "string",
            "description": "The full name of the person"
          },
          "document": {
            "type": "string",
            "description": "Primary document of the person"
          }
        },
        "type": "object"
      },
      "IdentityResponse": {
        "description": "Response with details personal information related to the owner of the connection's account",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the identity to retrieve"
          },
          "itemId": {
            "type": "string",
            "description": "Identifier of the item linked to the identity",
            "format": "uuid"
          },
          "birthDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date of birth"
          },
          "taxNumber": {
            "type": "string",
            "description": "The tax ID (CNPJ) associated with the business account"
          },
          "document": {
            "type": "string",
            "description": "Primary document that identifies the owner"
          },
          "documentType": {
            "type": "string",
            "description": "Type of document collected"
          },
          "jobTitle": {
            "type": "string",
            "description": "Profession or Job information"
          },
          "fullName": {
            "type": "string",
            "description": "Name of the owner of the account"
          },
          "establishmentCode": {
            "type": "string",
            "description": "Establishment code (only for PAYMENT_ACCOUNT connectors)"
          },
          "establishmentName": {
            "type": "string",
            "description": "Name of the establishment (only for PAYMENT_ACCOUNT connectors)"
          },
          "companyName": {
            "type": "string",
            "description": "For business connector, the name of the business"
          },
          "phoneNumbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhoneNumber"
            },
            "description": "List of phone numbers related to the account"
          },
          "emails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Email"
            },
            "description": "List of email addresses related to the account"
          },
          "addresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Address"
            },
            "description": "List of addresses related to the account"
          },
          "relations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentityRelation"
            },
            "description": "List of names related to the account"
          }
        },
        "type": "object",
        "required": [
          "id",
          "itemId"
        ]
      },
      "percentageOverIndex": {
        "description": "Indicates the value bellow or over that the portfolio yield against the index indicated",
        "properties": {
          "value": {
            "type": "number",
            "description": "amount yield over or bellow indicated index"
          },
          "index": {
            "type": "string",
            "description": "index used to reflect yield of portfolio"
          }
        },
        "type": "object"
      },
      "assetDistribution": {
        "description": "Structure of all assets that comprises the asset-portfolio",
        "properties": {
          "INVESTMENT_TYPE": {
            "type": "number",
            "description": "investment type within user assets-portfolio and amount of type of asset that comprises the aggregated asstets-portfolio"
          }
        },
        "type": "object"
      },
      "AggregatedPortfolio": {
        "description": "Array of Aggregated Portfolio by period indicated",
        "properties": {
          "balance": {
            "type": "number",
            "description": "Current balance from total portfolio of assets"
          },
          "percentage": {
            "type": "number",
            "description": "Percentage yield compared to the previous month"
          },
          "amount": {
            "type": "number",
            "description": "Amount yield over the period"
          },
          "currency": {
            "type": "string",
            "description": "Currency of the yield amount"
          },
          "date": {
            "type": "string",
            "description": "Date when the porfolio was captured"
          },
          "percentageOverIndex": {
            "$ref": "#/components/schemas/percentageOverIndex"
          },
          "period": {
            "enum": [
              "CURRENT_YEAR",
              "LAST_TWELVE_MONTHS"
            ],
            "type": "string",
            "description": "Period from AggregatedPortfolio was retrieved"
          },
          "assetDistribution": {
            "$ref": "#/components/schemas/assetDistribution"
          }
        },
        "type": "object"
      },
      "AggregatedPortfolioResponse": {
        "description": "Response with overview of the distribution and yield of all the assets the user has in a period of time indicated",
        "properties": {
          "page": {
            "type": "number",
            "format": "double",
            "description": ""
          },
          "total": {
            "type": "number",
            "format": "double",
            "description": ""
          },
          "totalPages": {
            "type": "number",
            "format": "double",
            "description": ""
          },
          "results": {
            "type": "array",
            "description": "Snapshot of assets-portfolio by period indicated",
            "items": {
              "$ref": "#/components/schemas/AggregatedPortfolio"
            }
          }
        },
        "type": "object"
      },
      "MonthlyPortfolio": {
        "description": "Response with overview of the distribution and yield of all the assets the user has month by month",
        "properties": {
          "balance": {
            "type": "number",
            "description": "Current balance from total portfolio of assets"
          },
          "yieldPercentage": {
            "type": "number",
            "description": "Percentage yield compared to the previous month"
          },
          "yieldAmount": {
            "type": "number",
            "description": "Amount yield over the period"
          },
          "date": {
            "type": "string",
            "description": "First day of the month retrieved"
          },
          "yieldPercentageOverIndex": {
            "$ref": "#/components/schemas/percentageOverIndex"
          }
        },
        "type": "object"
      },
      "MonthlyPortfolioResponse": {
        "description": "Response with overview of the distribution and yield of all the assets the user has month by month",
        "properties": {
          "page": {
            "type": "number",
            "format": "double",
            "description": ""
          },
          "total": {
            "type": "number",
            "format": "double",
            "description": ""
          },
          "totalPages": {
            "type": "number",
            "format": "double",
            "description": ""
          },
          "results": {
            "description": "Array with overview of the distribution and yield of all the assets the user has month by month",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MonthlyPortfolio"
            }
          }
        },
        "type": "object"
      },
      "IncomeReport": {
        "description": "Income report entity",
        "properties": {
          "url": {
            "type": "string",
            "description": "URL of the income report file available to be downloaded from Amazon S3"
          },
          "year": {
            "type": "number",
            "format": "integer",
            "description": "Year to which the income report belongs"
          }
        },
        "type": "object"
      },
      "IncomeReportsResponse": {
        "description": "Response with the pages of metadata of the income reports files uploaded to Amazon S3",
        "properties": {
          "page": {
            "type": "number",
            "format": "double",
            "description": ""
          },
          "total": {
            "type": "number",
            "format": "double",
            "description": ""
          },
          "totalPages": {
            "type": "number",
            "format": "double",
            "description": ""
          },
          "results": {
            "description": "Array with the metadata of every income report",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IncomeReport"
            }
          }
        },
        "type": "object"
      },
      "ConnectTokenResponse": {
        "description": "Connect token response",
        "properties": {
          "accessToken": {
            "type": "string",
            "description": "Connect token that's used to initialize Pluggy's Connect widget"
          }
        },
        "type": "object",
        "required": [
          "accessToken"
        ],
        "example": {
          "accessToken": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJjbGllbnRJZCI6IjI3MzY0YjRhLTM1NGUtNDc5ZC04OWJkLTA1Y2VmNDc2ZTFmNCIsImRhdGEiOiI4NmYyMjIwNDVkNjc3NDJjZjI5MjhjMGNmNjBlZjFkZjo5MjRmNGZlNjg5YWM1NGI2ZmVmMzkzZDc2ZTExNjAxZTI1MjliNmUyNDY1Y2I4ZDkxMWI3ZDY0ZjA5Y2NkYzBiMzg4YWFjZWNkZmQzMGMzZGZiNTBkNzk1OTA1Y2QyNWZlZmEyODZhMWQ0NDc5YzYyNzgwZDZiMzBlNDZiYTY3YjUyZDRkMmIwNWU0ODVjYzk5NjZiYzJjMDUyNDE5OTgzNjBjYTVkM2M4MTJhODQ0ODI1NDI2NDJhNWNkNjhjMTU3YjUzYThkOGEyOGZlMWM4ZDkxNmYzZjZlOTQ0MzEyYjBjNzNmZDBhYmIyYTk0MDU2MzZhYjMxM2RkMmY0OTE0IiwiaWF0IjoxNjQwNjk3MjUwLCJleHAiOjE2NDA2OTkwNTB9.i9DpZ_sOW_I9yGUUXqUWcB9zqCJEXQnjaUrwmcVOXX3F1-he3LjT2f8mHbt7DOvxHtxqAagZkW8BT3J2OBYDOzmHuBgKbbSUmb4YLfC8PaKf2p7fY0fKVu30iIFqiM5CgDQ048dIWzWSlGAYZq00edD0BYlfOkU3ll7OofzmDUAG6KBRDx68FrtYxboNJa8sXli7WSAI3nzZDhcVyPJvqlMHG6VXbJboQrxnSEBGdpGBQ7n_-2G5Oa3-MHCR-Z5cKx1pi4NwqorGFg1c2uRj3F4GdRs94UkqlvdH6FRxAUD3SVDiegvQ6vkOWCHpD1-wZELOmenkJ7ecjg9CChPavx"
        }
      },
      "AuthResponse": {
        "description": "Authentication confirmed response to interact with the api",
        "properties": {
          "apiKey": {
            "type": "string",
            "description": "Authentication key for the API"
          }
        },
        "type": "object",
        "required": [
          "apiKey"
        ],
        "example": {
          "apiKey": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
        }
      },
      "AuthRequest": {
        "description": "Authentication parameters required to get access to Pluggy's API",
        "properties": {
          "clientId": {
            "type": "string",
            "description": "Client id",
            "format": "uuid"
          },
          "clientSecret": {
            "type": "string",
            "description": "Client secret"
          }
        },
        "type": "object",
        "required": [
          "clientId",
          "clientSecret"
        ],
        "example": {
          "clientId": "f8c9b8f0-b8e2-4f0f-b8e2-4f0f8e2f0f8e2",
          "clientSecret": "UZzp2n7eMThpfZ74Xf7"
        }
      },
      "ConnectTokenRequest": {
        "description": "Create a connect token request payload",
        "properties": {
          "itemId": {
            "type": "string",
            "description": "Item identifier to allow Connect Widget to performan an update on it.",
            "format": "uuid"
          },
          "options": {
            "$ref": "#/components/schemas/ItemOptions"
          }
        },
        "example": {
          "itemId": "5e9f8f8f-f8f8-4f8f-8f8f-8f8f8f8f8f8f",
          "options": {
            "webhookUrl": "https://example.com/webhook",
            "clientUserId": "My App UserId"
          }
        },
        "type": "object"
      },
      "ItemOptions": {
        "description": "Item options available to send through connect tokens",
        "properties": {
          "clientUserId": {
            "type": "string",
            "description": "Client's identifier for the user, it can be a ID, UUID or even an email."
          },
          "webhookUrl": {
            "type": "string",
            "description": "Url to be notified of this specific item changes"
          }
        },
        "type": "object"
      },
      "ItemCreationErrorResponse": {
        "title": "Item Creation Error Schema",
        "type": "object",
        "properties": {
          "code": {
            "type": "number"
          },
          "codeDescription": {
            "type": "string",
            "description": "Distinctive code description, useful to identify the error."
          },
          "message": {
            "type": "string"
          },
          "errors": {
            "description": "List of errors related to parameter validations",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ParameterValidationError"
            }
          }
        }
      },
      "WebhookCreationErrorResponse": {
        "title": "Webhook Creation Error Schema",
        "type": "object",
        "properties": {
          "code": {
            "type": "number"
          },
          "message": {
            "type": "string"
          }
        },
        "example": {
          "code": 400,
          "message": "Webhook url must be valid URL address and not localhost'"
        }
      },
      "NotAuthenticatedResponse": {
        "title": "Unauthenticated response",
        "type": "object",
        "properties": {
          "code": {
            "type": "number"
          },
          "message": {
            "type": "string"
          }
        },
        "example": {
          "code": 403,
          "message": "Missing or invalid authorization token"
        }
      },
      "GlobalErrorResponse": {
        "title": "Global Error Response Schema",
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number"
          },
          "message": {
            "type": "string"
          },
          "codeDescription": {
            "type": "string",
            "description": "Distinctive code description, useful to distinguish the error."
          },
          "data": {
            "type": "object",
            "description": "Additional data related to the error, if any",
            "properties": {}
          }
        },
        "example": {
          "code": 500,
          "codeDescription": "INTERNAL_SERVER_ERROR",
          "message": "Internal Server Error"
        }
      },
      "Loan": {
        "description": "Response with information related to a loan",
        "properties": {
          "id": {
            "type": "string",
            "description": "Primary identifier"
          },
          "itemId": {
            "type": "string",
            "description": "Identifier of the item linked to the loan",
            "format": "uuid"
          },
          "contractNumber": {
            "type": "string",
            "description": "Contract number given by the contracting institution"
          },
          "ipocCode": {
            "type": "string",
            "description": "Standard contract number - IPOC (Identificação Padronizada da Operação de Crédito)"
          },
          "productName": {
            "type": "string",
            "description": "Denomination/Identification of the name of the credit operation disclosed to the customer"
          },
          "type": {
            "type": "string",
            "description": "Loan type (https://openbanking-brasil.github.io/openapi/swagger-apis/loans/?urls.primaryName=2.0.1#model-EnumContractProductSubTypeLoans)"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the loan data was collected"
          },
          "contractDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the loan was contracted"
          },
          "disbursementDates": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "date",
              "example": "2024-01-01"
            },
            "description": "Disbursement date of the contracted amount"
          },
          "settlementDate": {
            "type": "string",
            "format": "date-time",
            "description": "Loan settlement date"
          },
          "contractAmount": {
            "type": "number",
            "description": "Loan contracted value"
          },
          "currencyCode": {
            "type": "string",
            "description": "Code referencing the currency of the loan",
            "example": "BRL"
          },
          "dueDate": {
            "type": "string",
            "format": "date-time",
            "description": "Loan due date"
          },
          "installmentPeriodicity": {
            "type": "string",
            "description": "Installments regular frequency",
            "enum": [
              "WITHOUT_REGULAR_PERIODICITY",
              "WEEKLY",
              "FORTNIGHTLY",
              "MONTHLY",
              "BIMONTHLY",
              "QUARTERLY",
              "SEMESTERLY",
              "YEARLY",
              "OTHERS"
            ]
          },
          "installmentPeriodicityAdditionalInfo": {
            "type": "string",
            "description": "Mandatory field to complement the information regarding the regular payment frequency when installmentPeriodicity has value 'OTHERS'"
          },
          "firstInstallmentDueDate": {
            "type": "string",
            "format": "date-time",
            "description": "First installment due date"
          },
          "CET": {
            "type": "number",
            "description": "CET - Custo Efetivo Total must be expressed as an annual percentage rate and incorporates all charges and expenses incurred in credit operations (interest rate, but also tariffs, taxes, insurance and other expenses charged)"
          },
          "amortizationScheduled": {
            "type": "string",
            "description": "Amortization system (https://openbanking-brasil.github.io/openapi/swagger-apis/loans/?urls.primaryName=2.0.1#model-EnumContractAmortizationScheduled)",
            "enum": [
              "SAC",
              "PRICE",
              "SAM",
              "WITHOUT_AMORTIZATION_SYSTEM",
              "OTHERS"
            ]
          },
          "amortizationScheduledAdditionalInfo": {
            "type": "string",
            "description": "Mandatory field to complement the information regarding the scheduled amortization when it has value 'OTHERS'"
          },
          "cnpjConsignee": {
            "type": "string",
            "description": "Consignor CNPJ"
          },
          "interestRates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LoanInterestRate"
            }
          },
          "contractedFees": {
            "type": "array",
            "description": "List that brings the information of the tariffs agreed in the contract.",
            "items": {
              "$ref": "#/components/schemas/LoanContractedFee"
            }
          },
          "contractedFinanceCharges": {
            "type": "array",
            "description": "List that brings the charges agreed in the contract",
            "items": {
              "$ref": "#/components/schemas/LoanContractedFinanceCharge"
            }
          },
          "warranties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LoanWarranty"
            }
          },
          "installments": {
            "$ref": "#/components/schemas/LoanInstallments"
          },
          "payments": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LoanPayments"
              }
            ],
            "description": "Loan contract payment data"
          }
        },
        "type": "object",
        "required": [
          "id",
          "itemId",
          "date",
          "productName",
          "currencyCode"
        ],
        "example": {}
      },
      "LoanInterestRate": {
        "description": "Object that brings the set of information necessary to demonstrate the composition of the remunerative interest rates of the Credit Type",
        "properties": {
          "taxType": {
            "type": "string",
            "description": "Tax type",
            "enum": [
              "NOMINAL",
              "EFFECTIVE"
            ]
          },
          "interestRateType": {
            "type": "string",
            "description": "Interest rate type",
            "enum": [
              "SIMPLE",
              "COMPOUND"
            ]
          },
          "taxPeriodicity": {
            "type": "string",
            "description": "Tax periodicity",
            "enum": [
              "MONTHLY",
              "YEARLY"
            ]
          },
          "calculation": {
            "type": "string",
            "description": "Calculation basis"
          },
          "referentialRateIndexerType": {
            "type": "string",
            "description": "Types of benchmark rates or indexers (https://openbanking-brasil.github.io/openapi/swagger-apis/loans/?urls.primaryName=2.0.1#model-EnumContractReferentialRateIndexerType)"
          },
          "referentialRateIndexerSubType": {
            "type": "string",
            "description": "Subtypes of benchmark rates or indexers (https://openbanking-brasil.github.io/openapi/swagger-apis/loans/?urls.primaryName=2.0.1#model-EnumContractReferentialRateIndexerSubType)"
          },
          "referentialRateIndexerAdditionalInfo": {
            "type": "string",
            "description": "Free field to complement the information regarding the Type of reference rate or indexer"
          },
          "preFixedRate": {
            "type": "number",
            "description": "Pre-fixed rate applied under the credit modality contract. 1 = 100%"
          },
          "postFixedRate": {
            "type": "number",
            "description": "Post-fixed rate applied under the credit modality contract. 1 = 100%"
          },
          "additionalInfo": {
            "type": "string",
            "description": "Text with additional information on the composition of agreed interest rates"
          }
        }
      },
      "LoanContractedFee": {
        "properties": {
          "name": {
            "type": "string",
            "description": "Agreed rate denomination"
          },
          "code": {
            "type": "string",
            "description": "Acronym identifying the agreed rate"
          },
          "chargeType": {
            "type": "string",
            "description": "Charge type for the rate agreed in the contract",
            "enum": [
              "UNIQUE",
              "BY_INSTALLMENT"
            ]
          },
          "charge": {
            "type": "string",
            "description": "Billing method related to the tariff agreed in the contract",
            "enum": [
              "MINIMUM",
              "MAXIMUM",
              "FIXED",
              "PERCENTAGE"
            ]
          },
          "amount": {
            "type": "number",
            "description": "Monetary value of the tariff agreed in the contract"
          },
          "rate": {
            "type": "number",
            "description": "Rate value in percentage agreed in the contract"
          }
        }
      },
      "LoanContractedFinanceCharge": {
        "properties": {
          "type": {
            "type": "string",
            "description": "Charge type agreed in the contract (https://openbanking-brasil.github.io/openapi/swagger-apis/loans/?urls.primaryName=2.0.1#model-EnumContractFinanceChargeType)"
          },
          "additionalInfo": {
            "type": "string",
            "description": "Field for additional information"
          },
          "rate": {
            "type": "number",
            "description": "Charge value in percentage agreed in the contract"
          }
        }
      },
      "LoanWarranty": {
        "properties": {
          "currencyCode": {
            "type": "string",
            "description": "Code referencing the currency of the warranty",
            "example": "BRL"
          },
          "type": {
            "type": "string",
            "description": "Denomination / Identification of the type of warranty that guarantees the Type of Credit Operation contracted (https://openbanking-brasil.github.io/openapi/swagger-apis/loans/?urls.primaryName=2.0.1#model-EnumWarrantyType)"
          },
          "subtype": {
            "type": "string",
            "description": "Denomination / Identification of the subtype of warranty that guarantees the Type of Credit Operation contracted (https://openbanking-brasil.github.io/openapi/swagger-apis/loans/?urls.primaryName=2.0.1#model-EnumWarrantySubType)"
          },
          "amount": {
            "type": "number",
            "description": "Warranty original value"
          }
        }
      },
      "LoanInstallments": {
        "properties": {
          "typeNumberOfInstallments": {
            "type": "string",
            "description": "Type of total term of the contract referring to the type of credit informed",
            "enum": [
              "DAY",
              "WEEK",
              "MONTH",
              "YEAR",
              "WITHOUT_TOTAL_PERIOD"
            ]
          },
          "totalNumberOfInstallments": {
            "type": "number",
            "description": "Total term according to the type referring to the type of credit informed"
          },
          "typeContractRemaining": {
            "type": "string",
            "description": "Type of remaining term of the contract referring to the type of credit informed",
            "enum": [
              "DAY",
              "WEEK",
              "MONTH",
              "YEAR",
              "WITHOUT_TOTAL_PERIOD",
              "WITHOUT_REMAINING_PERIOD"
            ]
          },
          "contractRemainingNumber": {
            "type": "number",
            "description": "Remaining term according to the type referring to the credit type informed"
          },
          "paidInstallments": {
            "type": "number",
            "description": "Number of paid installments"
          },
          "dueInstallments": {
            "type": "number",
            "description": "Number of due installments"
          },
          "pastDueInstallments": {
            "type": "number",
            "description": "Number of overdue installments"
          },
          "balloonPayments": {
            "type": "array",
            "description": "List that brings the due dates and value of the non-regular installments of the contract of the type of credit consulted",
            "items": {
              "$ref": "#/components/schemas/LoanInstallmentBalloonPayment"
            }
          }
        }
      },
      "LoanInstallmentBalloonPayment": {
        "properties": {
          "dueDate": {
            "type": "string",
            "format": "date-time",
            "description": "Expiration date of the non-regular installment to expire from the contract of the consulted credit modality"
          },
          "amount": {
            "$ref": "#/components/schemas/LoanInstallmentBalloonPaymentAmount"
          }
        }
      },
      "LoanInstallmentBalloonPaymentAmount": {
        "description": "Monetary value of the non-regular installment due",
        "properties": {
          "value": {
            "type": "number",
            "description": "Monetary value of the non-regular installment due"
          },
          "currencyCode": {
            "type": "string",
            "description": "Code referencing the currency of the installment",
            "example": "BRL"
          }
        }
      },
      "LoanPayments": {
        "properties": {
          "contractOutstandingBalance": {
            "type": "number",
            "description": "Amount required for the customer to settle the debt"
          },
          "releases": {
            "type": "array",
            "description": "List of payments made in the period",
            "items": {
              "$ref": "#/components/schemas/LoanPaymentRelease"
            }
          }
        }
      },
      "LoanPaymentRelease": {
        "properties": {
          "isOverParcelPayment": {
            "type": "boolean",
            "description": "Identifies whether it is an agreed payment (false) or a one-time payment (true)"
          },
          "installmentId": {
            "type": "string",
            "description": "Installment identifier, responsibility of each transmitting Institution"
          },
          "paidDate": {
            "type": "string",
            "format": "date-time",
            "description": "Effective date of payment referring to the contract of the credit modality consulted"
          },
          "currencyCode": {
            "type": "string",
            "description": "Code referencing the currency of the payment",
            "example": "BRL"
          },
          "paidAmount": {
            "type": "number",
            "description": "Payment amount referring to the contract of the credit modality consulted"
          },
          "overParcel": {
            "$ref": "#/components/schemas/LoanPaymentReleaseOverParcel"
          }
        }
      },
      "LoanPaymentReleaseOverParcel": {
        "description": "Object of fees and charges that were paid outside the installment",
        "properties": {
          "fees": {
            "type": "array",
            "description": "List of fees that were paid outside the installment, only for single payment",
            "items": {
              "$ref": "#/components/schemas/LoanPaymentReleaseOverParcelFee"
            }
          },
          "charges": {
            "type": "array",
            "description": "List of charges that were paid out of installment",
            "items": {
              "$ref": "#/components/schemas/LoanPaymentReleaseOverParcelCharge"
            }
          }
        }
      },
      "LoanPaymentReleaseOverParcelFee": {
        "properties": {
          "name": {
            "type": "string",
            "description": "Denomination of the agreed rate"
          },
          "code": {
            "type": "string",
            "description": "Acronym identifying the agreed rate"
          },
          "amount": {
            "type": "number",
            "description": "Monetary value of the tariff agreed in the contract"
          }
        }
      },
      "LoanPaymentReleaseOverParcelCharge": {
        "properties": {
          "type": {
            "type": "string",
            "description": "Charge type agreed in the contract (https://openbanking-brasil.github.io/openapi/swagger-apis/loans/?urls.primaryName=2.0.1#model-EnumContractFinanceChargeType)"
          },
          "additionalInfo": {
            "type": "string",
            "description": "Free field to fill in additional information regarding the charge"
          },
          "amount": {
            "type": "number",
            "description": "Payment amount of the charge paid outside the installment"
          }
        }
      },
      "BenefitResponse": {
        "description": "Response with information related to a benefit",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Primary identifier"
          },
          "itemId": {
            "type": "string",
            "description": "Identifier of the item linked to the loan",
            "format": "uuid"
          },
          "beneficiaryName": {
            "type": "string",
            "description": "Beneficiary name"
          },
          "availableMarginValue": {
            "type": "number",
            "description": "Available margin value"
          },
          "marginBaseValue": {
            "type": "number",
            "description": "Base margin value"
          },
          "payrollDeductibleAvailableMarginValue": {
            "type": "number",
            "description": "Payroll deductible available margin value"
          },
          "usedMarginValue": {
            "type": "number",
            "description": "Used margin value"
          },
          "reservedMarginValue": {
            "type": "number",
            "description": "Reserved margin value"
          },
          "payingInstitution": {
            "type": "object",
            "description": "Paying institution information",
            "properties": {
              "code": {
                "type": "string",
                "description": "Paying institution code"
              },
              "name": {
                "type": "string",
                "description": "Paying institution name"
              },
              "agency": {
                "type": "string",
                "description": "Paying institution agency"
              },
              "account": {
                "type": "string",
                "description": "Paying institution account"
              }
            }
          },
          "payrollLoans": {
            "type": "array",
            "description": "List of payroll loans",
            "items": {
              "$ref": "#/components/schemas/PayrollLoan"
            }
          }
        },
        "required": [
          "id",
          "itemId",
          "beneficiaryName",
          "type",
          "number"
        ],
        "example": {}
      },
      "PayrollLoan": {
        "description": "Information related to a payroll loan",
        "type": "object",
        "properties": {
          "contractCode": {
            "type": "string",
            "description": "Contract code given by the contracting institution"
          },
          "cnpjOriginalContractCreditor": {
            "type": "string",
            "description": "CNPJ of the original creditor of the contract"
          },
          "nominalInterestRate": {
            "type": "number",
            "description": "Nominal interest rate"
          },
          "efectiveInterestRate": {
            "type": "number",
            "description": "Effective interest rate"
          },
          "cetAnnualRate": {
            "type": "number",
            "description": "CET annual rate"
          },
          "cetMonthRate": {
            "type": "number",
            "description": "CET monthly rate"
          },
          "currencyCode": {
            "type": "string",
            "description": "Code referencing the currency of the loan",
            "example": "BRL"
          },
          "amortizationRegime": {
            "type": "string",
            "description": "Amortization regime"
          },
          "installmentsQuantity": {
            "type": "number",
            "description": "Number of installments"
          },
          "installmentsValue": {
            "type": "number",
            "description": "Installment value"
          },
          "dueDateFirstInstallment": {
            "type": "string",
            "format": "date-time",
            "description": "Due date of the first installment"
          },
          "dueDateLastInstallment": {
            "type": "string",
            "format": "date-time",
            "description": "Due date of the last installment"
          },
          "cnpjCorrespondentBanking": {
            "type": "string",
            "description": "CNPJ of the correspondent banking"
          },
          "operationHiringDate": {
            "type": "string",
            "format": "date-time",
            "description": "Operation hiring date"
          },
          "client": {
            "type": "object",
            "description": "Client information",
            "properties": {
              "name": {
                "type": "string",
                "description": "Client name"
              },
              "document": {
                "type": "string",
                "description": "Client CPF"
              },
              "phone": {
                "type": "string",
                "description": "Client phone"
              },
              "addresStreet": {
                "type": "string",
                "description": "Client email"
              },
              "addressNumber": {
                "type": "string",
                "description": "Client address number"
              },
              "addressCity": {
                "type": "string",
                "description": "Client address city"
              },
              "addressZipCode": {
                "type": "string",
                "description": "Client address zip code"
              },
              "addressState": {
                "type": "string",
                "description": "Client address state"
              }
            }
          }
        },
        "required": [
          "contractCode",
          "client"
        ]
      },
      "Bill": {
        "description": "Response with information related to a credit card bill",
        "properties": {
          "id": {
            "type": "string",
            "description": "Primary identifier"
          },
          "dueDate": {
            "type": "string",
            "format": "date-time",
            "description": "Due date of the bill, displayed for payment by the customer"
          },
          "totalAmount": {
            "type": "number",
            "description": "Total bill amount"
          },
          "totalAmountCurrencyCode": {
            "type": "string",
            "example": "BRL",
            "description": "Code referencing the currency of the bill"
          },
          "minimumPaymentAmount": {
            "type": "number",
            "description": "Minimum payment amount of the bill"
          },
          "allowsInstallments": {
            "type": "boolean",
            "description": "Indicates whether the bill allows installment payments (true) or not (false)"
          },
          "financeCharges": {
            "type": "array",
            "description": "List of charges associated to the bill",
            "items": {
              "$ref": "#/components/schemas/BillFinanceCharge"
            }
          }
        },
        "type": "object",
        "required": [
          "id",
          "accountId",
          "dueDate",
          "totalAmount",
          "totalAmountCurrencyCode",
          "financeCharges"
        ],
        "example": {}
      },
      "BillFinanceCharge": {
        "description": "Response with information related to a credit card bill finance charge",
        "properties": {
          "id": {
            "type": "string",
            "description": "Primary identifier"
          },
          "type": {
            "enum": [
              "LATE_PAYMENT_REMUNERATIVE_INTEREST",
              "LATE_PAYMENT_FEE",
              "LATE_PAYMENT_INTEREST",
              "IOF",
              "OTHER"
            ],
            "type": "string",
            "description": "Denomination of the charges that apply to the postpaid payment account bill"
          },
          "amount": {
            "type": "number",
            "description": "Amount charged for the charge/fee"
          },
          "currencyCode": {
            "type": "string",
            "example": "BRL",
            "description": "Code referencing the currency of the charge"
          },
          "additionalInfo": {
            "type": "string",
            "description": "Free field, mandatory to fill if 'OTHER' type of charge is selected"
          }
        },
        "type": "object",
        "required": [
          "id",
          "creditCardBillId",
          "type",
          "amount",
          "currencyCode"
        ],
        "example": {}
      },
      "PaymentRequest": {
        "description": "Response with information related to a payment request",
        "properties": {
          "id": {
            "type": "string",
            "description": "Primary identifier"
          },
          "amount": {
            "type": "number",
            "description": "Requested amount"
          },
          "description": {
            "type": "string",
            "description": "Payment description"
          },
          "status": {
            "enum": [
              "CREATED",
              "IN_PROGRESS",
              "COMPLETED",
              "SCHEDULED",
              "WAITING_PAYER_AUTHORIZATION",
              "ERROR",
              "REFUND_IN_PROGRESS",
              "REFUNDED",
              "REFUND_ERROR"
            ],
            "type": "string",
            "description": "Payment request status"
          },
          "clientPaymentId": {
            "type": "string",
            "description": "Client payment identifier"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the payment request was created"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the payment request was updated"
          },
          "callbackUrls": {
            "$ref": "#/components/schemas/PaymentRequestCallbackUrls"
          },
          "recipientId": {
            "type": "string",
            "format": "uuid",
            "description": "Payment receiver identifier"
          },
          "paymentUrl": {
            "type": "string",
            "description": "URL to begin the payment intent creation flow for this payment request"
          },
          "pixQrCode": {
            "type": "string",
            "description": "Pix QR code generated by the payment receiver"
          },
          "boleto": {
            "$ref": "#/components/schemas/Boleto"
          },
          "schedule": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ScheduleTypeSingle"
              },
              {
                "$ref": "#/components/schemas/ScheduleTypeDaily"
              },
              {
                "$ref": "#/components/schemas/ScheduleTypeWeekly"
              },
              {
                "$ref": "#/components/schemas/ScheduleTypeMonthly"
              },
              {
                "$ref": "#/components/schemas/ScheduleTypeCustom"
              }
            ],
            "discriminator": {
              "propertyName": "type"
            }
          }
        },
        "type": "object",
        "required": [
          "id",
          "amount",
          "status",
          "createdAt",
          "updatedAt",
          "paymentUrl"
        ],
        "example": {}
      },
      "SchedulePayment": {
        "description": "Information of a schedule payment",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "description": {
            "type": "string",
            "description": "Scheduled payment description"
          },
          "status": {
            "type": "string",
            "description": "Scheduled payment status",
            "enum": [
              "SCHEDULED",
              "COMPLETED",
              "ERROR"
            ]
          },
          "scheduledDate": {
            "type": "string",
            "format": "date",
            "description": "Date when the payment is scheduled"
          }
        },
        "type": "object",
        "required": [
          "id",
          "description",
          "status",
          "scheduledDate"
        ]
      },
      "CreatePaymentRequest": {
        "description": "Request with information to create a payment request",
        "properties": {
          "amount": {
            "type": "number",
            "description": "Requested amount"
          },
          "description": {
            "type": "string",
            "description": "Payment description"
          },
          "callbackUrls": {
            "$ref": "#/components/schemas/PaymentRequestCallbackUrls"
          },
          "recipientId": {
            "type": "string",
            "format": "uuid",
            "description": "Payment receiver identifier"
          },
          "customerId": {
            "type": "string",
            "format": "uuid",
            "description": "Customer identifier associated to the payment"
          },
          "clientPaymentId": {
            "type": "string",
            "description": "Your payment identifier"
          },
          "smartAccountId": {
            "type": "string",
            "format": "uuid",
            "description": "Smart account identifier associated to the payment, used to be able to use PIX Qr method"
          },
          "schedule": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ScheduleTypeSingle"
              },
              {
                "$ref": "#/components/schemas/ScheduleTypeDaily"
              },
              {
                "$ref": "#/components/schemas/ScheduleTypeWeekly"
              },
              {
                "$ref": "#/components/schemas/ScheduleTypeMonthly"
              },
              {
                "$ref": "#/components/schemas/ScheduleTypeCustom"
              }
            ],
            "discriminator": {
              "propertyName": "type"
            }
          }
        },
        "type": "object",
        "required": [
          "amount"
        ],
        "example": {}
      },
      "CreatePixQrPaymentRequest": {
        "description": "Request with information to create a PIX QR payment request",
        "properties": {
          "pixQrCode": {
            "type": "string",
            "description": "Pix QR code"
          },
          "callbackUrls": {
            "$ref": "#/components/schemas/PaymentRequestCallbackUrls"
          },
          "customerId": {
            "type": "string",
            "format": "uuid",
            "description": "Customer identifier associated to the payment"
          }
        },
        "type": "object",
        "required": [
          "pixQrCode"
        ],
        "example": {}
      },
      "CreateBoletoPaymentRequest": {
        "description": "Request with information to create a boleto payment request",
        "properties": {
          "description": {
            "type": "string",
            "description": "Payment description"
          },
          "boletoDigitableLine": {
            "type": "string",
            "description": "Boleto digitable line"
          },
          "callbackUrls": {
            "$ref": "#/components/schemas/PaymentRequestCallbackUrls"
          },
          "customerId": {
            "type": "string",
            "format": "uuid",
            "description": "Customer identifier associated to the payment"
          }
        },
        "type": "object",
        "required": [
          "boletoDigitableLine"
        ],
        "example": {}
      },
      "UpdatePaymentRequest": {
        "description": "Request with information to update a payment request",
        "properties": {
          "amount": {
            "type": "number",
            "description": "Requested amount"
          },
          "description": {
            "type": "string",
            "description": "Payment description"
          },
          "callbackUrls": {
            "$ref": "#/components/schemas/PaymentRequestCallbackUrls"
          },
          "recipientId": {
            "type": "string",
            "format": "uuid",
            "description": "Payment receiver identifier"
          },
          "customerId": {
            "type": "string",
            "format": "uuid",
            "description": "Customer identifier associated to the payment"
          },
          "clientPaymentId": {
            "type": "string",
            "description": "Your payment identifier"
          }
        },
        "type": "object",
        "example": {}
      },
      "PaymentRequestCallbackUrls": {
        "description": "Redirect urls after the payment was completed or ended in error status",
        "properties": {
          "success": {
            "type": "string",
            "description": "Url to be redirected after the payment was completed"
          },
          "pending": {
            "type": "string",
            "description": "Url to be redirected when the payment is pending (for example, when it has status WAITING_PAYER_AUTHORIZATION"
          },
          "error": {
            "type": "string",
            "description": "Url to be redirected after the payment ended in error status"
          }
        },
        "type": "object",
        "example": {}
      },
      "PaymentReceipt": {
        "description": "Response with information related to a payment receipt",
        "properties": {
          "id": {
            "type": "string",
            "description": "Primary identifier"
          },
          "paymentRequestId": {
            "type": "string",
            "description": "Payment request identifier"
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the payment receipt expires"
          },
          "receiptUrl": {
            "type": "string",
            "description": "URL to download the payment receipt"
          },
          "creditor": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentReceiptPerson"
              }
            ],
            "description": "Creditor bank account information"
          },
          "debtor": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentReceiptPerson"
              }
            ],
            "description": "Debtor bank account information"
          },
          "amount": {
            "type": "number",
            "description": "Payment amount"
          },
          "description": {
            "type": "string",
            "description": "Payment description"
          },
          "referenceId": {
            "type": "string",
            "description": "Payment reference identifier"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the payment was made"
          },
          "boleto": {
            "$ref": "#/components/schemas/Boleto"
          }
        },
        "type": "object",
        "required": [
          "id",
          "paymentRequestId",
          "expiresAt",
          "receiptUrl",
          "creditor",
          "debtor",
          "amount",
          "referenceId"
        ],
        "example": {
          "amount": 100.0,
          "creditor": {
            "bankAccount": {
              "branch": "0001",
              "number": "123456",
              "type": "CHECKING_ACCOUNT"
            },
            "name": "Creditor Name",
            "taxNumber": "12345678901"
          },
          "date": "2020-04-21T15:00:00.000Z",
          "debtor": {
            "bankAccount": {
              "branch": "0001",
              "number": "123456",
              "type": "CHECKING_ACCOUNT"
            },
            "name": "Debtor Name",
            "taxNumber": "12345678901"
          },
          "description": "Payment description",
          "expiresAt": "2020-04-21T15:00:00.000Z",
          "id": "5e9f8f8f-f8f8-4f8f-8f8f-8f8f8f8f8f8f",
          "paymentRequestId": "5e9f8f8f-f8f8-4f8f-8f8f-8f8f8f8f8f8f",
          "receiptUrl": "https://example.com/receipt",
          "referenceId": "123456"
        }
      },
      "PaymentReceiptPerson": {
        "description": "Debtor or creditor information",
        "properties": {
          "name": {
            "type": "string",
            "description": "Person name"
          },
          "taxNumber": {
            "type": "string",
            "description": "Person tax number"
          },
          "bankAccount": {
            "$ref": "#/components/schemas/PaymentReceiptBankAccount"
          }
        }
      },
      "PaymentReceiptBankAccount": {
        "description": "Payment bank account information",
        "properties": {
          "agency": {
            "type": "string",
            "description": "Bank account branch (agency)"
          },
          "name": {
            "type": "string",
            "description": "Bank account number"
          },
          "account": {
            "type": "string",
            "description": "Bank account number",
            "example": "123456"
          }
        },
        "type": "object",
        "example": {
          "agency": "0001",
          "name": "Itaú",
          "account": "123456"
        },
        "required": [
          "branch",
          "number",
          "type"
        ]
      },
      "PaymentInstitution": {
        "description": "Response with information related to a payment institution",
        "properties": {
          "id": {
            "type": "string",
            "description": "Primary identifier"
          },
          "name": {
            "type": "string",
            "description": "Payment institution name"
          },
          "tradeName": {
            "type": "string",
            "description": "Payment institution trade name"
          },
          "ispb": {
            "type": "string",
            "description": "Payment institution ISPB"
          },
          "compe": {
            "type": "string",
            "description": "Payment institution COMPE"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the payment institution was created"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the payment institution was updated"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "ispb",
          "tradeName",
          "createdAt",
          "updatedAt"
        ],
        "example": {
          "id": "5e9f8f8f-f8f8-4f8f-8f8f-8f8f8f8f8f8f",
          "name": "Banco J. Safra S.A.",
          "ispb": "03017677",
          "tradeName": "Banco Safra",
          "compe": "074",
          "createdAt": "2020-04-21T15:00:00.000Z",
          "updatedAt": "2020-04-21T15:00:00.000Z"
        }
      },
      "PaymentRecipientAccount": {
        "description": "Payment receiver bank account information",
        "properties": {
          "branch": {
            "type": "string",
            "description": "Receiver bank account branch (agency)"
          },
          "number": {
            "type": "string",
            "description": "Receiver bank account number"
          },
          "type": {
            "type": "string",
            "description": "Receiver bank account type, could be: 'CHECKING_ACCOUNT', 'SAVINGS_ACCOUNT' or 'GUARANTEED_ACCOUNT'"
          }
        },
        "type": "object",
        "example": {},
        "required": [
          "branch",
          "number",
          "type"
        ]
      },
      "CreateBulkPayment": {
        "description": "Request with information to create a bulk payment",
        "properties": {
          "paymentRequestIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of payment request identifiers to be associated with the bulk payment"
          },
          "callbackUrls": {
            "$ref": "#/components/schemas/PaymentRequestCallbackUrls"
          },
          "smartAccountId": {
            "type": "string",
            "format": "uuid",
            "description": "Smart account identifier associated with the bulk payment"
          }
        },
        "type": "object",
        "required": [
          "paymentRequestIds",
          "smartAccountId"
        ],
        "example": {
          "smartAccountId": "4cfe1f6d-ae71-4c35-aae0-8f8a535ffbbd",
          "paymentRequestIds": [
            "c2a6b7d9-3349-435d-8341-44021449ebbc"
          ],
          "callbackUrls": {
            "success": "https://success.com",
            "pending": "https://pending.com",
            "error": "https://error.com"
          }
        }
      },
      "BulkPayment": {
        "description": "Response with information related to a bulk payment",
        "properties": {
          "id": {
            "type": "string",
            "description": "Primary identifier"
          },
          "totalAmount": {
            "type": "number",
            "description": "Total amount of all requests associated with the bulk payment"
          },
          "status": {
            "enum": [
              "CREATED",
              "PAYMENT_IN_PROGRESS",
              "TOP_UP_IN_PROGRESS",
              "COMPLETED",
              "PARTIALLY_COMPLETED",
              "ERROR"
            ],
            "type": "string",
            "description": "Bulk payment status"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the payment request was created"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the payment request was updated"
          },
          "callbackUrls": {
            "$ref": "#/components/schemas/PaymentRequestCallbackUrls"
          },
          "paymentUrl": {
            "type": "string",
            "description": "URL to begin the payment intent creation flow for this payment request"
          },
          "paymentRequests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentRequest"
            },
            "description": "List of payment requests associated with the bulk payment"
          },
          "smartAccount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SmartAccount"
              }
            ],
            "description": "Smart account associated with the bulk payment"
          }
        },
        "type": "object",
        "required": [
          "id",
          "totalAmount",
          "status",
          "createdAt",
          "updatedAt",
          "paymentRequests",
          "paymentUrl",
          "smartAccount"
        ],
        "example": {
          "id": "4cfe1f6d-ae71-4c35-aae0-8f8a535ffbbd",
          "totalAmount": 100.5,
          "status": "CREATED",
          "createdAt": "2023-11-06T15:38:47.861Z",
          "updatedAt": "2023-11-06T15:45:19.384Z",
          "callbackUrls": {
            "success": "https://success.com",
            "pending": "https://pending.com",
            "error": "https://error.com"
          },
          "paymentUrl": "https://pay.pluggy.ai/bulk/05c693bf-c196-47ea-a28c-8251d6bb8a06",
          "paymentRequests": [
            {
              "id": "c2a6b7d9-3349-435d-8341-44021449ebbc",
              "amount": 100.5,
              "description": "Transferência",
              "status": "IN_PROGRESS",
              "createdAt": "2023-11-06T13:03:45.689Z",
              "updatedAt": "2023-11-06T15:45:19.401Z",
              "callbackUrls": null,
              "recipient": null,
              "paymentUrl": "https://pay.pluggy.ai/05c693bf-c196-47ea-a28c-8251d6bb8a06"
            }
          ],
          "smartAccount": {
            "id": "71996b6d-8991-450c-8542-ae59069d1a9d",
            "ispb": "0001020",
            "agency": "1234",
            "number": "123456",
            "verifyingDigit": "7",
            "type": "CHECKING_ACCOUNT",
            "isSandbox": false
          }
        }
      },
      "PaymentIntent": {
        "description": "Request with information related to a payment intent",
        "properties": {
          "id": {
            "type": "string",
            "description": "Primary identifier"
          },
          "status": {
            "enum": [
              "PAYMENT_REJECTED",
              "ERROR",
              "CANCELED",
              "CONSENT_REJECTED",
              "STARTED",
              "ENQUEUED",
              "CONSENT_AWAITING_AUTHORIZATION",
              "CONSENT_AUTHORIZED",
              "PAYMENT_PENDING",
              "PAYMENT_PARTIALLY_ACCEPTED",
              "PAYMENT_SETTLEMENT_PROCESSING",
              "PAYMENT_SETTLEMENT_DEBTOR_ACCOUNT",
              "PAYMENT_COMPLETED"
            ],
            "type": "string",
            "description": "Payment intent status"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the payment intent was created"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the payment intent was updated"
          },
          "paymentRequest": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentRequest"
              }
            ],
            "description": "Payment request associated to the payment intent"
          },
          "bulkPayment": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BulkPayment"
              }
            ],
            "description": "Bulk Payment associated to the payment intent"
          },
          "connector": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Connector"
              }
            ],
            "description": "Connector associated to the payment intent"
          },
          "consentUrl": {
            "type": "string",
            "description": "Url to authorize the payment intent"
          },
          "referenceId": {
            "type": "string",
            "description": "Pix id related to the payment intent"
          },
          "paymentMethod": {
            "type": "string",
            "enum": [
              "PIS",
              "PIX"
            ],
            "description": "Payment method can be PIS (Payment Initiation) or PIX",
            "default": "PIS"
          },
          "pixData": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PixData"
              }
            ],
            "description": "Pix data related to the payment intent (only applies for PIX payment method)"
          }
        },
        "type": "object",
        "required": [
          "amount"
        ],
        "example": {
          "id": "4cfe1f6d-ae71-4c35-aae0-8f8a535ffbbd",
          "status": "CONSENT_AWAITING_AUTHORIZATION",
          "createdAt": "2023-11-06T15:38:47.861Z",
          "updatedAt": "2023-11-06T15:45:19.384Z",
          "paymentRequest": {
            "id": "c2a6b7d9-3349-435d-8341-44021449ebbc",
            "amount": 100.5,
            "description": "Transferência",
            "status": "IN_PROGRESS",
            "createdAt": "2023-11-06T13:03:45.689Z",
            "updatedAt": "2023-11-06T15:45:19.401Z",
            "callbackUrls": null,
            "recipient": null,
            "paymentUrl": "https://pay.pluggy.ai/05c693bf-c196-47ea-a28c-8251d6bb8a06"
          },
          "connector": {
            "id": 603,
            "name": "Bradesco",
            "primaryColor": "e5173f",
            "institutionUrl": "https://banco.bradesco/open-finance/logo/icones_vetorial-pf.svg",
            "country": "BR",
            "type": "PERSONAL_BANK",
            "credentials": [
              {
                "validation": "^\\d{3}\\.?\\d{3}\\.?\\d{3}-?\\d{2}$",
                "validationMessage": "CPF deve ter 11 números.",
                "label": "CPF",
                "name": "cpf",
                "type": "number",
                "placeholder": "",
                "optional": false
              }
            ],
            "imageUrl": "https://cdn.pluggy.ai/assets/connector-icons/203.svg",
            "hasMFA": false,
            "oauth": true,
            "health": {
              "status": "ONLINE",
              "stage": null
            },
            "products": [
              "ACCOUNTS",
              "TRANSACTIONS",
              "IDENTITY",
              "CREDIT_CARDS",
              "PAYMENT_DATA",
              "LOANS",
              "INVESTMENTS"
            ],
            "createdAt": "2023-07-12T20:20:17.253Z",
            "isSandbox": false,
            "isOpenFinance": true
          },
          "consentUrl": "https://consenturl.com"
        }
      },
      "CreatePaymentIntent": {
        "description": "Request with information to create a payment intent",
        "properties": {
          "paymentRequestId": {
            "type": "string",
            "description": "Primary identifier of the payment request associated to the payment intent"
          },
          "bulkPaymentId": {
            "type": "string",
            "description": "Primary identifier of the bulk payment associated to the payment intent"
          },
          "parameters": {
            "$ref": "#/components/schemas/PaymentIntentParameter"
          },
          "connectorId": {
            "type": "number",
            "description": "Primary identifier of the connector associated to the payment intent"
          },
          "paymentMethod": {
            "type": "string",
            "enum": [
              "PIS",
              "PIX"
            ],
            "description": "Payment method can be PIS (Payment Initiation) or PIX (PIX QR flow), if PIX selected `bulkPaymentId` or a `paymentRequest` with smartAccountId attached will be accepted"
          }
        },
        "type": "object",
        "example": {}
      },
      "PaymentCustomer": {
        "description": "Response with information related to a payment customer",
        "properties": {
          "id": {
            "type": "string",
            "description": "Primary identifier"
          },
          "type": {
            "enum": [
              "INDIVIDUAL",
              "BUSINESS"
            ],
            "type": "string",
            "description": "Customer type"
          },
          "name": {
            "type": "string",
            "description": "Customer name"
          },
          "email": {
            "type": "string",
            "description": "Customer email"
          },
          "cpf": {
            "type": "string",
            "description": "Customer CPF"
          },
          "cnpj": {
            "type": "string",
            "description": "Customer CNPJ, if type is `BUSINESS`"
          }
        },
        "type": "object",
        "required": [
          "id",
          "type",
          "name",
          "email"
        ],
        "example": {
          "id": "5e9f8f8f-f8f8-4f8f-8f8f-8f8f8f8f8f8f",
          "type": "INDIVIDUAL",
          "name": "Marco Silva",
          "email": "msilva@pluggy.ai",
          "cpf": "123456789-00"
        }
      },
      "CreatePaymentCustomerRequestBody": {
        "description": "Response with information related to a payment customer",
        "properties": {
          "type": {
            "enum": [
              "INDIVIDUAL",
              "BUSINESS"
            ],
            "type": "string",
            "description": "Customer type"
          },
          "name": {
            "type": "string",
            "description": "Customer name"
          },
          "email": {
            "type": "string",
            "description": "Customer email"
          },
          "cpf": {
            "type": "string",
            "description": "Customer CPF"
          },
          "cnpj": {
            "type": "string",
            "description": "Customer CNPJ, if type is `BUSINESS`"
          }
        },
        "type": "object",
        "required": [
          "id",
          "type",
          "name",
          "email"
        ],
        "example": {
          "id": "5e9f8f8f-f8f8-4f8f-8f8f-8f8f8f8f8f8f",
          "type": "INDIVIDUAL",
          "name": "Marco Silva",
          "email": "msilva@pluggy.ai",
          "cpf": "123456789-00"
        }
      },
      "CreateOrUpdatePaymentCustomer": {
        "description": "Response with information related to a payment customer",
        "properties": {
          "id": {
            "type": "string",
            "description": "Primary identifier"
          },
          "type": {
            "enum": [
              "INDIVIDUAL",
              "BUSINESS"
            ],
            "type": "string",
            "description": "Customer type"
          },
          "name": {
            "type": "string",
            "description": "Customer name"
          },
          "email": {
            "type": "string",
            "description": "Customer email"
          },
          "cpf": {
            "type": "string",
            "description": "Customer CPF"
          },
          "cnpj": {
            "type": "string",
            "description": "Customer CNPJ, if type is `BUSINESS`"
          }
        },
        "type": "object",
        "required": [
          "id",
          "type",
          "name",
          "email"
        ],
        "example": {
          "id": "5e9f8f8f-f8f8-4f8f-8f8f-8f8f8f8f8f8f",
          "type": "INDIVIDUAL",
          "name": "Marco Silva",
          "email": "msilva@pluggy.ai",
          "cpf": "123456789-00"
        }
      },
      "PaymentRecipient": {
        "description": "Response with information related to a payment recipient",
        "properties": {
          "id": {
            "type": "string",
            "description": "Primary identifier"
          },
          "taxNumber": {
            "type": "string",
            "description": "Account owner tax number. Can be CPF or CNPJ (only numbers)."
          },
          "name": {
            "type": "string",
            "description": "Account owner name."
          },
          "paymentInstitution": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentInstitution"
              }
            ],
            "description": "Recipient's bank account destination."
          },
          "isDefault": {
            "type": "boolean",
            "description": "Indicates if the recipient is the default one"
          },
          "account": {
            "$ref": "#/components/schemas/PaymentRecipientAccount"
          },
          "pixKey": {
            "type": "string",
            "description": "Pix key associated with the payment recipient"
          },
          "smartAccountId": {
            "type": "string",
            "description": "Smart account that will receive the money, if you are using a Smart Account to pay and it's the same one, the smart account will keep the money"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "taxNumber",
          "paymentInstitution",
          "isDefault",
          "account"
        ],
        "example": {
          "id": "5e9f8f8f-f8f8-4f8f-8f8f-8f8f8f8f8f8f",
          "name": "Conta empresa",
          "taxNumber": "123456789-00",
          "paymentInstitution": {
            "id": "00000000-0000-0000-0000-000000000000",
            "name": "Banco J. Safra S.A.",
            "ispb": "03017677",
            "tradeName": "Banco Safra",
            "compe": "074",
            "createdAt": "2020-04-21T15:00:00.000Z",
            "updatedAt": "2020-04-21T15:00:00.000Z"
          },
          "account": {
            "branch": "0001",
            "number": "123456",
            "type": "CHECKING_ACCOUNT"
          },
          "isDefault": true,
          "pixKey": null
        }
      },
      "CreatePaymentRecipient": {
        "description": "Request with information to create a payment recipient, there is two form to create a payment recipient, one with pixKey and other with taxNumber, name, paymentInstitutionId and account",
        "properties": {
          "taxNumber": {
            "type": "string",
            "description": "Account owner tax number. Can be CPF or CNPJ (only numbers). Send only when the pixKey is not sent."
          },
          "name": {
            "type": "string",
            "description": "Account owner name. Send only this when the pixKey is not sent."
          },
          "paymentInstitutionId": {
            "type": "string",
            "format": "uuid",
            "description": "Primary identifier of the institution associated to the payment recipient. Send only when the pixKey is not sent."
          },
          "account": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentRecipientAccount"
              }
            ],
            "description": "Recipient's bank account destination. Send only if the pixKey is not sent."
          },
          "isDefault": {
            "type": "boolean",
            "description": "Indicates if the recipient is the default one"
          },
          "pixKey": {
            "type": "string",
            "description": "Pix key associated with the payment recipient"
          },
          "smartAccountId": {
            "type": "string",
            "format": "uuid",
            "description": "Smart account identifier associated to the payment recipient, used to be able to use PIX Qr method"
          }
        },
        "type": "object",
        "example": {
          "taxNumber": "123456789-00",
          "name": "Conta empresa",
          "paymentInstitutionId": "00000000-0000-0000-0000-000000000000",
          "account": {
            "branch": "0001",
            "number": "123456",
            "type": "CHECKING_ACCOUNT"
          },
          "isDefault": true
        }
      },
      "UpdatePaymentRecipient": {
        "description": "Request with information to update a payment recipient",
        "properties": {
          "taxNumber": {
            "type": "string",
            "description": "Account owner tax number. Can be CPF or CNPJ (only numbers). Send only if the recipient doesn't have a pixKey."
          },
          "name": {
            "type": "string",
            "description": "Account owner name. Send only if the recipient doesn't have a pixKey."
          },
          "paymentInstitutionId": {
            "type": "string",
            "format": "uuid",
            "description": "Primary identifier of the institution associated to the payment recipient. Send only if the recipient doesn't have a pixKey."
          },
          "account": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentRecipientAccount"
              }
            ],
            "description": "Recipient's bank account destination. Send only if the recipient doesn't have a pixKey."
          },
          "isDefault": {
            "type": "boolean",
            "description": "Indicates if the recipient is the default one"
          },
          "pixKey": {
            "type": "string",
            "description": "Pix key associated with the payment recipient"
          }
        },
        "type": "object",
        "example": {
          "taxNumber": "123456789-00",
          "name": "Conta empresa",
          "paymentInstitutionId": "00000000-0000-0000-0000-000000000000",
          "account": {
            "branch": "0001",
            "number": "123456",
            "type": "CHECKING_ACCOUNT"
          },
          "isDefault": true
        }
      },
      "AcquirerSale": {
        "description": "Acquirer Sale product",
        "properties": {
          "id": {
            "type": "string",
            "description": "Primary identifier of the acquirer sale"
          },
          "itemId": {
            "type": "string",
            "description": "Primary identifier of the item associated to the acquirer sale"
          },
          "description": {
            "type": "string",
            "description": "Clean description of the acquirer sale"
          },
          "currencyCode": {
            "type": "string",
            "description": "Currency ISO code"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the acquirer sale was made"
          },
          "grossAmount": {
            "type": "number",
            "format": "double",
            "description": "Acquirer sale gross amount"
          },
          "paymentMethod": {
            "type": "string",
            "description": "Acquirer sale payment method",
            "enum": [
              "CARD",
              "PIX"
            ]
          },
          "authorizationCode": {
            "type": "string",
            "description": "Code generated by the card issuer to authorize the sale"
          },
          "cardFlag": {
            "type": "string",
            "description": "Flag of the card used",
            "enum": [
              "VISA",
              "MASTERCARD",
              "AMEX",
              "ELO",
              "CABAL",
              "OTHER"
            ]
          },
          "cardNumber": {
            "type": "string",
            "description": "Masked card number of the card used"
          },
          "cardFundingSource": {
            "type": "string",
            "description": "CREDIT or DEBIT",
            "enum": [
              "CREDIT",
              "DEBIT"
            ]
          },
          "nsu": {
            "type": "string",
            "description": "Tax id of the transaction"
          },
          "status": {
            "type": "string",
            "description": "Acquirer sale status",
            "enum": [
              "APPROVED",
              "CANCELLED"
            ]
          },
          "netAmount": {
            "type": "number",
            "format": "double",
            "description": "Acquirer sale net amount"
          },
          "mdrFee": {
            "type": "number",
            "format": "double",
            "description": "Percentage of the merchant discount rate"
          },
          "mdrFeeAmount": {
            "type": "number",
            "format": "double",
            "description": "Total amount of the merchant discount rate"
          },
          "installments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AcquirerSaleInstallmentData"
            },
            "description": ""
          },
          "terminalId": {
            "type": "string",
            "description": "Id of the terminal (maquininha) used for the sale"
          }
        },
        "type": "object",
        "required": [
          "id",
          "description",
          "itemId",
          "grossAmount",
          "date",
          "currencyCode"
        ],
        "example": {
          "id": "71996b6d-8991-450c-8542-ae59069d1a9d",
          "itemId": "9aab8d24-c89b-4b0e-8974-7dd5614686e4",
          "description": "",
          "currencyCode": "BRL",
          "date": "2023-10-02T03:00:00.000Z",
          "grossAmount": 34,
          "installmentCount": 2,
          "paymentMethod": "CARD",
          "authorizationCode": "123456",
          "cardFlag": "Visa",
          "cardNumber": "123456******1234",
          "cardFundingSource": "CREDIT",
          "nsu": "12345678912345",
          "status": "APPROVED",
          "netAmount": 30.6,
          "mdrFee": 10,
          "mdrFeeAmount": 3.4,
          "installments": [
            {
              "number": 1,
              "netAmount": 15.3,
              "grossAmount": 17,
              "receiptDate": "2023-08-28T00:00:00"
            },
            {
              "number": 2,
              "netAmount": 15.3,
              "grossAmount": 17,
              "receiptDate": "2023-07-28T00:00:00"
            }
          ],
          "terminalId": "1234561234561234"
        }
      },
      "AcquirerSaleInstallmentData": {
        "description": "Acquirer Sale product",
        "properties": {
          "number": {
            "type": "number",
            "format": "integer",
            "description": "Ordinal number of the installment"
          },
          "grossAmount": {
            "type": "number",
            "format": "double",
            "description": "Gross amount of the installment"
          },
          "netAmount": {
            "type": "number",
            "format": "double",
            "description": "Net amount of the installment, with taxes applied"
          },
          "receiptDate": {
            "type": "string",
            "format": "date-time",
            "description": ""
          }
        },
        "type": "object",
        "required": [
          "number",
          "grossAmount"
        ]
      },
      "AcquirerReceivable": {
        "description": "Acquirer Receivable product",
        "properties": {
          "id": {
            "type": "string",
            "description": "Primary identifier of the acquirer receivable"
          },
          "itemId": {
            "type": "string",
            "description": "Primary identifier of the item associated to the acquirer receivable"
          },
          "description": {
            "type": "string",
            "description": "Clean description of the acquirer receivable"
          },
          "currencyCode": {
            "type": "string",
            "description": "Currency ISO code"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the acquirer receivable was received"
          },
          "grossAmount": {
            "type": "number",
            "format": "double",
            "description": "Acquirer sale gross amount"
          },
          "paymentId": {
            "type": "string",
            "description": ""
          },
          "settlementStatus": {
            "type": "string",
            "description": "Status of the payment",
            "enum": [
              "PAID",
              "SENT",
              "REJECTED",
              "EXPECTED",
              "OTHER"
            ]
          },
          "cardFlag": {
            "type": "string",
            "description": "Flag of the card used",
            "enum": [
              "VISA",
              "MASTERCARD",
              "AMEX",
              "ELO",
              "CABAL",
              "OTHER"
            ]
          },
          "netAmount": {
            "type": "number",
            "format": "double",
            "description": "Acquirer receivable net amount"
          },
          "destinationAccount": {
            "$ref": "#/components/schemas/AcquirerReceivableDestinationAccount"
          },
          "relatedSales": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AcquirerReceivableRelatedSale"
            },
            "description": "Sales related to the receivable"
          }
        },
        "type": "object",
        "required": [
          "id",
          "description",
          "itemId",
          "grossAmount",
          "date",
          "currencyCode"
        ],
        "example": {
          "id": "71996b6d-8991-450c-8542-ae59069d1a9d",
          "itemId": "9aab8d24-c89b-4b0e-8974-7dd5614686e4",
          "description": "",
          "currencyCode": "BRL",
          "grossAmount": 34,
          "netAmount": 31.1,
          "date": "2023-10-02T03:00:00.000Z",
          "paymentId": "123445567755353",
          "destinationAccount": {
            "receivingBank": "Banco do Brasil S.A.",
            "agency": "1234",
            "account": "12345678-9"
          },
          "settlementStatus": "PAID",
          "cardFlag": "VISA"
        }
      },
      "AcquirerReceivableDestinationAccount": {
        "description": "Acquirer receivable destination account",
        "properties": {
          "receivingBank": {
            "type": "string",
            "description": "Name of the receiving bank"
          },
          "agency": {
            "type": "string",
            "description": "Agency of the receiving account"
          },
          "account": {
            "type": "string",
            "description": "Number of the receiving account"
          }
        },
        "type": "object",
        "required": [
          "receivingBank",
          "agency",
          "account"
        ]
      },
      "AcquirerReceivableRelatedSale": {
        "description": "Acquirer receivable related operation (sale or cancellation)",
        "properties": {
          "date": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the sale occurred"
          },
          "grossAmount": {
            "type": "number",
            "format": "double",
            "description": "Gross amount of the related sale"
          },
          "netAmount": {
            "type": "number",
            "format": "double",
            "description": "Net amount of the related sale"
          },
          "installmentCount": {
            "type": "number",
            "description": "Amount of installments of the sale"
          },
          "installmentNumber": {
            "type": "number",
            "description": "Installment of the sale being paid or cancelled"
          },
          "nsu": {
            "type": "string",
            "description": "NSU of the sale"
          }
        },
        "type": "object",
        "required": [
          "date",
          "netAmount",
          "grossAmount",
          "installmentCount",
          "installmentNumber",
          "nsu"
        ]
      },
      "AcquirerAnticipation": {
        "description": "Acquirer Anticipation product",
        "properties": {
          "id": {
            "type": "string",
            "description": "Primary identifier of the acquirer anticipation"
          },
          "itemId": {
            "type": "string",
            "description": "Primary identifier of the item associated to the acquirer anticipation"
          },
          "description": {
            "type": "string",
            "description": "Clean description of the acquirer anticipation"
          },
          "currencyCode": {
            "type": "string",
            "description": "Currency ISO code"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the acquirer anticipation was requested"
          },
          "grossAmount": {
            "type": "number",
            "format": "double",
            "description": "Acquirer anticipation gross amount"
          },
          "status": {
            "type": "string",
            "description": "Status of the payment anticipation",
            "enum": [
              "SIMULATED",
              "REQUESTED",
              "CANCELLED",
              "IN_ANALYSIS",
              "APPROVED"
            ]
          },
          "netAmount": {
            "type": "number",
            "format": "double",
            "description": "Acquirer anticipation net amount"
          },
          "fee": {
            "type": "number",
            "format": "double",
            "description": "Percentage of monthly fee (e.g 1.5 = 1.5%)"
          },
          "feeAmount": {
            "type": "number",
            "format": "double",
            "description": "Fee amount"
          }
        },
        "type": "object",
        "required": [
          "id",
          "description",
          "itemId",
          "grossAmount",
          "date",
          "currencyCode"
        ],
        "example": {
          "id": "71996b6d-8991-450c-8542-ae59069d1a9d",
          "itemId": "9aab8d24-c89b-4b0e-8974-7dd5614686e4",
          "description": "",
          "currencyCode": "BRL",
          "grossAmount": 313.28,
          "date": "2023-02-06T03:00:00.000Z",
          "status": "APPROVED",
          "netAmount": 308.66,
          "fee": 1.82,
          "feeAmount": 4.62
        }
      },
      "PageResponseAcquirerSales": {
        "description": "",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AcquirerSale"
            },
            "description": ""
          },
          "page": {
            "type": "number",
            "format": "double",
            "description": ""
          },
          "total": {
            "type": "number",
            "format": "double",
            "description": ""
          },
          "totalPages": {
            "type": "number",
            "format": "double",
            "description": ""
          }
        },
        "type": "object",
        "required": [
          "results",
          "page",
          "total",
          "totalPages"
        ]
      },
      "PageResponseAcquirerReceivables": {
        "description": "",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AcquirerReceivable"
            },
            "description": ""
          },
          "page": {
            "type": "number",
            "format": "double",
            "description": ""
          },
          "total": {
            "type": "number",
            "format": "double",
            "description": ""
          },
          "totalPages": {
            "type": "number",
            "format": "double",
            "description": ""
          }
        },
        "type": "object",
        "required": [
          "results",
          "page",
          "total",
          "totalPages"
        ]
      },
      "PageResponseAcquirerAnticipations": {
        "description": "",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AcquirerAnticipation"
            },
            "description": ""
          },
          "page": {
            "type": "number",
            "format": "double",
            "description": ""
          },
          "total": {
            "type": "number",
            "format": "double",
            "description": ""
          },
          "totalPages": {
            "type": "number",
            "format": "double",
            "description": ""
          }
        },
        "type": "object",
        "required": [
          "results",
          "page",
          "total",
          "totalPages"
        ]
      },
      "SmartAccount": {
        "description": "Smart account product",
        "properties": {
          "id": {
            "type": "string",
            "description": "Primary identifier of the acquirer anticipation"
          },
          "ispb": {
            "type": "string",
            "description": "Smart account ISP number"
          },
          "agency": {
            "type": "string",
            "description": "Smart account agency number"
          },
          "number": {
            "type": "string",
            "description": "Smart account number"
          },
          "verifyingDigit": {
            "type": "string",
            "description": "Smart account verifying digit"
          },
          "type": {
            "type": "string",
            "description": "Smart account type",
            "enum": [
              "CHECKING_ACCOUNT"
            ]
          },
          "isSandbox": {
            "type": "boolean",
            "description": "Indicates if the smart account is a sandbox account"
          }
        },
        "type": "object",
        "required": [
          "id",
          "ispb",
          "agency",
          "number",
          "verifyingDigit",
          "type",
          "isSandbox"
        ],
        "example": {
          "id": "71996b6d-8991-450c-8542-ae59069d1a9d",
          "ispb": "0001020",
          "agency": "1234",
          "number": "123456",
          "verifyingDigit": "7",
          "type": "CHECKING_ACCOUNT",
          "isSandbox": false
        }
      },
      "SmartAccountBalance": {
        "description": "Smart account balance product",
        "properties": {
          "lastUpdatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Balance date"
          },
          "balance": {
            "type": "number",
            "description": "Smart account balance amount"
          },
          "blockedBalance": {
            "type": "number",
            "description": "Smart account blocked balance amount"
          },
          "scheduledBalance": {
            "type": "number",
            "description": "Smart account scheduled balance amount"
          }
        },
        "type": "object",
        "required": [
          "lastUpdatedAt",
          "balance",
          "blockedBalance",
          "scheduledBalance"
        ],
        "example": {
          "lastUpdatedAt": "2023-11-06T15:38:47.861Z",
          "balance": 100.5,
          "blockedBalance": 0,
          "scheduledBalance": 0
        }
      },
      "CreateSmartAccountTransferRequest": {
        "description": "Request with information to create a smart account transfer",
        "properties": {
          "amount": {
            "type": "number",
            "description": "Transfer amount"
          },
          "recipientId": {
            "type": "string",
            "description": "Primary identifier of the recipient associated to the transfer"
          },
          "clientPaymentId": {
            "type": "string",
            "description": "Primary identifier of the client payment associated to the transfer"
          }
        },
        "type": "object",
        "required": [
          "amount",
          "recipientId"
        ]
      },
      "SmartAccountTransfer": {
        "description": "Transfer made with money from a smart account",
        "properties": {
          "id": {
            "type": "string",
            "description": "Primary identifier of the transfer"
          },
          "clientId": {
            "type": "string",
            "description": "Primary identifier of the client associated to the transfer"
          },
          "clientPaymentId": {
            "type": "string",
            "description": "Primary identifier of the client payment associated to the transfer"
          },
          "amount": {
            "type": "number",
            "description": "Transfer amount"
          },
          "status": {
            "type": "string",
            "description": "Transfer status",
            "enum": [
              "IN_PROGRESS",
              "COMPLETED",
              "ERROR"
            ]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Transfer creation date"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Transfer last update date"
          },
          "smartAccount": {
            "$ref": "#/components/schemas/SmartAccount"
          },
          "paymentRecipient": {
            "$ref": "#/components/schemas/PaymentRecipient"
          }
        }
      },
      "CreateSmartAccountRequest": {
        "description": "Create smart account request",
        "properties": {
          "name": {
            "type": "string",
            "description": "Account owner fullName"
          },
          "taxNumber": {
            "type": "string",
            "description": "Account owner tax number (CPF or CNPJ)"
          },
          "email": {
            "type": "string",
            "description": "Account owner email"
          },
          "phoneNumber": {
            "type": "string",
            "description": "Account owner phone"
          },
          "isSandbox": {
            "type": "boolean",
            "description": "Indicates if the smart account is a sandbox account"
          },
          "address": {
            "$ref": "#/components/schemas/SmartAccountAddress"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "taxNumber",
          "email",
          "phoneNumber",
          "address"
        ],
        "example": {
          "id": "71996b6d-8991-450c-8542-ae59069d1a9d",
          "name": "John Doe",
          "taxNumber": "12345678900",
          "email": "john@doe.com",
          "phoneNumber": "+5511999999999",
          "isSandbox": false,
          "address": {
            "addressType": "residential",
            "postalCode": "05404",
            "streetName": "Rua Artur de Azevedo",
            "streetNumber": "1317",
            "city": "São Paulo",
            "state": "SP",
            "isPrimaryAddress": true,
            "isMailingAddress": true
          }
        }
      },
      "SmartAccountAddress": {
        "description": "Smart account owner address",
        "properties": {
          "addressType": {
            "type": "string",
            "description": "Owner address type",
            "enum": [
              "residential",
              "commercial"
            ]
          },
          "postalCode": {
            "type": "string",
            "description": "Owner address postal code"
          },
          "streetName": {
            "type": "string",
            "description": "Owner address street name"
          },
          "streetNumber": {
            "type": "string",
            "description": "Owner address street number"
          },
          "city": {
            "type": "string",
            "description": "Owner address city"
          },
          "state": {
            "type": "string",
            "description": "Owner address state"
          },
          "isPrimaryAddress": {
            "type": "boolean",
            "description": "Indicates if the owner address is the primary one"
          },
          "isMailingAddress": {
            "type": "boolean",
            "description": "Indicates if the owner address is the mailing one"
          }
        },
        "type": "object",
        "required": [
          "city"
        ]
      },
      "PixData": {
        "description": "Payment Intent PIX data",
        "properties": {
          "value": {
            "type": "string",
            "description": "PIX QR raw value"
          },
          "qr": {
            "type": "string",
            "description": "PIX QR image in base64 format"
          }
        },
        "type": "object",
        "required": [
          "value",
          "qr"
        ]
      },
      "Boleto": {
        "description": "Boleto data",
        "properties": {
          "digitableLine": {
            "type": "string",
            "description": "Boleto digitable line"
          },
          "barcode": {
            "type": "string",
            "description": "Boleto barcode"
          },
          "payer": {
            "$ref": "#/components/schemas/BoletoPayer"
          },
          "recipient": {
            "$ref": "#/components/schemas/BoletoRecipient"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "description": "Boleto issue date"
          },
          "dueDate": {
            "type": "string",
            "format": "date-time",
            "description": "Boleto due date"
          },
          "expirationDate": {
            "type": "string",
            "format": "date-time",
            "description": "After this date, the boleto cannot be paid"
          },
          "baseAmount": {
            "type": "number",
            "description": "Boleto original amount, without interests, penalties and discounts"
          },
          "penaltyAmount": {
            "type": "number",
            "description": "Boleto penalty amount. If there is no penalty, it will be returned as zero"
          },
          "interestAmount": {
            "type": "number",
            "description": "Boleto interest amount. If there is no interest, it will be returned as zero"
          },
          "discountAmount": {
            "type": "number",
            "description": "Boleto discount amount. If there is no discounts, it will be returned as zero"
          },
          "totalAmount": {
            "type": "number",
            "description": "Boleto final amount. It is equal to the base amount plus penalties and interests, minus discounts"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the lastest information of this boleto has been retrieved"
          }
        },
        "type": "object",
        "required": [
          "digitableLine",
          "barcode",
          "payer",
          "recipient",
          "date",
          "dueDate",
          "expirationDate",
          "baseAmount",
          "penaltyAmount",
          "discountAmount",
          "totalAmount"
        ]
      },
      "BoletoPayer": {
        "description": "Boleto payer information",
        "properties": {
          "taxNumber": {
            "type": "string",
            "description": "Payer CPF or CNPJ"
          },
          "name": {
            "type": "string",
            "description": "Payer name"
          }
        },
        "type": "object",
        "required": [
          "taxNumber",
          "name"
        ]
      },
      "BoletoRecipient": {
        "description": "Boleto recipient information",
        "properties": {
          "taxNumber": {
            "type": "string",
            "description": "Recipient CPF or CNPJ"
          },
          "name": {
            "type": "string",
            "description": "Recipient name"
          }
        },
        "type": "object",
        "required": [
          "taxNumber",
          "name"
        ]
      },
      "ScheduleTypeSingle": {
        "title": "One time option",
        "description": "Schedule atribute to generate one payment in the future",
        "properties": {
          "type": {
            "type": "string",
            "description": "Scheduled type",
            "enum": [
              "SINGLE"
            ],
            "example": "SINGLE"
          },
          "date": {
            "type": "string",
            "format": "date",
            "example": "2024-06-11"
          }
        },
        "type": "object",
        "required": [
          "type",
          "date"
        ]
      },
      "ScheduleTypeDaily": {
        "title": "Daily option",
        "description": "Schedule atribute to generate daily payments",
        "properties": {
          "type": {
            "type": "string",
            "description": "Scheduled type",
            "enum": [
              "DAILY"
            ],
            "example": "DAILY"
          },
          "startDate": {
            "type": "string",
            "format": "date",
            "example": "2024-06-11"
          },
          "quantity": {
            "type": "number",
            "format": "integer",
            "minimum": 3,
            "example": 3,
            "maximum": 59
          }
        },
        "type": "object",
        "required": [
          "type",
          "startDate",
          "quantity"
        ]
      },
      "ScheduleTypeWeekly": {
        "title": "Weekly option",
        "description": "Schedule atribute to generate weekly payments",
        "properties": {
          "type": {
            "type": "string",
            "description": "Scheduled type",
            "enum": [
              "WEEKLY"
            ],
            "example": "WEEKLY"
          },
          "startDate": {
            "type": "string",
            "format": "date",
            "example": "2024-06-11"
          },
          "dayOfWeek": {
            "type": "string",
            "description": "Day of the week to generate the payment",
            "enum": [
              "SEGUNDA_FEIRA",
              "TERCA_FEIRA",
              "QUARTA_FEIRA",
              "QUINTA_FEIRA",
              "SEXTA_FEIRA",
              "SABADO",
              "DOMINGO"
            ],
            "example": "SEGUNDA_FEIRA"
          },
          "quantity": {
            "type": "number",
            "format": "integer",
            "minimum": 3,
            "example": 3,
            "maximum": 59
          }
        },
        "type": "object",
        "required": [
          "type",
          "startDate",
          "dayOfWeek",
          "quantity"
        ]
      },
      "ScheduleTypeMonthly": {
        "title": "Monthly option",
        "description": "Schedule atribute to generate weekly payments",
        "properties": {
          "type": {
            "type": "string",
            "description": "Scheduled type",
            "enum": [
              "WEEKLY"
            ],
            "example": "WEEKLY"
          },
          "startDate": {
            "type": "string",
            "format": "date",
            "example": "2024-06-11"
          },
          "dayOfMonth": {
            "type": "number",
            "description": "Day of the mont to generate the payment",
            "minimum": 2,
            "maximum": 30,
            "example": 3
          },
          "quantity": {
            "type": "number",
            "format": "integer",
            "minimum": 3,
            "maximum": 23,
            "example": 3
          }
        },
        "type": "object",
        "required": [
          "type",
          "startDate",
          "dayOfMonth",
          "quantity"
        ]
      },
      "ScheduleTypeCustom": {
        "title": "Customized option",
        "description": "Schedule atribute to generate custom payments in the future",
        "properties": {
          "type": {
            "description": "Scheduled type",
            "enum": [
              "CUSTOM"
            ],
            "example": "CUSTOM"
          },
          "dates": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "date",
              "example": "2024-06-11"
            }
          },
          "additionalInformation": {
            "type": "string",
            "description": "Additional information about the custom schedule"
          }
        },
        "type": "object",
        "required": [
          "type",
          "dates"
        ]
      },
      "PageResponseConsents": {
        "description": "",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Consent"
            },
            "description": ""
          },
          "page": {
            "type": "number",
            "format": "double",
            "description": ""
          },
          "total": {
            "type": "number",
            "format": "double",
            "description": ""
          },
          "totalPages": {
            "type": "number",
            "format": "double",
            "description": ""
          }
        },
        "type": "object",
        "required": [
          "results",
          "page",
          "total",
          "totalPages"
        ]
      },
      "Consent": {
        "description": "Item consent information",
        "properties": {
          "id": {
            "type": "string",
            "description": "Consent primary identifier"
          },
          "itemId": {
            "type": "string",
            "description": "Primary identifier of the item associated to the consent"
          },
          "products": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ACCOUNTS",
                "CREDIT_CARDS",
                "TRANSACTIONS",
                "PAYMENT_DATA",
                "INVESTMENTS",
                "INVESTMENTS_TRANSACTIONS",
                "IDENTITY",
                "BROKERAGE_NOTE",
                "OPPORTUNITIES",
                "PORTFOLIO",
                "INCOME_REPORTS",
                "MOVE_SECURITY",
                "LOANS",
                "ACQUIRER_OPERATIONS"
              ]
            },
            "description": "Products to be collected in the connection"
          },
          "openFinancePermissionsGranted": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "REGISTRATION_ALL",
                "REGISTRATION_IDENTIFICATIONS",
                "REGISTRATION_QUALIFICATIONS",
                "REGISTRATION_FINANCIAL_RELATIONS",
                "ACCOUNTS_ALL",
                "ACCOUNTS_LIST",
                "ACCOUNTS_BALANCES",
                "ACCOUNTS_LIMITS",
                "ACCOUNTS_TRANSACTIONS",
                "CREDIT_CARDS_ALL",
                "CREDIT_CARDS_LIST",
                "CREDIT_CARDS_LIMITS",
                "CREDIT_CARDS_TRANSACTIONS",
                "CREDIT_CARDS_BILLS",
                "CREDIT_OPERATIONS_ALL",
                "INVESTMENTS_ALL",
                "EXCHANGES_ALL"
              ]
            },
            "description": "Products consented by the user to be collected"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the consent was given"
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the consent expires. Null if the consent doesn't expire"
          },
          "revokedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the consent was revoked"
          }
        },
        "type": "object",
        "required": [
          "id",
          "itemId",
          "products",
          "createdAt"
        ]
      }
    },
    "x-readme": {
      "explorer-enabled": true,
      "proxy-enabled": true,
      "samples-enabled": true,
      "samples-languages": [
        "curl",
        "node",
        "csharp",
        "java",
        "python",
        "php",
        "ruby",
        "go",
        "r"
      ]
    }
  }
}