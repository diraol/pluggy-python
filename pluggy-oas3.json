{
  "openapi": "3.0.3",
  "info": {
    "title": "Pluggy API",
    "description": "Pluggy's main API to review data and execute connectors",
    "license": {
      "name": "MIT"
    },
    "contact": {
      "email": "hello@pluggy.ai",
      "name": "Pluggy",
      "url": "https://pluggy.ai"
    },
    "version": "1.0.0"
  },
  "tags": [
    {
      "name": "Auth",
      "description": "Authentication endpoints for API key generation and connect tokens"
    },
    {
      "name": "Connector",
      "description": "Financial institution connector management"
    },
    {
      "name": "Items",
      "description": "Item management for syncing financial data"
    },
    {
      "name": "Consent",
      "description": "User consent management for data access"
    },
    {
      "name": "Account",
      "description": "Bank account information and management"
    },
    {
      "name": "Transaction",
      "description": "Financial transaction data and operations"
    },
    {
      "name": "Investment",
      "description": "Investment portfolio and asset management"
    },
    {
      "name": "Identity",
      "description": "User identity verification and data"
    },
    {
      "name": "Webhook",
      "description": "Webhook configuration and management"
    },
    {
      "name": "Category",
      "description": "Transaction categorization and rules"
    },
    {
      "name": "Loan",
      "description": "Loan information and management"
    },
    {
      "name": "Bill",
      "description": "Credit card bill information"
    },
    {
      "name": "Payment Customer",
      "description": "Payment customer management"
    },
    {
      "name": "Payment Recipient",
      "description": "Payment recipient management"
    },
    {
      "name": "Payment Request",
      "description": "Payment request creation and management"
    },
    {
      "name": "Automatic PIX",
      "description": "Automatic PIX payment scheduling and management"
    },
    {
      "name": "Payment Schedule",
      "description": "Payment scheduling operations"
    },
    {
      "name": "Payment Intent",
      "description": "Payment intent processing"
    },
    {
      "name": "Smart Transfer",
      "description": "Smart transfer functionality"
    },
    {
      "name": "Boleto Management",
      "description": "Boleto payment management"
    }
  ],
  "paths": {
    "/auth": {
      "post": {
        "operationId": "auth-create",
        "summary": "Create API Key",
        "description": "Validate clientId and clientSecret and return an API Key",
        "tags": [
          "Auth"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API Key generated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "examples": {
                  "clientKeysUnauthorized": {
                    "summary": "Client id and secret are invalid",
                    "value": {
                      "code": 401,
                      "codeDescription": "CLIENT_KEYS_UNAUTHORIZED",
                      "message": "Client keys are invalid"
                    }
                  },
                  "clientDisabled": {
                    "summary": "Client is disabled",
                    "value": {
                      "code": 401,
                      "codeDescription": "CLIENT_DISABLED",
                      "message": "Client is disabled"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/connect_token": {
      "post": {
        "operationId": "connect-token-create",
        "summary": "Create Connect Token",
        "responses": {
          "200": {
            "description": "Created connect token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectTokenResponse"
                }
              }
            }
          },
          "403": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotAuthenticatedResponse"
                }
              }
            }
          },
          "404": {
            "description": "Related itemId to update not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 404,
                  "codeDescription": "ITEM_NOT_FOUND",
                  "message": "item not found"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                }
              }
            }
          }
        },
        "description": "Creates a connect token",
        "tags": [
          "Auth"
        ],
        "requestBody": {
          "description": "Create connect token payload",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectTokenRequest"
              }
            }
          }
        },
        "security": [
          {
            "default": []
          }
        ],
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "code": "const pluggy = require('pluggy-sdk');\nconst client = new pluggy.PluggyClient({\n  clientId: 'YOUR_CLIENT_ID',\n  clientSecret: 'YOUR_CLIENT_SECRET',\n});\nclient\n  .createConnectToken()\n  .then(({ accessToken }) => {\n    console.log(accessToken);\n  });"
            },
            {
              "language": "java",
              "code": "PluggyClient pluggyClient = PluggyClient.builder()\n  .clientIdAndSecret('your_client_id', 'your_secret')\n  .baseUrl('https://api.pluggy.ai')\n  .build();\nResponse<ConnectTokenResponse> connectTokenResponse = pluggyClient.service().createConnectToken().execute();"
            },
            {
              "language": "csharp",
              "code": "PluggyClient pluggyClient = new PluggyClient('YOUR_PLUGGY_API_KEY');\nConnectTokenResponse tokenResponse = await pluggyClient.CreateConnectToken();"
            }
          ]
        }
      }
    },
    "/connectors": {
      "get": {
        "operationId": "connectors-list",
        "summary": "List",
        "description": "This endpoint retrieves all available connectors.",
        "responses": {
          "200": {
            "description": "Retrieve a list of all connectors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectorListResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Connector"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "A list of countries of connectors to filter.",
            "example": "[\"BR\"]",
            "in": "query",
            "name": "countries",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "BR"
                ]
              }
            }
          },
          {
            "description": "A list of types of connectors to filter.",
            "example": "[\"PERSONAL_BANK\", \"BUSINESS_BANK\", \"INVESTMENT\", \"INVOICE\", \"TELECOMMUNICATION\", \"OTHER\"]",
            "in": "query",
            "name": "types",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "PERSONAL_BANK",
                  "BUSINESS_BANK",
                  "INVESTMENT",
                  "INVOICE",
                  "TELECOMMUNICATION",
                  "OTHER"
                ]
              }
            }
          },
          {
            "description": "Name alike look up of the connector",
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Include sandbox connectors if set to true (default: false).",
            "in": "query",
            "name": "sandbox",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Include health details about latest connections and percentage of errors (connection rate)",
            "in": "query",
            "name": "healthDetails",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Filter connectors by the `isOpenFinance` attribute. If not sent, it won't filter.",
            "in": "query",
            "name": "isOpenFinance",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Filter connectors by the `supportsPaymentInitiation` attribute. If not sent, it won't filter.",
            "in": "query",
            "name": "supportsPaymentInitiation",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "code": "const pluggy = require('pluggy-sdk');\nconst client = new pluggy.PluggyClient({\n  clientId: 'YOUR_CLIENT_ID',\n  clientSecret: 'YOUR_CLIENT_SECRET',\n});\n\nclient\n  .fetchConnectors()\n  .then(({ results: connectors }) => {\n    console.log(connectors);\n  });"
            },
            {
              "language": "java",
              "code": "PluggyClient pluggyClient = PluggyClient.builder()\n  .clientIdAndSecret(\"your_client_id\", \"your_secret\")\n  .baseUrl(\"https://api.pluggy.ai\")\n  .build();\nResponse<ConnectorsResponse> connectorsResponse = pluggyClient.service().getConnectors().execute();"
            },
            {
              "language": "csharp",
              "code": "PluggyClient pluggyClient = new PluggyClient(\"YOUR_PLUGGY_API_KEY\");\nList<Connector> connectors = await pluggyClient.FetchConnectors();"
            }
          ]
        }
      }
    },
    "/connectors/{id}": {
      "get": {
        "operationId": "connector-retrieve",
        "summary": "Retrieve",
        "responses": {
          "200": {
            "description": "Retrieve a connector.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Connector"
                }
              }
            }
          },
          "404": {
            "description": "Connector not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 404,
                  "codeDescription": "CONNECTOR_NOT_FOUND",
                  "message": "connector not found"
                }
              }
            }
          }
        },
        "description": "This endpoint retrieves a specific connector.",
        "tags": [
          "Connector"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Connector primary identifier",
            "in": "path",
            "name": "id",
            "example": 201,
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "description": "Include health details about latest connections and percentage of errors (connection rate)",
            "in": "query",
            "name": "healthDetails",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "code": "const pluggy = require('pluggy-sdk');\nconst client = new pluggy.PluggyClient({\n  clientId: 'YOUR_CLIENT_ID',\n  clientSecret: 'YOUR_CLIENT_SECRET',\n});\n\nclient\n  .fetchConnector(201)\n  .then((connector) => {\n    console.log(connector);\n  });"
            },
            {
              "language": "java",
              "code": "PluggyClient pluggyClient = PluggyClient.builder()\n  .clientIdAndSecret(\"your_client_id\", \"your_secret\")\n  .baseUrl(\"https://api.pluggy.ai\")\n  .build();\nResponse<ConnectorResponse> connectorResponse = pluggyClient.service().getConnector(201).execute();"
            },
            {
              "language": "csharp",
              "code": "PluggyClient pluggyClient = new PluggyClient(\"YOUR_PLUGGY_API_KEY\");\nConnector connector = await pluggyClient.FetchConnector(201);"
            }
          ]
        }
      }
    },
    "/connectors/{id}/validate": {
      "post": {
        "operationId": "connectors-validate",
        "summary": "Validate",
        "description": "Validates a connector parameters usign the connector validation",
        "responses": {
          "200": {
            "description": "Connector validation response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParameterValidationResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Connector"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Connector's primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "number",
              "format": "double"
            },
            "example": 2
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ItemParameter"
              }
            }
          },
          "description": "Connector's input credentials in a key-value object.",
          "required": true
        },
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "code": "const pluggy = require('pluggy-sdk');\nconst client = new pluggy.PluggyClient({\n  clientId: 'YOUR_CLIENT_ID',\n  clientSecret: 'YOUR_CLIENT_SECRET',\n});\n\nclient\n  .validateParameters(201, { user: 'my-user' })\n  .then((validationResult) => {\n    console.log(validationResult);\n  });"
            },
            {
              "language": "csharp",
              "code": "PluggyClient pluggyClient = new PluggyClient(\"YOUR_PLUGGY_API_KEY\");\nValidationResult validationResult = await pluggyClient.ValidateCredentials(201, parameters);"
            }
          ]
        }
      }
    },
    "/items": {
      "post": {
        "operationId": "items-create",
        "summary": "Create",
        "responses": {
          "200": {
            "description": "Created item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Item"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemCreationErrorResponse"
                },
                "examples": {
                  "missingMainParameter": {
                    "summary": "Missing main parameter",
                    "value": {
                      "message": "Connector parameters do not match validation rules",
                      "code": 400,
                      "codeDescription": "CONNECTOR_VALIDATION_ERROR",
                      "details": [
                        {
                          "code": "001",
                          "parameter": "user",
                          "message": "user parameter is required"
                        }
                      ]
                    }
                  },
                  "missingMFA": {
                    "summary": "Missing MFA on parameters",
                    "value": {
                      "message": "Connector parameters do not match validation rules",
                      "code": 400,
                      "codeDescription": "CONNECTOR_VALIDATION_ERROR",
                      "details": [
                        {
                          "code": "001",
                          "parameter": "token",
                          "message": "token parameter is required"
                        }
                      ]
                    }
                  },
                  "itemUserAlreadyExists": {
                    "summary": "Item user already exists, avoid duplicates detected.",
                    "value": {
                      "message": "There are other items with the same credentials, you can't create a new one",
                      "codeDescription": "ITEM_USER_ALREADY_EXISTS",
                      "items": [
                        "d0f8a8c0-e8e3-11e9-b210-d663bd873d93",
                        "d0f8a8c0-e8e3-11e9-b210-d663bd873d94"
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "There is a conflict creating an item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 409,
                  "codeDescription": "ITEM_CREATION_LIMIT_EXCEEDED",
                  "message": "Client exceeded item creation limit (100 items) for the current subscription level.",
                  "data": {
                    "itemsLimit": 100
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 500,
                  "codeDescription": "INTERNAL_SERVER_ERROR",
                  "message": "Internal Server Error"
                }
              }
            }
          }
        },
        "description": "Creates a item and syncs all the products with the financial institution, using as credentials the sent parameters.",
        "tags": [
          "Items"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateItem"
              },
              "examples": {
                "Plain parameters": {
                  "value": {
                    "connectorId": 2,
                    "parameters": {
                      "user": "user-ok",
                      "password": "password-ok"
                    },
                    "webhookUrl": "https://example.com/webhook"
                  }
                },
                "Encrypted parameters": {
                  "value": {
                    "connectorId": 2,
                    "parameters": "encrypted-parameters",
                    "webhookUrl": "https://example.com/webhook"
                  }
                }
              }
            }
          },
          "required": true
        },
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "code": "const pluggy = require('pluggy-sdk');\nconst client = new pluggy.PluggyClient({\n  clientId: 'YOUR_CLIENT_ID',\n  clientSecret: 'YOUR_CLIENT_SECRET',\n});\nclient\n  .createItem(2, { user: 'user-ok', password: 'password-ok' })\n  .then((item) => {\n    console.log(item);\n  });"
            },
            {
              "language": "java",
              "code": "PluggyClient pluggyClient = PluggyClient.builder()\n  .clientIdAndSecret('your_client_id', 'your_secret')\n  .baseUrl('https://api.pluggy.ai')\n  .build();\nParametersMap parametersMap = ParametersMap.map(\"user\", \"user-ok\")\n  .with(\"password\", \"password-ok\");\nCreateItemRequest createItemRequest = new CreateItemRequest(connectorId, parametersMap);\nResponse<ItemResponse> item = pluggyClient.service().createItem(createItemRequest).execute();"
            },
            {
              "language": "csharp",
              "code": "PluggyClient pluggyClient = new PluggyClient('YOUR_PLUGGY_API_KEY');\nItemParameters createItemRequest = new ItemParameters(connectorId, credentials, options);\nItem item = await pluggyClient.CreateItem(createItemRequest);"
            }
          ]
        }
      }
    },
    "/items/{id}": {
      "get": {
        "operationId": "items-retrieve",
        "summary": "Retrieve",
        "responses": {
          "200": {
            "description": "Item was retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Item"
                }
              }
            }
          },
          "404": {
            "description": "Item not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 404,
                  "codeDescription": "ITEM_NOT_FOUND",
                  "message": "item not found"
                }
              }
            }
          },
          "500": {
            "description": "Server Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                }
              }
            }
          }
        },
        "description": "Recovers the item resource by its id",
        "tags": [
          "Items"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Item primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0f8a8c0-e8e3-11e9-b210-d663bd873d93"
          }
        ],
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "code": "const pluggy = require('pluggy-sdk');\nconst client = new pluggy.PluggyClient({\n  clientId: 'YOUR_CLIENT_ID',\n  clientSecret: 'YOUR_CLIENT_SECRET',\n});\nclient\n  .fetchItem('YOUR_ITEM_ID')\n  .then((item) => {\n    console.log(item);\n  });"
            },
            {
              "language": "java",
              "code": "PluggyClient pluggyClient = PluggyClient.builder()\n  .clientIdAndSecret('your_client_id', 'your_secret')\n  .baseUrl('https://api.pluggy.ai')\n  .build();\nResponse<ItemResponse> item = pluggyClient.service().getItem(\"YOUR_ITEM_ID\").execute();"
            },
            {
              "language": "csharp",
              "code": "PluggyClient pluggyClient = new PluggyClient('YOUR_PLUGGY_API_KEY');\nItem item = await pluggyClient.FetchItem(\"YOUR_ITEM_ID\");"
            }
          ]
        }
      },
      "patch": {
        "operationId": "items-update",
        "summary": "Update",
        "responses": {
          "200": {
            "description": "Update the item was successful, new sync was triggered",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Item"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "examples": {
                  "repeatedMFA": {
                    "summary": "MFA should be updated",
                    "value": {
                      "code": 400,
                      "codeDescription": "MFA_PARAMERTER_WAS_ALREADY_USED_ERROR",
                      "message": "MFA parameter has to be updated from last execution"
                    }
                  },
                  "missingMFA": {
                    "summary": "MFA parameter was not sent",
                    "value": {
                      "message": "The parameter 'token' is required to be renewed for item update.",
                      "code": 400,
                      "codeDescription": "CONNECTOR_REQUIRED_PARAMETER_VALIDATION_ERROR",
                      "details": [
                        {
                          "code": "001",
                          "message": "Parameter 'token' is required",
                          "parameter": "token"
                        }
                      ],
                      "data": {
                        "parameter": "token"
                      }
                    }
                  },
                  "tooManyErrors": {
                    "summary": "There were more than 5 consecutive errors",
                    "value": {
                      "code": 400,
                      "codeDescription": "TOO_MANY_CONSECUTIVE_ERRORS",
                      "message": "There has been more than 5 failing syncronizations, please contact support"
                    }
                  },
                  "tooManyConsecutiveLoginFailures": {
                    "summary": "There were at least 2 consecutive login errors",
                    "value": {
                      "code": 400,
                      "codeDescription": "TOO_MANY_CONSECUTIVE_LOGIN_FAILURES",
                      "message": "must wait at least {readableBackoffTime} after {maxConsecutiveFailedLoginAttempts} consecutive login errors, last attempt was at {lastExecutionEndedAt} (can retry after: {canRetryAfterDate})",
                      "data": {
                        "readableBackoffTime": "15 minutes",
                        "maxConsecutiveFailedLoginAttempts": 2,
                        "lastExecutionEndedAt": "2020-01-01T00:00:00.000Z",
                        "canRetryAfterDate": "2020-01-01T00:15:00.000Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Item not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 404,
                  "codeDescription": "ITEM_NOT_FOUND",
                  "message": "item not found"
                }
              }
            }
          },
          "409": {
            "description": "There is a conflict updating the item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 409,
                  "codeDescription": "CLIENT_IS_UPDATING_BEFORE_ALLOWED_FREQUENCY",
                  "message": "Client updates on this item are allowed at most every {minUpdateFrequencyAllowedInHours} hours. Last update was at {lastUpdatedAt}",
                  "data": {
                    "minUpdateFrequencyAllowedInHours": 24,
                    "lastUpdatedAt": "2020-01-01T00:00:00.000Z"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                }
              }
            }
          }
        },
        "description": "Triggers new syncronization for the Item, optionally updating the stored credentials.",
        "tags": [
          "Items"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Item primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0f8a8c0-e8e3-11e9-b210-d663bd873d93"
          }
        ],
        "requestBody": {
          "description": "Update item request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateItem"
              },
              "examples": {
                "Plain parameters": {
                  "value": {
                    "webhookUrl": "https://example.com/webhook",
                    "clientUserId": "My User App Id",
                    "parameters": {
                      "user": "user-ok",
                      "password": "password-ok"
                    }
                  }
                },
                "Encrypted parameters": {
                  "value": {
                    "webhookUrl": "https://example.com/webhook",
                    "clientUserId": "My User App Id",
                    "parameters": "encrypted-parameters"
                  }
                }
              }
            }
          }
        },
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "code": "const pluggy = require('pluggy-sdk');\nconst client = new pluggy.PluggyClient({\n  clientId: 'YOUR_CLIENT_ID',\n  clientSecret: 'YOUR_CLIENT_SECRET',\n});\nclient\n  .updateItem('YOUR_ITEM_ID')\n  .then((item) => {\n    console.log(item);\n  });"
            },
            {
              "language": "java",
              "code": "PluggyClient pluggyClient = PluggyClient.builder()\n  .clientIdAndSecret('your_client_id', 'your_secret')\n  .baseUrl('https://api.pluggy.ai')\n  .build();\nResponse<ItemResponse> item = pluggyClient.service().updateItem(\"YOUR_ITEM_ID\").execute();"
            },
            {
              "language": "csharp",
              "code": "PluggyClient pluggyClient = new PluggyClient('YOUR_PLUGGY_API_KEY');\nItem item = await pluggyClient.UpdateItem(\"YOUR_ITEM_ID\");"
            }
          ]
        }
      },
      "delete": {
        "operationId": "items-delete",
        "summary": "Delete",
        "description": "Delete the item by its primary identifier",
        "responses": {
          "200": {
            "description": "Item was deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ICountResponse"
                }
              }
            }
          },
          "404": {
            "description": "Item not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 404,
                  "codeDescription": "ITEM_NOT_FOUND",
                  "message": "item not found"
                }
              }
            }
          },
          "500": {
            "description": "Server Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Items"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Item primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0f8a8c0-e8e3-11e9-b210-d663bd873d93"
          }
        ],
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "code": "const pluggy = require('pluggy-sdk');\nconst client = new pluggy.PluggyClient({\n  clientId: 'YOUR_CLIENT_ID',\n  clientSecret: 'YOUR_CLIENT_SECRET',\n});\nclient\n  .deleteItem('YOUR_ITEM_ID');"
            },
            {
              "language": "java",
              "code": "PluggyClient pluggyClient = PluggyClient.builder()\n  .clientIdAndSecret('your_client_id', 'your_secret')\n  .baseUrl('https://api.pluggy.ai')\n  .build();\nResponse<DeleteItemResponse> item = pluggyClient.service().deleteItem(\"YOUR_ITEM_ID\").execute();"
            },
            {
              "language": "csharp",
              "code": "PluggyClient pluggyClient = new PluggyClient('YOUR_PLUGGY_API_KEY');\nawait pluggyClient.DeleteItem(\"YOUR_ITEM_ID\");"
            }
          ]
        }
      }
    },
    "/items/{id}/mfa": {
      "post": {
        "operationId": "items-send-mfa",
        "summary": "Send MFA",
        "description": "When item is Waiting User Input, this method allows to submit multi-factor authentication value",
        "responses": {
          "200": {
            "description": "Parameter was sent correctly",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Item"
                }
              }
            }
          },
          "404": {
            "description": "Item not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 404,
                  "codeDescription": "ITEM_NOT_FOUND",
                  "message": "item not found"
                }
              }
            }
          },
          "500": {
            "description": "Server Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Items"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Item primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0e8448e-0156-4b4a-ae6c-3e2a6d9bff5c"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {},
                "description": "Request with the MFA value provided by the user, in the format [name]:[value]",
                "additionalProperties": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "code": "const pluggy = require('pluggy-sdk');\nconst client = new pluggy.PluggyClient({\n  clientId: 'YOUR_CLIENT_ID',\n  clientSecret: 'YOUR_CLIENT_SECRET',\n});\nclient\n  .updateItemMFA('YOUR_ITEM_ID', { key: 'value' })\n.then((item) => console.log(item));"
            },
            {
              "language": "java",
              "code": "PluggyClient pluggyClient = PluggyClient.builder()\n  .clientIdAndSecret('your_client_id', 'your_secret')\n  .baseUrl('https://api.pluggy.ai')\n  .build();\nResponse<ItemResponse> item = pluggyClient.service().updateItemSendMfa(\"YOUR_ITEM_ID\", new UpdateItemMfaRequest(\"key\", \"value\")).execute();"
            },
            {
              "language": "csharp",
              "code": "PluggyClient pluggyClient = new PluggyClient('YOUR_PLUGGY_API_KEY');\nvar parameter = new ItemParameter(\"key\", \"value\");\nItem item = await pluggyClient.UpdateItemMFA(\"YOUR_ITEM_ID\", new List<ItemParameter> { parameter });"
            }
          ]
        }
      }
    },
    "/items/{id}/disable-auto-sync": {
      "patch": {
        "operationId": "items-disable-autosync",
        "summary": "Disable item auto sync",
        "description": "When client disables auto sync, the item will not be updated automatically anymore, until the client force an item update.",
        "responses": {
          "200": {
            "description": "Item auto sync was disabled",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Item"
                }
              }
            }
          },
          "404": {
            "description": "Item not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 404,
                  "codeDescription": "ITEM_NOT_FOUND",
                  "message": "item not found"
                }
              }
            }
          },
          "500": {
            "description": "Server Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Items"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Item primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0e8448e-0156-4b4a-ae6c-3e2a6d9bff5c"
          }
        ]
      }
    },
    "/consents": {
      "get": {
        "operationId": "consents-list",
        "summary": "List",
        "description": "Recovers all consents given to the item provided",
        "responses": {
          "200": {
            "description": "Retrieve a list of all consents given to an item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageResponseConsents"
                },
                "examples": {
                  "response": {
                    "value": {
                      "total": 1,
                      "totalPages": 1,
                      "page": 1,
                      "results": [
                        {
                          "id": "71996b6d-8991-450c-8542-ae59069d1a9d",
                          "itemId": "9aab8d24-c89b-4b0e-8974-7dd5614686e4",
                          "products": [
                            "ACCOUNTS",
                            "IDENTITY"
                          ],
                          "openFinancePermissionsGranted": [
                            "ACCOUNTS_ALL",
                            "REGISTRATION_ALL"
                          ],
                          "createdAt": "2023-10-02T03:00:00.000Z",
                          "expiresAt": "2024-10-02T03:00:00.000Z",
                          "revokedAt": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "message": "itemId should not be null or undefined,itemId must be a UUID",
                  "code": 400
                }
              }
            }
          },
          "500": {
            "description": "Server Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Consent"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Item primary identifier",
            "in": "query",
            "name": "itemId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0f8a8c0-e8e3-11e9-b210-d663bd873d93"
          }
        ]
      }
    },
    "/consents/{id}": {
      "get": {
        "operationId": "consent-retrieve",
        "summary": "Retrieve",
        "description": "Recovers the consent resource by it's id",
        "responses": {
          "200": {
            "description": "Retrieve a consent.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Consent"
                }
              }
            }
          },
          "404": {
            "description": "Consent not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 404,
                  "codeDescription": "CONSENT_NOT_FOUND",
                  "message": "Consent not found"
                }
              }
            }
          },
          "500": {
            "description": "Server Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Consent"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Consent primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "6ec156fe-e8ac-4d9a-a4b3-7770529ab01c"
          }
        ]
      }
    },
    "/accounts": {
      "get": {
        "operationId": "accounts-list",
        "summary": "List",
        "description": "Recovers all accounts collected for the item provided",
        "responses": {
          "200": {
            "description": "Retrieve a list of all accounts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "page": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "total": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "totalPages": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Account"
                      },
                      "description": "List of retrieved accounts"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "page": 1,
                      "total": 2,
                      "totalPages": 1,
                      "results": [
                        {
                          "id": "a658c848-e475-457b-8565-d1fffba127c4",
                          "type": "BANK",
                          "subtype": "CHECKING_ACCOUNT",
                          "number": "0001/12345-0",
                          "name": "Conta Corrente",
                          "marketingName": "GOLD Conta Corrente",
                          "balance": 120950,
                          "itemId": "a0922d6f-2007-4169-a181-b961500608db",
                          "taxNumber": "416.799.495-00",
                          "owner": "John Doe",
                          "currencyCode": "BRL",
                          "bankData": {
                            "transferNumber": "0001/12345-0",
                            "closingBalance": 120950,
                            "automaticallyInvestedBalance": 100,
                            "overdraftContractedLimit": 0,
                            "overdraftUsedLimit": 0,
                            "unarrangedOverdraftAmount": 0
                          }
                        },
                        {
                          "id": "a658c848-e475-457b-8565-d1fffba127c4",
                          "type": "CREDIT",
                          "subtype": "CREDIT_CARD",
                          "number": "xxxx8670",
                          "name": "Mastercard Black",
                          "marketingName": "PLUGGY UNICLASS MASTERCARD BLACK",
                          "balance": 120950,
                          "itemId": "a0922d6f-2007-4169-a181-b961500608db",
                          "taxNumber": "416.799.495-00",
                          "owner": "John Doe",
                          "currencyCode": "BRL",
                          "creditData": {
                            "level": "BLACK",
                            "brand": "MASTERCARD",
                            "balanceCloseDate": "2022-01-03",
                            "balanceDueDate": "2022-01-03",
                            "availableCreditLimit": 200000.0,
                            "balanceForeignCurrency": 0,
                            "minimumPayment": 16190.0,
                            "creditLimit": 300000.0,
                            "status": "ACTIVE",
                            "holderType": "MAIN"
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Account"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Item primary identifier",
            "in": "query",
            "name": "itemId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0f8a8c0-e8e3-11e9-b210-d663bd873d93"
          },
          {
            "description": "Parameter to filter between bank accounts and credit accounts",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "BANK",
                "CREDIT"
              ]
            },
            "example": "BANK"
          }
        ],
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "code": "const pluggy = require('pluggy-sdk');\nconst client = new pluggy.PluggyClient({\n  clientId: 'YOUR_CLIENT_ID',\n  clientSecret: 'YOUR_CLIENT_SECRET',\n});\n\nclient\n  .fetchAccounts('YOUR_ITEM_ID')\n  .then(({ results: accounts }) => {\n    console.log(accounts);\n  });"
            },
            {
              "language": "java",
              "code": "PluggyClient pluggyClient = PluggyClient.builder()\n  .clientIdAndSecret('your_client_id', 'your_secret')\n  .baseUrl('https://api.pluggy.ai')\n  .build();\nResponse<AccountsResponse> accountsResponse = pluggyClient.service().getAccounts('your_item_id').execute();"
            },
            {
              "language": "csharp",
              "code": "PluggyClient pluggyClient = new PluggyClient('YOUR_PLUGGY_API_KEY');\nPageResults<Account> accountsResponse = await pluggyClient.FetchAccounts('YOUR_ITEM_ID');"
            }
          ]
        }
      }
    },
    "/accounts/{id}": {
      "get": {
        "operationId": "accounts-retrieve",
        "summary": "Retrieve",
        "description": "Recovers the account resource by its id",
        "responses": {
          "200": {
            "description": "Retrieve an account.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                },
                "examples": {
                  "bank": {
                    "value": {
                      "id": "a658c848-e475-457b-8565-d1fffba127c4",
                      "type": "BANK",
                      "subtype": "CHECKING_ACCOUNT",
                      "number": "0001/12345-0",
                      "name": "Conta Corrente",
                      "marketingName": "GOLD Conta Corrente",
                      "balance": 120950,
                      "itemId": "a0922d6f-2007-4169-a181-b961500608db",
                      "taxNumber": "416.799.495-00",
                      "owner": "John Doe",
                      "currencyCode": "BRL",
                      "bankData": {
                        "transferNumber": "0001/12345-0",
                        "closingBalance": 120950,
                        "automaticallyInvestedBalance": null,
                        "overdraftContractedLimit": 0,
                        "overdraftUsedLimit": 0,
                        "unarrangedOverdraftAmount": 0
                      }
                    }
                  },
                  "credit": {
                    "value": {
                      "id": "a658c848-e475-457b-8565-d1fffba127c4",
                      "type": "CREDIT",
                      "subtype": "CREDIT_CARD",
                      "number": "xxxx8670",
                      "name": "Mastercard Black",
                      "marketingName": "PLUGGY UNICLASS MASTERCARD BLACK",
                      "balance": 120950,
                      "itemId": "a0922d6f-2007-4169-a181-b961500608db",
                      "taxNumber": "416.799.495-00",
                      "owner": "John Doe",
                      "currencyCode": "BRL",
                      "creditData": {
                        "level": "BLACK",
                        "brand": "MASTERCARD",
                        "balanceCloseDate": "2022-01-03",
                        "balanceDueDate": "2022-01-03",
                        "availableCreditLimit": 200000.0,
                        "balanceForeignCurrency": 0,
                        "minimumPayment": 16190.0,
                        "creditLimit": 300000.0,
                        "status": "ACTIVE",
                        "holderType": "MAIN"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Account not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 404,
                  "codeDescription": "ACCOUNT_NOT_FOUND",
                  "message": "account not found"
                }
              }
            }
          },
          "500": {
            "description": "Server Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Account"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Account primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "a658c848-e475-457b-8565-d1fffba127c4"
          }
        ],
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "code": "const pluggy = require('pluggy-sdk');\nconst client = new pluggy.PluggyClient({\n  clientId: 'YOUR_CLIENT_ID',\n  clientSecret: 'YOUR_CLIENT_SECRET',\n});\n\nclient\n  .fetchAccount('ACCOUNT_ID')\n  .then((account) => {\n    console.log(account);\n  });"
            },
            {
              "language": "java",
              "code": "PluggyClient pluggyClient = PluggyClient.builder()\n  .clientIdAndSecret('your_client_id', 'your_secret')\n  .baseUrl('https://api.pluggy.ai')\n  .build();\nAccount account = pluggyClient.service().getAccount(\"ACCOUNT_ID\").execute();"
            },
            {
              "language": "csharp",
              "code": "PluggyClient pluggyClient = new PluggyClient('YOUR_PLUGGY_API_KEY');\nAccount account = await pluggyClient.FetchAccount(\"ACCOUNT_ID\");"
            }
          ]
        }
      }
    },
    "/accounts/{id}/statements": {
      "get": {
        "operationId": "account-statements-list",
        "summary": "List account statements",
        "description": "Recovers all statements collected for the account provided",
        "responses": {
          "200": {
            "description": "Retrieve a list of all statements for an account",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "total",
                    "totalPages",
                    "page",
                    "results"
                  ],
                  "properties": {
                    "total": {
                      "type": "number"
                    },
                    "totalPages": {
                      "type": "number"
                    },
                    "page": {
                      "type": "number"
                    },
                    "results": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "id",
                          "monthYear",
                          "url"
                        ],
                        "properties": {
                          "id": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "monthYear": {
                            "type": "string"
                          },
                          "url": {
                            "type": "string",
                            "description": "Signed URL to the statement file, this url is valid for 30 minutes"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "total": 2,
                      "totalPages": 1,
                      "page": 1,
                      "results": [
                        {
                          "id": "a8534c85-53ce-4f21-94d7-50e9d2ee4957",
                          "monthYear": "01-2025",
                          "url": "signed-aws-url"
                        },
                        {
                          "id": "05c693bf-c196-47ea-a28c-8251d6bb8a06",
                          "monthYear": "02-2025",
                          "url": "signed-aws-url"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "message": "accountId should not be null or undefined,accountId must be a UUID",
                  "code": 400
                }
              }
            }
          },
          "500": {
            "description": "Server Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Account"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Account primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "a658c848-e475-457b-8565-d1fffba127c4"
          }
        ],
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "code": "const pluggy = require('pluggy-sdk');\nconst client = new pluggy.PluggyClient({\n  clientId: 'YOUR_CLIENT_ID',\n  clientSecret: 'YOUR_CLIENT_SECRET',\n});\n\nclient\n  .fetchAccountStatements('ACCOUNT_ID')\n  .then(({ results: statements }) => {\n    console.log(statements);\n  });"
            }
          ]
        }
      }
    },
    "/transactions": {
      "get": {
        "operationId": "transactions-list",
        "summary": "List",
        "description": "Recovers all transactions collected for the acount provided",
        "responses": {
          "200": {
            "description": "Retrieve a list of all transactions for an account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageResponseTransactions"
                },
                "examples": {
                  "response": {
                    "value": {
                      "total": 8,
                      "totalPages": 1,
                      "page": 1,
                      "results": [
                        {
                          "id": "a8534c85-53ce-4f21-94d7-50e9d2ee4957",
                          "description": "* PROV * COMPRA TESOURO DIRETO CLIENTES",
                          "descriptionRaw": "* PROV * COMPRA TESOURO DIRETO CLIENTES",
                          "currencyCode": "BRL",
                          "amount": -212.45,
                          "date": "2020-10-15T00:00:00.000Z",
                          "balance": 4439.4,
                          "category": "Fixed Income Investment",
                          "accountId": "562b795d-1653-429f-be86-74ead9502813",
                          "providerCode": null,
                          "status": "POSTED",
                          "paymentData": null,
                          "type": "DEBIT",
                          "providerId": null
                        },
                        {
                          "id": "05c693bf-c196-47ea-a28c-8251d6bb8a06",
                          "description": "PAGO NETFLIX SERV",
                          "descriptionRaw": "PAGO NETFLIX SERV",
                          "currencyCode": "USD",
                          "amount": -58,
                          "amountInAccountCurrency": -298.19,
                          "date": "2020-10-15T00:00:00.000Z",
                          "balance": 4651.85,
                          "category": "Video streaming",
                          "accountId": "562b795d-1653-429f-be86-74ead9502813",
                          "providerCode": null,
                          "status": "POSTED",
                          "paymentData": null,
                          "type": "DEBIT",
                          "providerId": null,
                          "merchant": {
                            "name": "Netflix",
                            "businessName": "NETFLIX ENTRETENIMENTO BRASIL LTDA.",
                            "cnpj": "00000000000000",
                            "category": "Video streaming",
                            "cnae": "5911100"
                          }
                        },
                        {
                          "id": "97536285-cc22-4a5a-9d05-f5fe24410d0c",
                          "description": "* PROV * DEVOLUÇÃO DE MARGEM",
                          "descriptionRaw": "* PROV * DEVOLUÇÃO DE MARGEM",
                          "currencyCode": "BRL",
                          "amount": 2482.26,
                          "date": "2020-10-15T00:00:00.000Z",
                          "balance": 4950.04,
                          "category": "Margin Withdrawn",
                          "accountId": "562b795d-1653-429f-be86-74ead9502813",
                          "providerCode": null,
                          "status": "POSTED",
                          "paymentData": null,
                          "type": "CREDIT",
                          "providerId": null
                        },
                        {
                          "id": "8caf328b-4528-4de6-b931-10639d0084c5",
                          "description": "LIQUIDO DAS OPERAÇÕES BMF PR. 14/10/2020 NC. 870947",
                          "descriptionRaw": "LIQUIDO DAS OPERAÇÕES BMF PR. 14/10/2020 NC. 870947",
                          "currencyCode": "BRL",
                          "amount": -1.06,
                          "date": "2020-10-14T00:00:00.000Z",
                          "balance": 2467.78,
                          "category": "Investment",
                          "accountId": "562b795d-1653-429f-be86-74ead9502813",
                          "providerCode": null,
                          "status": "POSTED",
                          "paymentData": null,
                          "type": "DEBIT",
                          "providerId": null
                        },
                        {
                          "id": "ff9ed929-edc4-408c-a959-d51f79ab1814",
                          "description": "MERCADOLIVRE*2PRODUTOS",
                          "currencyCode": "BRL",
                          "amount": 159.2,
                          "date": "2020-10-14T00:00:00.000Z",
                          "balance": 2468.84,
                          "category": "Investment",
                          "accountId": "562b795d-1653-429f-be86-74ead9502813",
                          "providerCode": null,
                          "status": "POSTED",
                          "paymentData": null,
                          "type": "CREDIT",
                          "creditCardMetadata": {
                            "totalAmount": 320,
                            "totalInstallments": 2,
                            "installmentNumber": 2,
                            "purchaseDate": "2020-09-14T00:00:00.000Z",
                            "payeeMCC": 1234,
                            "cardNumber": "0597",
                            "billId": "abced929-edc4-408c-a959-d51f79ab1123"
                          },
                          "providerId": null
                        },
                        {
                          "id": "093fc873-442a-4bd8-9171-51f17892fb09",
                          "description": "LIQUIDO DAS OPERAÇÕES BM&F PR. 14/10/2020 NC. 870947",
                          "descriptionRaw": "LIQUIDO DAS OPERAÇÕES BM&F PR. 14/10/2020 NC. 870947",
                          "currencyCode": "BRL",
                          "amount": -10.3,
                          "date": "2020-10-14T00:00:00.000Z",
                          "balance": 2309.64,
                          "category": "Investment",
                          "accountId": "562b795d-1653-429f-be86-74ead9502813",
                          "providerCode": null,
                          "status": "POSTED",
                          "paymentData": null,
                          "type": "DEBIT",
                          "providerId": null
                        },
                        {
                          "id": "6ec156fe-e8ac-4d9a-a4b3-7770529ab01c",
                          "description": "TED Example",
                          "descriptionRaw": null,
                          "currencyCode": "BRL",
                          "amount": 1500,
                          "date": "2020-10-14T00:00:00.000Z",
                          "balance": 3500,
                          "category": "Transfer",
                          "accountId": "03cc0eff-4ec5-495c-adb3-1ef9611624fc",
                          "providerCode": "123456",
                          "type": "CREDIT",
                          "status": "POSTED",
                          "operationType": "TED",
                          "paymentData": {
                            "payer": {
                              "name": "Tiago Rodrigues Santos",
                              "branchNumber": "090",
                              "accountNumber": "1234-5",
                              "routingNumber": "001",
                              "documentNumber": {
                                "type": "CPF",
                                "value": "882.937.076-23"
                              }
                            },
                            "reason": "Taxa de serviço",
                            "receiver": {
                              "name": "Pluggy",
                              "branchNumber": "999",
                              "accountNumber": "9876-1",
                              "routingNumber": "002",
                              "documentNumber": {
                                "type": "CNPJ",
                                "value": "08.050.608/0001-32"
                              }
                            },
                            "paymentMethod": "TED",
                            "referenceNumber": "123456789"
                          },
                          "providerId": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "message": "accountId should not be null or undefined,accountId must be a UUID",
                  "code": 400
                }
              }
            }
          },
          "500": {
            "description": "Server Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Transaction"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Account primary identifier",
            "in": "query",
            "name": "accountId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "562b795d-1653-429f-be86-74ead9502813"
          },
          {
            "description": "Array of transaction identifiers. If defined, 'from' and 'to' parameters will be discarded",
            "in": "query",
            "name": "ids",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "example": "a8534c85-53ce-4f21-94d7-50e9d2ee4957, 05c693bf-c196-47ea-a28c-8251d6bb8a06"
          },
          {
            "description": "Filter greater than date. Format (yyyy-mm-dd)",
            "in": "query",
            "name": "from",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2020-10-13"
          },
          {
            "description": "Filter lower than date. Format (yyyy-mm-dd)",
            "in": "query",
            "name": "to",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2020-10-15"
          },
          {
            "description": "Page size for the paging request, default: 20",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double",
              "minimum": 1,
              "maximum": 500
            },
            "example": "50"
          },
          {
            "description": "Page number for the paging request, default: 1",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            },
            "example": "1"
          },
          {
            "description": "Credit Card Bill's primary identifier, if account is a credit card.",
            "in": "query",
            "name": "billId",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "abced929-edc4-408c-a959-d51f79ab1123"
          },
          {
            "description": "Filter greater than createdAt. Format (yyyy-mm-ddThh:mm:ss.000Z)",
            "in": "query",
            "name": "createdAtFrom",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2020-10-13T03:00:00.000Z"
          }
        ],
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "code": "const pluggy = require('pluggy-sdk');\nconst client = new pluggy.PluggyClient({\n  clientId: 'YOUR_CLIENT_ID',\n  clientSecret: 'YOUR_CLIENT_SECRET',\n});\n\nclient\n  .fetchTransactions('ACCOUNT_ID')\n  .then(({results: transactions}) => {\n    console.log(transactions);\n  });"
            },
            {
              "language": "java",
              "code": "PluggyClient pluggyClient = PluggyClient.builder()\n  .clientIdAndSecret('YOUR_CLIENT_ID', 'YOUR_CLIENT_SECRET')\n  .baseUrl('https://api.pluggy.ai')\n  .build();\nResponse<TransactionsResponse> transactions = pluggyClient.service().getTransactions(\"ACCOUNT_ID\").execute();"
            },
            {
              "language": "csharp",
              "code": "PluggyClient pluggyClient = new PluggyClient('YOUR_PLUGGY_API_KEY');\nPageResults<Transaction> transactions = await pluggyClient.FetchTransactions(\"ACCOUNT_ID\");"
            }
          ]
        }
      }
    },
    "/transactions/{id}": {
      "get": {
        "operationId": "transactions-retrieve",
        "summary": "Retrieve",
        "description": "Recovers the transaction resource by it's id",
        "responses": {
          "200": {
            "description": "Retrieve a transaction.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          },
          "404": {
            "description": "Transaction not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 404,
                  "codeDescription": "TRANSACTION_NOT_FOUND",
                  "message": "Transaction not found"
                }
              }
            }
          },
          "500": {
            "description": "Server Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Transaction"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "transaction primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "6ec156fe-e8ac-4d9a-a4b3-7770529ab01c"
          }
        ],
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "code": "const pluggy = require('pluggy-sdk');\nconst client = new pluggy.PluggyClient({\n  clientId: 'YOUR_CLIENT_ID',\n  clientSecret: 'YOUR_CLIENT_SECRET',\n});\n\nclient\n  .fetchTransaction('ACCOUNT_ID')\n  .then((transaction) => {\n    console.log(transaction);\n  });"
            },
            {
              "language": "java",
              "code": "PluggyClient pluggyClient = PluggyClient.builder()\n  .clientIdAndSecret('YOUR_CLIENT_ID', 'YOUR_CLIENT_SECRET')\n  .baseUrl('https://api.pluggy.ai')\n  .build();\nResponse<Transaction> transaction = pluggyClient.service().getTransaction(\"TRANSACTION_ID\").execute();"
            },
            {
              "language": "csharp",
              "code": "PluggyClient pluggyClient = new PluggyClient('YOUR_PLUGGY_API_KEY');\nTransaction transaction = await pluggyClient.FetchTransactioNs(\"TRANSACTION_ID\");"
            }
          ]
        }
      },
      "patch": {
        "operationId": "transactions-Update",
        "summary": "Update",
        "description": "Update the transaction's category by it's id",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTransaction"
              }
            }
          },
          "description": "New category identifier",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Retrieve an updated transaction.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          },
          "400": {
            "description": "Missing parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "message": "Transaction Id should not be null or undefined, transactionId must be a UUID",
                  "code": 400
                }
              }
            }
          },
          "404": {
            "description": "Transaction not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 404,
                  "message": "Transaction not found"
                }
              }
            }
          },
          "500": {
            "description": "Server Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Transaction"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "transaction primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "6ec156fe-e8ac-4d9a-a4b3-7770529ab01c"
          }
        ],
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "code": "const pluggy = require('pluggy-sdk');\nconst client = new pluggy.PluggyClient({\n  clientId: 'YOUR_CLIENT_ID',\n  clientSecret: 'YOUR_CLIENT_SECRET',\n});\n\nclient\n  .updateTransactionCategory('TRANSACTION_ID','CATEGORY_ID')\n  .then((transaction) => {\n    console.log(transaction);\n  });"
            }
          ]
        }
      }
    },
    "/investments": {
      "get": {
        "operationId": "investments-list",
        "summary": "List",
        "description": "Recovers all investments collected for the item provided",
        "responses": {
          "200": {
            "description": "Retrieve a list of all investments",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "page": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "total": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "totalPages": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Investment"
                      },
                      "description": "List of investments"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "page": 1,
                      "total": 3,
                      "totalPages": 1,
                      "results": [
                        {
                          "id": "f77eccf4-7714-498e-92a9-1bebe70335d9",
                          "code": "12.345.678/0001-00",
                          "name": "Bahia AM Advisory FIC de FIM",
                          "balance": 1359.39,
                          "currencyCode": "BRL",
                          "type": "MUTUAL_FUND",
                          "subtype": "MULTIMARKET_FUND",
                          "lastMonthRate": 0.24,
                          "annualRate": 3.24,
                          "lastTwelveMonthsRate": 3,
                          "itemId": "207f5bcd-312a-439c-abbe-166b6632c980",
                          "value": 500,
                          "quantity": 3,
                          "amount": 1500,
                          "taxes": 40.61,
                          "taxes2": 100,
                          "date": "2020-07-19T18:27:41.802Z",
                          "owner": "John Doe",
                          "number": null,
                          "amountProfit": 310.5,
                          "amountWithdrawal": 1310.5,
                          "amountOriginal": 1000,
                          "status": "ACTIVE",
                          "transactions": [
                            {
                              "tradeDate": "2020-10-01T00:00:00.000Z",
                              "date": "2020-10-01T00:00:00.000Z",
                              "description": "Aplicação Fondo de Investimento Premium",
                              "quantity": 1.25,
                              "value": 2,
                              "amount": 5,
                              "type": "BUY",
                              "movementType": "CREDIT"
                            }
                          ]
                        },
                        {
                          "id": "2a96b873-53bb-4d16-a3d8-385a57e78d7e",
                          "number": null,
                          "name": "CDB1194KL0Z - BANCO MAXIMA S/A",
                          "balance": 2000,
                          "currencyCode": "BRL",
                          "type": "FIXED_INCOME",
                          "subtype": "CDB",
                          "itemId": "207f5bcd-312a-439c-abbe-166b6632c980",
                          "code": "0001-02",
                          "amount": 2500,
                          "taxes": null,
                          "taxes2": null,
                          "date": "2020-07-19T18:27:41.802Z",
                          "owner": "John Doe",
                          "rate": 30,
                          "rateType": "CDI",
                          "fixedAnnualRate": 10.5,
                          "amountProfit": null,
                          "amountWithdrawal": 2000,
                          "amountOriginal": 1000,
                          "issuer": "Pluggy",
                          "issuerCNPJ": "08.050.608/0001-32",
                          "issueDate": "2020-07-19T18:27:41.802Z",
                          "status": "ACTIVE"
                        },
                        {
                          "id": "ded7d2f1-6b90-44a8-9ace-de747b9f5bfe",
                          "number": "123456-2",
                          "name": "Pluggy PREVIDENCIA",
                          "balance": 1359.39,
                          "currencyCode": "BRL",
                          "type": "SECURITY",
                          "subtype": "RETIREMENT",
                          "annualRate": 3.24,
                          "itemId": "207f5bcd-312a-439c-abbe-166b6632c980",
                          "code": null,
                          "value": 500,
                          "quantity": 3,
                          "amount": 1500,
                          "taxes": 0,
                          "taxes2": 0,
                          "date": "2020-07-19T18:27:41.802Z",
                          "owner": "John Doe",
                          "amountProfit": 359.39,
                          "amountWithdrawal": 1310.5,
                          "status": "ACTIVE",
                          "institution": {
                            "name": "BANCO BTG PACTUAL S/A",
                            "number": "30306294000145"
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Investment"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Item's primary identifier",
            "in": "query",
            "name": "itemId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0e8a7f0-6d86-11ea-b77f-2e728ce88125"
          },
          {
            "description": "Investment's type to filter",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "COE",
                "EQUITY",
                "ETF",
                "FIXED_INCOME",
                "MUTUAL_FUND",
                "SECURITY",
                "OTHER"
              ]
            }
          },
          {
            "description": "Page size for the paging request, default: 500",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            },
            "example": "50"
          },
          {
            "description": "Page number for the paging request, default: 1",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            },
            "example": "1"
          }
        ],
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "code": "const pluggy = require('pluggy-sdk');\nconst client = new pluggy.PluggyClient({\n  clientId: 'YOUR_CLIENT_ID',\n  clientSecret: 'YOUR_CLIENT_SECRET',\n});\nclient\n  .fetchInvestments(\"d619cfde-a8d7-4fe0-a10d-6de488bde4e0\")\n  .then(({ results: investments }) => {\n    console.log(investments);\n  });"
            },
            {
              "language": "csharp",
              "code": "PluggyClient pluggyClient = new PluggyClient(\"YOUR_CLIENT_ID\", \"YOUR_CLIENT_SECRET\");\nList<Investment> investments = await pluggyClient.FetchInvestments(\"d619cfde-a8d7-4fe0-a10d-6de488bde4e0\");"
            },
            {
              "language": "java",
              "code": "PluggyClient pluggyClient = PluggyClient.builder()\n  .clientIdAndSecret(“YOUR_CLIENT_ID', 'YOUR_CLIENT_SECRET')\n  .build();\nResponse<InvestmentsResponse> investmentsResponse = pluggyClient.service().getInvestments(\"YOUR_ITEM_ID\").execute();"
            }
          ]
        }
      }
    },
    "/investments/{id}": {
      "get": {
        "operationId": "investments-retrieve",
        "summary": "Retrieve",
        "responses": {
          "200": {
            "description": "Retrieve an investment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Investment"
                }
              }
            }
          },
          "404": {
            "description": "Investment not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 404,
                  "codeDescription": "INVESTMENT_NOT_FOUND",
                  "message": "investment not found"
                }
              }
            }
          }
        },
        "description": "Recovers the investment resource by its id",
        "tags": [
          "Investment"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "investment primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0e8a7f0-6d86-11ea-b77f-2e728ce88125"
          }
        ]
      }
    },
    "/investments/{id}/transactions": {
      "get": {
        "operationId": "investment-transactions-list",
        "summary": "List investment transactions",
        "description": "Recovers all investment transactions for the investment provided",
        "responses": {
          "200": {
            "description": "Retrieve a list of all transactions for an investment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageResponseInvestmentTransactions"
                },
                "examples": {
                  "response": {
                    "value": {
                      "total": 2,
                      "totalPages": 1,
                      "page": 1,
                      "results": [
                        {
                          "id": "910419d2-e833-41f2-af43-080693f7ef8a",
                          "amount": 60000,
                          "description": null,
                          "value": 1200,
                          "quantity": 50,
                          "tradeDate": "2021-09-15T00:00:00.000Z",
                          "date": "2021-09-15T00:00:00.000Z",
                          "type": "SELL",
                          "movementType": "DEBIT",
                          "netAmount": null,
                          "agreedRate": null,
                          "brokerageNumber": null,
                          "expenses": {}
                        },
                        {
                          "id": "f24f7eec-5a5b-4e54-8727-d40b0b91115a",
                          "amount": 110000,
                          "description": null,
                          "value": 1100,
                          "quantity": 100,
                          "tradeDate": "2021-09-01T00:00:00.000Z",
                          "date": "2021-09-01T00:00:00.000Z",
                          "type": "BUY",
                          "movementType": "CREDIT",
                          "netAmount": 10000,
                          "agreedRate": null,
                          "brokerageNumber": "1234",
                          "expenses": {}
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Investment"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Investment primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "562b795d-1653-429f-be86-74ead9502813"
          },
          {
            "description": "Page size for the paging request, default: 20",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            },
            "example": "50"
          },
          {
            "description": "Page number for the paging request, default: 1",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            },
            "example": "1"
          }
        ]
      }
    },
    "/identity": {
      "get": {
        "operationId": "identity-find-by-item",
        "summary": "Find by item",
        "description": "Recovers identity of an item if available",
        "responses": {
          "200": {
            "description": "Retrieve an identity by itemId",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityResponse"
                },
                "example": {
                  "id": "42888436-62f5-49d2-8cf9-e312c7939509",
                  "fullName": "Francisco Sousa",
                  "companyName": "Pluggy Inc.",
                  "document": "076.630.975-48",
                  "taxNumber": "38.512.121/0001-95",
                  "documentType": "CPF",
                  "jobTitle": "Comercial",
                  "birthDate": "1991-05-01T00:00:00.000Z",
                  "establishmentCode": "001",
                  "establishmentName": "Pluggy Establishment",
                  "addresses": [
                    {
                      "fullAddress": "Av. Lúcio Costa 1234, Copacabana, Rio de Janeiro, Brasil",
                      "country": "Brasil",
                      "state": "RJ",
                      "city": "Rio de Janeiro",
                      "postalCode": "22620-171",
                      "primaryAddress": "Av. Lúcio Costa, 1234",
                      "type": "Personal"
                    }
                  ],
                  "phoneNumbers": [
                    {
                      "type": "Personal",
                      "value": "+54 911 12345678"
                    }
                  ],
                  "emails": [
                    {
                      "type": "Personal",
                      "value": "myemail@pluggy.ai"
                    }
                  ],
                  "relations": [
                    {
                      "type": "Father",
                      "name": "Juan Gonzalez"
                    },
                    {
                      "type": "Spouse",
                      "name": "Laura Garcia"
                    }
                  ],
                  "createdAt": "2020-09-30T14:38:12.724Z",
                  "updatedAt": "2020-09-30T14:38:12.724Z"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "message": "itemId must be a UUID",
                  "code": 400
                }
              }
            }
          },
          "404": {
            "description": "Identity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 404,
                  "codeDescription": "IDENTITY_NOT_FOUND",
                  "message": "identity not found"
                }
              }
            }
          },
          "500": {
            "description": "Server Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Identity"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Item's primary identifier",
            "in": "query",
            "name": "itemId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0e8a7f0-6d86-11ea-b77f-2e728ce88125"
          }
        ],
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "code": "const pluggy = require('pluggy-sdk');\nconst client = new pluggy.PluggyClient({\n  clientId: 'YOUR_CLIENT_ID',\n  clientSecret: 'YOUR_CLIENT_SECRET',\n});\n\nclient\n  .fetchIdentityByItemId('YOUR_ITEM_ID')\n  .then((identity) => {\n    console.log(identity);\n  });"
            },
            {
              "language": "java",
              "code": "PluggyClient pluggyClient = PluggyClient.builder()\n  .clientIdAndSecret('your_client_id', 'your_secret')\n  .baseUrl('https://api.pluggy.ai')\n  .build();\nResponse<IdentityResponse> item = pluggyClient.service().getIdentityByItemId(\"YOUR_ITEM_ID\").execute();"
            },
            {
              "language": "csharp",
              "code": "PluggyClient pluggyClient = new PluggyClient('YOUR_PLUGGY_API_KEY');\nIdentity identity = await pluggyClient.FetchIdentityByItemId(\"YOUR_ITEM_ID\");"
            }
          ]
        }
      }
    },
    "/identity/{id}": {
      "get": {
        "operationId": "identity-retrieve",
        "summary": "Retrieve",
        "description": "Recovers the identity resource by its id",
        "responses": {
          "200": {
            "description": "Retrieve an Identity resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityResponse"
                },
                "example": {
                  "id": "42888436-62f5-49d2-8cf9-e312c7939509",
                  "fullName": "Francisco Sousa",
                  "companyName": "Pluggy Inc.",
                  "document": "076.630.975-48",
                  "taxNumber": "38.512.121/0001-95",
                  "documentType": "CPF",
                  "jobTitle": "Comercial",
                  "birthDate": "1991-05-01T00:00:00.000Z",
                  "establishmentCode": "001",
                  "establishmentName": "Pluggy Establishment",
                  "addresses": [
                    {
                      "fullAddress": "Av. Lúcio Costa 1234, Copacabana, Rio de Janeiro, Brasil",
                      "country": "Brasil",
                      "state": "RJ",
                      "city": "Rio de Janeiro",
                      "postalCode": "22620-171",
                      "primaryAddress": "Av. Lúcio Costa, 1234",
                      "type": "Personal",
                      "additionalInfo": "Casa amarela"
                    }
                  ],
                  "phoneNumbers": [
                    {
                      "type": "Personal",
                      "value": "+54 911 12345678"
                    }
                  ],
                  "emails": [
                    {
                      "type": "Personal",
                      "value": "myemail@pluggy.ai"
                    }
                  ],
                  "relations": [
                    {
                      "type": "Father",
                      "name": "Juan Gonzalez"
                    },
                    {
                      "type": "Spouse",
                      "name": "Laura Garcia"
                    }
                  ],
                  "createdAt": "2020-09-30T14:38:12.724Z",
                  "updatedAt": "2020-09-30T14:38:12.724Z"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "message": "itemId must be a UUID",
                  "code": 400
                }
              }
            }
          },
          "404": {
            "description": "Identity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 404,
                  "codeDescription": "IDENTITY_NOT_FOUND",
                  "message": "identity not found"
                }
              }
            }
          },
          "500": {
            "description": "Server Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Identity"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "identity primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0e8a7f0-6d86-11ea-b77f-2e728ce88125"
          }
        ],
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "code": "const pluggy = require('pluggy-sdk');\nconst client = new pluggy.PluggyClient({\n  clientId: 'YOUR_CLIENT_ID',\n  clientSecret: 'YOUR_CLIENT_SECRET',\n});\n\nclient\n  .fetchIdentity('YOUR_IDENTITY_ID')\n  .then((identity) => {\n    console.log(identity);\n  });"
            },
            {
              "language": "java",
              "code": "PluggyClient pluggyClient = PluggyClient.builder()\n  .clientIdAndSecret('your_client_id', 'your_secret')\n  .baseUrl('https://api.pluggy.ai')\n  .build();\nResponse<IdentityResponse> identityByIdResponse = pluggyClient.service().getIdentityById(\"YOUR_IDENTITY_ID\").execute();"
            },
            {
              "language": "csharp",
              "code": "PluggyClient pluggyClient = new PluggyClient('YOUR_PLUGGY_API_KEY');\nIdentity identity = await pluggyClient.FetchIdentity(\"YOUR_IDENTITY_ID\");"
            }
          ]
        }
      }
    },
    "/webhooks": {
      "get": {
        "operationId": "webhooks-list",
        "summary": "List",
        "description": "Retrieves all Webhooks associated with your application",
        "responses": {
          "200": {
            "description": "List of Webhooks",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "page": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "total": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "totalPages": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Webhook"
                      },
                      "description": ""
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "page": 1,
                      "total": 2,
                      "totalPages": 1,
                      "results": [
                        {
                          "id": "d619cfde-a8d7-4fe0-a10d-6de488bde4e0",
                          "event": "item/updated",
                          "url": "https://www.myapi.com/notifications",
                          "disabledAt": "2020-06-24T21:29:40.300Z",
                          "createdAt": "2020-06-24T21:29:40.300Z",
                          "updatedAt": "2020-06-24T21:29:40.300Z"
                        },
                        {
                          "id": "207f5bcd-312a-439c-abbe-166b6632c980",
                          "event": "item/all",
                          "url": "https://www.myapi.com/notifications",
                          "disabledAt": null,
                          "createdAt": "2020-06-24T21:29:40.300Z",
                          "updatedAt": "2020-06-24T21:29:40.300Z"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 500,
                  "message": "Internal Server Error"
                }
              }
            }
          },
          "204": {
            "description": "No content"
          }
        },
        "tags": [
          "Webhook"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "code": "const pluggy = require('pluggy-sdk');\nconst client = new pluggy.PluggyClient({\n  clientId: 'YOUR_CLIENT_ID',\n  clientSecret: 'YOUR_CLIENT_SECRET',\n});\nclient\n  .fetchWebhooks()\n  .then(({ results: webhooks }) => {\n    console.log(webhook);\n  });"
            },
            {
              "language": "csharp",
              "code": "PluggyClient pluggyClient = new PluggyClient(\"YOUR_PLUGGY_API_KEY\");\nList<Webhook> webhooks = await pluggyClient.FetchWebhooks();"
            }
          ]
        }
      },
      "post": {
        "operationId": "webhooks-create",
        "summary": "Create",
        "description": "Creates a webhook attached to the specific event and provides the notification url",
        "responses": {
          "201": {
            "description": "Created webhook",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemCreationErrorResponse"
                },
                "examples": {
                  "invalidEvent": {
                    "summary": "Invalid event type",
                    "value": {
                      "message": "Invalid event type '{event}' for webhook",
                      "code": 400
                    }
                  },
                  "alreadyExists": {
                    "summary": "Webhook event already created for the specified url",
                    "value": {
                      "message": "A webhook for event '{event}' and url '{url}' already exists.",
                      "code": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 500,
                  "codeDescription": "INTERNAL_SERVER_ERROR",
                  "message": "Internal Server Error"
                }
              }
            }
          }
        },
        "tags": [
          "Webhook"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/CreateWebhook"
        },
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "code": "const pluggy = require('pluggy-sdk');\nconst client = new pluggy.PluggyClient({\n  clientId: 'YOUR_CLIENT_ID',\n  clientSecret: 'YOUR_CLIENT_SECRET',\n});\nclient\n  .createWebhook({\n    event: 'item/updated',\n    url: 'https://www.myapi.com/notifications',\n})\n  .then((webhook) => {\n    console.log(webhook);\n  });"
            },
            {
              "language": "csharp",
              "code": "PluggyClient pluggyClient = new PluggyClient(\"YOUR_PLUGGY_API_KEY\");\nWebhook webhook = await pluggyClient.CreateWebhook(\"https://www.myapi.com/notifications\", WebhookEvent.ItemCreated);"
            }
          ]
        }
      }
    },
    "/webhooks/{id}": {
      "get": {
        "operationId": "webhooks-retrieve",
        "summary": "Retrieve",
        "description": "Retrieves a specific webhook",
        "responses": {
          "200": {
            "description": "Retrieve a webhook.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            }
          },
          "404": {
            "description": "Webhook not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 404,
                  "codeDescription": "WEBHOOK_NOT_FOUND",
                  "message": "webhook not found"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 500,
                  "message": "Internal Server Error"
                }
              }
            }
          }
        },
        "tags": [
          "Webhook"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "webhook primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "d0e8a7f0-6d86-11ea-b77f-2e728ce88125"
          }
        ],
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "code": "const pluggy = require('pluggy-sdk');\nconst client = new pluggy.PluggyClient({\n  clientId: 'YOUR_CLIENT_ID',\n  clientSecret: 'YOUR_CLIENT_SECRET',\n});\nclient\n  .fetchWebhook('YOUR_WEBHOOK_ID')\n  .then((webhook) => {\n    console.log(webhook);\n  });"
            },
            {
              "language": "csharp",
              "code": "PluggyClient pluggyClient = new PluggyClient(\"YOUR_PLUGGY_API_KEY\");\nWebhook webhook = await pluggyClient.FetchWebhook(\"YOUR_WEBHOOK_ID\");"
            }
          ]
        }
      },
      "patch": {
        "operationId": "webhooks-update",
        "summary": "Update",
        "description": "Updates a webhook event and/or url listener. Once updated all events that are triggered will replicate the updated logic",
        "responses": {
          "200": {
            "description": "Update the webhook that was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookCreationErrorResponse"
                },
                "example": {
                  "message": "Webhook url must be valid URL address and not localhost",
                  "code": 400
                }
              }
            }
          },
          "404": {
            "description": "Webhook not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 404,
                  "codeDescription": "WEBHOOK_NOT_FOUND",
                  "message": "webhook not found"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 500,
                  "message": "Internal Server Error"
                }
              }
            }
          }
        },
        "tags": [
          "Webhook"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "webhook primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0e8a7f0-6d86-11ea-b77f-2e728ce88125"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/CreateWebhook"
        },
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "code": "const pluggy = require('pluggy-sdk');\nconst client = new pluggy.PluggyClient({\n  clientId: 'YOUR_CLIENT_ID',\n  clientSecret: 'YOUR_CLIENT_SECRET',\n});\nclient\n  .updateWebhook('YOUR_WEBHOOK_ID', {\n    event: 'all',\n    url: 'https://www.myapi.com/notifications',\n})\n  .then((webhook) => {\n    console.log(webhook);\n  });"
            },
            {
              "language": "csharp",
              "code": "PluggyClient pluggyClient = new PluggyClient(\"YOUR_PLUGGY_API_KEY\");\nWebhook webhook = await pluggyClient.UpdateWebhook(\"YOUR_WEBHOOK_ID\", \"https://www.myapi.com/notifications\", WebhookEvent.All);"
            }
          ]
        }
      },
      "delete": {
        "operationId": "webhooks-delete",
        "summary": "Delete",
        "description": "Deletes a webhook listener by its id",
        "responses": {
          "200": {
            "description": "Webhook was deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ICountResponse"
                }
              }
            }
          },
          "404": {
            "description": "Webhook not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 404,
                  "codeDescription": "WEBHOOK_NOT_FOUND",
                  "message": "webhook not found"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 500,
                  "message": "Internal Server Error"
                }
              }
            }
          }
        },
        "tags": [
          "Webhook"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "webhook primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0e8a7f0-6d86-11ea-b77f-2e728ce88125"
          }
        ],
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "code": "const pluggy = require('pluggy-sdk');\nconst client = new pluggy.PluggyClient({\n  clientId: 'YOUR_CLIENT_ID',\n  clientSecret: 'YOUR_CLIENT_SECRET',\n});\nclient\n  .deleteWebhook('YOUR_WEBHOOK_ID')\n  .then(() => {\n    console.log('deleted!');\n  });"
            },
            {
              "language": "csharp",
              "code": "PluggyClient pluggyClient = new PluggyClient(\"YOUR_PLUGGY_API_KEY\");\nawait pluggyClient.deleteWebhook(\"YOUR_WEBHOOK_ID\");"
            }
          ]
        }
      }
    },
    "/categories": {
      "get": {
        "operationId": "categories-list",
        "summary": "List",
        "description": "Recovers all categories active from the data categorization.\nCan be filtered by the parentId of the category.",
        "responses": {
          "200": {
            "description": "Retrieve a list of all categories",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Category"
                  }
                },
                "example": {
                  "page": 1,
                  "total": 2,
                  "totalPages": 1,
                  "results": [
                    {
                      "id": "01000000",
                      "description": "Income",
                      "descriptionTranslated": "Renda"
                    },
                    {
                      "id": "01010000",
                      "description": "Salary/pro-labore",
                      "descriptionTranslated": "Salário",
                      "parentId": "01000000",
                      "parentDescription": "Income"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Category"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Parent's primary identifier",
            "in": "query",
            "name": "parentId",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "01000000"
          }
        ],
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "code": "const pluggy = require('pluggy-sdk');\nconst client = new pluggy.PluggyClient({\n  clientId: 'YOUR_CLIENT_ID',\n  clientSecret: 'YOUR_CLIENT_SECRET',\n});\nclient\n  .fetchCategories()\n  .then(({ results: categories }) => {\n    console.log(categories);\n  });"
            },
            {
              "language": "java",
              "code": "PluggyClient pluggyClient = PluggyClient.builder()\n  .clientIdAndSecret('your_client_id', 'your_secret')\n  .baseUrl('https://api.pluggy.ai')\n  .build();\nResponse<CategoriesResponse> categoriesResponse = pluggyClient.service().getCategories().execute();"
            },
            {
              "language": "csharp",
              "code": "PluggyClient pluggyClient = new PluggyClient('YOUR_PLUGGY_API_KEY');\nPageResults<Category> categoriesResponse = await pluggyClient.FetchCategories();"
            }
          ]
        }
      }
    },
    "/categories/{id}": {
      "get": {
        "operationId": "categories-retrieve",
        "summary": "Retrieve",
        "description": "Recovers the category resource by its id",
        "responses": {
          "200": {
            "description": "Retrieve a category.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "404": {
            "description": "Category not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 404,
                  "codeDescription": "CATEGORY_NOT_FOUND",
                  "message": "category not found"
                }
              }
            }
          }
        },
        "tags": [
          "Category"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "category primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "01000000"
          }
        ],
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "code": "const pluggy = require('pluggy-sdk');\nconst client = new pluggy.PluggyClient({\n  clientId: 'YOUR_CLIENT_ID',\n  clientSecret: 'YOUR_CLIENT_SECRET',\n});\nclient\n  .fetchCategory('CATEGORY_ID')\n  .then((category) => {\n    console.log(category);\n  });"
            },
            {
              "language": "java",
              "code": "PluggyClient pluggyClient = PluggyClient.builder()\n  .clientIdAndSecret('your_client_id', 'your_secret')\n  .baseUrl('https://api.pluggy.ai')\n  .build();\nCategory category = pluggyClient.service().getCategory(\"CATEGORY_ID\").execute();"
            },
            {
              "language": "csharp",
              "code": "PluggyClient pluggyClient = new PluggyClient('YOUR_PLUGGY_API_KEY');\nCategory category = await pluggyClient.FetchCategory(\"CATEGORY_ID\");"
            }
          ]
        }
      }
    },
    "/categories/rules": {
      "get": {
        "operationId": "client-category-rules-list",
        "summary": "List Category Rules",
        "description": "Recovers category rules",
        "responses": {
          "200": {
            "description": "Retrieve a list of all client category rules.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PageResponseCategoryRules"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Category"
        ],
        "security": [
          {
            "default": []
          }
        ]
      },
      "post": {
        "operationId": "client-category-rules-create",
        "summary": "Create Category Rule",
        "description": "Create a single category rule",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateClientCategoryRule"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Creates a Category Rule and recover the result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientCategoryRule"
                }
              }
            }
          },
          "404": {
            "description": "Category not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 404,
                  "codeDescription": "CATEGORY_NOT_FOUND",
                  "message": "category not found"
                }
              }
            }
          },
          "400": {
            "description": "Invalid description",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 400,
                  "message": "description must be a string"
                }
              }
            }
          }
        },
        "tags": [
          "Category"
        ],
        "security": [
          {
            "default": []
          }
        ]
      }
    },
    "/loans": {
      "get": {
        "operationId": "loans-list",
        "summary": "List",
        "description": "Recovers all loans collected for the item provided",
        "responses": {
          "200": {
            "description": "Retrieve a list of all loans",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "page": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "total": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "totalPages": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Loan"
                      },
                      "description": "List of loans"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "page": 1,
                      "total": 1,
                      "totalPages": 1,
                      "results": [
                        {
                          "id": "05c693bf-c196-47ea-a28c-8251d6bb8a06",
                          "itemId": "5e9f8f8f-f8f8-4f8f-8f8f-8f8f8f8f8f8f",
                          "contractNumber": "000000721792794",
                          "ipocCode": "92792126019929279212650822221989319252576",
                          "productName": "Crédito Pessoal Consignado",
                          "type": "CREDITO_PESSOAL_COM_CONSIGNACAO",
                          "date": "2023-07-20T00:00:00",
                          "contractDate": "2022-08-01T00:00:00",
                          "disbursementDates": [
                            "2018-01-15T00:00:00"
                          ],
                          "settlementDate": "2018-01-15T00:00:00",
                          "contractAmount": 50000,
                          "currencyCode": "BRL",
                          "dueDate": "2028-01-15T00:00:00",
                          "installmentPeriodicity": "MONTHLY",
                          "installmentPeriodicityAdditionalInfo": "",
                          "firstInstallmentDueDate": "2018-02-15T00:00:00",
                          "CET": 0.29,
                          "amortizationScheduled": "SAC",
                          "amortizationScheduledAdditionalInfo": "",
                          "cnpjConsignee": "60.500.998/0001-35",
                          "interestRates": [
                            {
                              "taxType": "EFETIVA",
                              "interestRateType": "SIMPLES",
                              "taxPeriodicity": "AA",
                              "calculation": "21/252",
                              "referentialRateIndexerType": "PRE_FIXADO",
                              "referentialRateIndexerSubType": "TJLP",
                              "referentialRateIndexerAdditionalInfo": "",
                              "preFixedRate": 0.6,
                              "postFixedRate": 0.55,
                              "additionalInfo": ""
                            }
                          ],
                          "contractedFees": [
                            {
                              "name": "Renovação de cadastro",
                              "code": "CADASTRO",
                              "chargeType": "UNICA",
                              "charge": "MINIMO",
                              "amount": 100000.04,
                              "rate": 0.062
                            }
                          ],
                          "contractedFinanceCharges": [
                            {
                              "type": "JUROS_REMUNERATORIOS_POR_ATRASO",
                              "chargeAdditionalInfo": "",
                              "chargeRate": 0.07
                            }
                          ],
                          "warranties": [
                            {
                              "currencyCode": "BRL",
                              "type": "CESSAO_DIREITOS_CREDITORIOS",
                              "subtype": "NOTAS_PROMISSORIAS_OUTROS_DIREITOS_CREDITO",
                              "amount": 1000.04
                            }
                          ],
                          "installments": {
                            "typeNumberOfInstallments": "MES",
                            "totalNumberOfInstallments": 130632,
                            "typeContractRemaining": "DIA",
                            "contractRemainingNumber": 14600,
                            "paidInstallments": 73,
                            "dueInstallments": 57,
                            "pastDueInstallments": 73,
                            "balloonPayments": [
                              {
                                "dueDate": "2021-05-21T00:00:00",
                                "amount": {
                                  "value": 1000.04,
                                  "currencyCode": "BRL"
                                }
                              }
                            ]
                          },
                          "payments": {
                            "contractOutstandingBalance": 1000.04,
                            "releases": [
                              {
                                "isOverParcelPayment": true,
                                "installmentId": "WGx0aExYcEJMVm93TFRsZFcyRXRla0V0V2pBdE9Wd3RYWH",
                                "paidDate": "2021-05-21T00:00:00",
                                "currencyCode": "BRL",
                                "paidAmount": 1000.04,
                                "overParcel": {
                                  "fees": [
                                    {
                                      "name": "Reavaliação periódica do bem",
                                      "code": "aval_bem",
                                      "amount": 100000.04
                                    }
                                  ],
                                  "charges": [
                                    {
                                      "type": "JUROS_REMUNERATORIOS_POR_ATRASO",
                                      "additionalInfo": "",
                                      "amount": 1000.04
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Loan"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Item's primary identifier",
            "in": "query",
            "name": "itemId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0e8a7f0-6d86-11ea-b77f-2e728ce88125"
          }
        ]
      }
    },
    "/loans/{id}": {
      "get": {
        "operationId": "loans-retrieve",
        "summary": "Retrieve",
        "responses": {
          "200": {
            "description": "Retrieve a loan.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Loan"
                },
                "examples": {
                  "response": {
                    "value": {
                      "id": "05c693bf-c196-47ea-a28c-8251d6bb8a06",
                      "itemId": "5e9f8f8f-f8f8-4f8f-8f8f-8f8f8f8f8f8f",
                      "contractNumber": "000000721792794",
                      "ipocCode": "92792126019929279212650822221989319252576",
                      "productName": "Crédito Pessoal Consignado",
                      "type": "CREDITO_PESSOAL_COM_CONSIGNACAO",
                      "date": "2023-07-20T00:00:00",
                      "contractDate": "2022-08-01T00:00:00",
                      "disbursementDates": [
                        "2018-01-15T00:00:00"
                      ],
                      "settlementDate": "2018-01-15T00:00:00",
                      "contractAmount": 50000,
                      "currencyCode": "BRL",
                      "dueDate": "2028-01-15T00:00:00",
                      "installmentPeriodicity": "MONTHLY",
                      "installmentPeriodicityAdditionalInfo": "",
                      "firstInstallmentDueDate": "2018-02-15T00:00:00",
                      "CET": 0.29,
                      "amortizationScheduled": "SAC",
                      "amortizationScheduledAdditionalInfo": "",
                      "cnpjConsignee": "60.500.998/0001-35",
                      "interestRates": [
                        {
                          "taxType": "EFETIVA",
                          "interestRateType": "SIMPLES",
                          "taxPeriodicity": "AA",
                          "calculation": "21/252",
                          "referentialRateIndexerType": "PRE_FIXADO",
                          "referentialRateIndexerSubType": "TJLP",
                          "referentialRateIndexerAdditionalInfo": "",
                          "preFixedRate": 0.6,
                          "postFixedRate": 0.55,
                          "additionalInfo": ""
                        }
                      ],
                      "contractedFees": [
                        {
                          "name": "Renovação de cadastro",
                          "code": "CADASTRO",
                          "chargeType": "UNICA",
                          "charge": "MINIMO",
                          "amount": 100000.04,
                          "rate": 0.062
                        }
                      ],
                      "contractedFinanceCharges": [
                        {
                          "type": "JUROS_REMUNERATORIOS_POR_ATRASO",
                          "chargeAdditionalInfo": "",
                          "chargeRate": 0.07
                        }
                      ],
                      "warranties": [
                        {
                          "currencyCode": "BRL",
                          "type": "CESSAO_DIREITOS_CREDITORIOS",
                          "subtype": "NOTAS_PROMISSORIAS_OUTROS_DIREITOS_CREDITO",
                          "amount": 1000.04
                        }
                      ],
                      "installments": {
                        "typeNumberOfInstallments": "MES",
                        "totalNumberOfInstallments": 130632,
                        "typeContractRemaining": "DIA",
                        "contractRemainingNumber": 14600,
                        "paidInstallments": 73,
                        "dueInstallments": 57,
                        "pastDueInstallments": 73,
                        "balloonPayments": [
                          {
                            "dueDate": "2021-05-21T00:00:00",
                            "amount": {
                              "value": 1000.04,
                              "currencyCode": "BRL"
                            }
                          }
                        ]
                      },
                      "payments": {
                        "contractOutstandingBalance": 1000.04,
                        "releases": [
                          {
                            "isOverParcelPayment": true,
                            "installmentId": "WGx0aExYcEJMVm93TFRsZFcyRXRla0V0V2pBdE9Wd3RYWH",
                            "paidDate": "2021-05-21T00:00:00",
                            "currencyCode": "BRL",
                            "paidAmount": 1000.04,
                            "overParcel": {
                              "fees": [
                                {
                                  "name": "Reavaliação periódica do bem",
                                  "code": "aval_bem",
                                  "amount": 100000.04
                                }
                              ],
                              "charges": [
                                {
                                  "type": "JUROS_REMUNERATORIOS_POR_ATRASO",
                                  "additionalInfo": "",
                                  "amount": 1000.04
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Loan not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 404,
                  "codeDescription": "LOAN_NOT_FOUND",
                  "message": "loan not found"
                }
              }
            }
          }
        },
        "description": "Recovers the loan resource by its id",
        "tags": [
          "Loan"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "loan primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0e8a7f0-6d86-11ea-b77f-2e728ce88125"
          }
        ]
      }
    },
    "/bills": {
      "get": {
        "operationId": "bills-list",
        "summary": "List",
        "description": "Recovers all credit card bills collected for the account provided",
        "responses": {
          "200": {
            "description": "Retrieve a list of all credit card bills",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "page": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "total": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "totalPages": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Bill"
                      },
                      "description": "List of credit card bills"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "page": 1,
                      "total": 1,
                      "totalPages": 1,
                      "results": [
                        {
                          "id": "05c693bf-c196-47ea-a28c-8251d6bb8a06",
                          "dueDate": "2023-07-20T00:00:00",
                          "totalAmount": 50000,
                          "totalAmountCurrencyCode": "BRL",
                          "minimumPaymentAmount": 50000,
                          "allowsInstallments": true,
                          "financeCharges": [
                            {
                              "id": "123456bf-c196-47ea-a28c-8251d6bb8777",
                              "type": "IOF",
                              "amount": 20.51,
                              "currencyCode": "BRL",
                              "additionalInfo": "NA"
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Bill"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Account's primary identifier",
            "in": "query",
            "name": "accountId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0e8a7f0-6d86-11ea-b77f-2e728ce88125"
          }
        ]
      }
    },
    "/bills/{id}": {
      "get": {
        "operationId": "bills-retrieve",
        "summary": "Retrieve",
        "responses": {
          "200": {
            "description": "Retrieve a credit card bill.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Bill"
                },
                "examples": {
                  "response": {
                    "value": {
                      "id": "05c693bf-c196-47ea-a28c-8251d6bb8a06",
                      "accountId": "5e9f8f8f-f8f8-4f8f-8f8f-8f8f8f8f8f8f",
                      "dueDate": "2023-07-20T00:00:00",
                      "totalAmount": 50000,
                      "totalAmountCurrencyCode": "BRL",
                      "minimumPaymentAmount": 50000,
                      "allowsInstallments": true,
                      "financeCharges": [
                        {
                          "id": "123456bf-c196-47ea-a28c-8251d6bb8777",
                          "creditCardBillId": "05c693bf-c196-47ea-a28c-8251d6bb8a06",
                          "type": "IOF",
                          "amount": 20.51,
                          "currencyCode": "BRL",
                          "additionalInfo": "NA"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Bill not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 404,
                  "codeDescription": "CREDIT_CARD_BILL_NOT_FOUND",
                  "message": "Bill not found"
                }
              }
            }
          }
        },
        "description": "Recovers the bill resource by its id",
        "tags": [
          "Bill"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Bill primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0e8a7f0-6d86-11ea-b77f-2e728ce88125"
          }
        ]
      }
    },
    "/payments/customers": {
      "get": {
        "operationId": "payment-customers-list",
        "summary": "List",
        "description": "Recovers all created payment customers",
        "responses": {
          "200": {
            "description": "Retrieve a list of all payment customers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "page": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "total": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "totalPages": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PaymentCustomer"
                      },
                      "description": "List of payment customers"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "page": 1,
                      "total": 1,
                      "totalPages": 1,
                      "results": [
                        {
                          "id": "05c693bf-c196-47ea-a28c-8251d6bb8a06",
                          "name": "Marco Silva",
                          "email": "msilva@pluggy.ai",
                          "createdAt": "2023-11-06T13:03:45.689Z",
                          "updatedAt": "2023-11-06T13:03:45.689Z"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Payment Customer"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Page size for the paging request, default: 20",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            },
            "example": "50"
          },
          {
            "description": "Page number for the paging request, default: 1",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            },
            "example": "1"
          },
          {
            "description": "Filter payment customers by name",
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "John"
          },
          {
            "description": "Filter payment customers by email",
            "in": "query",
            "name": "email",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "john.doe@email.com"
          },
          {
            "description": "Filter payment customers by CPF",
            "in": "query",
            "name": "cpf",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "11111111111"
          },
          {
            "description": "Filter payment customers by CNPJ",
            "in": "query",
            "name": "cnpj",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "1111111111111"
          }
        ]
      },
      "post": {
        "operationId": "payment-customer-create",
        "summary": "Create",
        "responses": {
          "200": {
            "description": "Create a payment customer.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentCustomer"
                }
              }
            }
          },
          "400": {
            "description": "Payment Customer its Invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 400,
                  "message": "email its not an email"
                }
              }
            }
          }
        },
        "tags": [
          "Payment Customer"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePaymentCustomerRequestBody"
              }
            }
          },
          "required": true
        }
      }
    },
    "/payments/customers/{id}": {
      "get": {
        "operationId": "payment-customer-retrieve",
        "summary": "Retrieve",
        "responses": {
          "200": {
            "description": "Retrieve a customer request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentCustomer"
                }
              }
            }
          },
          "404": {
            "description": "Payment Customer not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 404,
                  "codeDescription": "PAYMENT_CUSTOMER_NOT_FOUND",
                  "message": "Payment customer not found"
                }
              }
            }
          }
        },
        "description": "Recovers the payment customer resource by its id",
        "tags": [
          "Payment Customer"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Payment customer primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0e8a7f0-6d86-11ea-b77f-2e728ce88125"
          }
        ]
      },
      "delete": {
        "operationId": "payment-customer-delete",
        "summary": "Delete",
        "responses": {
          "200": {
            "description": "Delete a customer request."
          },
          "404": {
            "description": "Payment customer not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 404,
                  "codeDescription": "PAYMENT_CUSTOMER_NOT_FOUND",
                  "message": "Payment customer not found"
                }
              }
            }
          }
        },
        "description": "Deletes the payment customer resource by its id",
        "tags": [
          "Payment Customer"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Payment customer primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0e8a7f0-6d86-11ea-b77f-2e728ce88125"
          }
        ]
      },
      "patch": {
        "operationId": "payment-customer-update",
        "summary": "Update",
        "responses": {
          "200": {
            "description": "Update a payment customer.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentCustomer"
                }
              }
            }
          }
        },
        "description": "Updates the payment customer resource",
        "tags": [
          "Payment Customer"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Payment customer primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0f8a8c0-e8e3-11e9-b210-d663bd873d93"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrUpdatePaymentCustomer"
              }
            }
          },
          "required": true
        }
      }
    },
    "/payments/recipients": {
      "get": {
        "operationId": "payment-recipients-list",
        "summary": "List",
        "description": "Recovers all created payment recipients",
        "responses": {
          "200": {
            "description": "Retrieve a list of all payment recipients",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "page": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "total": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "totalPages": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PaymentRecipient"
                      },
                      "description": "List of payment recipients"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Payment Recipient"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Page size for the paging request, default: 20",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            },
            "example": "50"
          },
          {
            "description": "Page number for the paging request, default: 1",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            },
            "example": "1"
          },
          {
            "description": "Filter connectors by the `isDefault` attribute. If not sent, it won't filter.",
            "in": "query",
            "name": "isDefault",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Filter payment recipient by Pix key",
            "in": "query",
            "name": "pixKey",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "11111111111"
          },
          {
            "description": "Filter payment recipient by name",
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "John"
          }
        ]
      },
      "post": {
        "operationId": "payment-recipient-create",
        "summary": "Create",
        "responses": {
          "200": {
            "description": "Create a payment recipient.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentRecipient"
                }
              }
            }
          },
          "400": {
            "description": "Payment Recipient its Invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 400,
                  "message": "taxNumber is required"
                }
              }
            }
          }
        },
        "description": "Creates the payment recipient resource",
        "tags": [
          "Payment Recipient"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePaymentRecipient"
              }
            }
          },
          "required": true
        }
      }
    },
    "/payments/recipients/{id}": {
      "get": {
        "operationId": "payment-recipient-retrieve",
        "summary": "Retrieve",
        "responses": {
          "200": {
            "description": "Retrieve a recipient.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentRecipient"
                }
              }
            }
          },
          "404": {
            "description": "Payment Recipient not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 404,
                  "codeDescription": "PAYMENT_RECIPIENT_NOT_FOUND",
                  "message": "Payment recipient not found"
                }
              }
            }
          }
        },
        "description": "Recovers the payment recipient resource by its id",
        "tags": [
          "Payment Recipient"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Payment recipient primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0e8a7f0-6d86-11ea-b77f-2e728ce88125"
          }
        ]
      },
      "patch": {
        "operationId": "payment-recipient-update",
        "summary": "Update",
        "responses": {
          "200": {
            "description": "Update a payment recipient.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentRecipient"
                }
              }
            }
          }
        },
        "description": "Updates the payment recipient resource",
        "tags": [
          "Payment Recipient"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Payment recipient primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0f8a8c0-e8e3-11e9-b210-d663bd873d93"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePaymentRecipient"
              }
            }
          },
          "required": true
        }
      },
      "delete": {
        "operationId": "payment-recipient-delete",
        "summary": "Delete",
        "responses": {
          "200": {
            "description": "Delete a recipient."
          },
          "404": {
            "description": "Payment recipient not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 404,
                  "codeDescription": "PAYMENT_RECIPIENT_NOT_FOUND",
                  "message": "Payment recipient not found"
                }
              }
            }
          }
        },
        "description": "Deletes the payment recipient resource by its id",
        "tags": [
          "Payment Recipient"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Payment recipient primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0e8a7f0-6d86-11ea-b77f-2e728ce88125"
          }
        ]
      }
    },
    "/payments/recipients/institutions": {
      "get": {
        "operationId": "payment-recipients-institution-list",
        "summary": "List Institutions",
        "description": "Recovers all created payment institutions",
        "responses": {
          "200": {
            "description": "Retrieve a list of all payment institutions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "page": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "total": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "totalPages": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PaymentInstitution"
                      },
                      "description": "List of payment institutions"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Payment Recipient"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Page size for the paging request, default: 20",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            },
            "example": "50"
          },
          {
            "description": "Page number for the paging request, default: 1",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            },
            "example": "1"
          },
          {
            "description": "Filter institutions by name",
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Itau"
          }
        ]
      }
    },
    "/payments/recipients/institutions/{id}": {
      "get": {
        "operationId": "payment-recipient-institutions-retrieve",
        "summary": "Retrieve Institution",
        "responses": {
          "200": {
            "description": "Retrieve a payment institution.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentInstitution"
                }
              }
            }
          },
          "404": {
            "description": "Payment Institution not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 404,
                  "codeDescription": "PAYMENT_INSTITUTION_NOT_FOUND",
                  "message": "Payment institution not found"
                }
              }
            }
          }
        },
        "description": "Recovers the payment institution resource by its id",
        "tags": [
          "Payment Recipient"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Payment institution primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0e8a7f0-6d86-11ea-b77f-2e728ce88125"
          }
        ]
      }
    },
    "/payments/requests": {
      "get": {
        "operationId": "payment-requests-list",
        "summary": "List",
        "description": "Recovers all created payment requests",
        "responses": {
          "200": {
            "description": "Retrieve a list of all payment requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "page": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "total": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "totalPages": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PaymentRequest"
                      },
                      "description": "List of payment requests"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "page": 1,
                      "total": 1,
                      "totalPages": 1,
                      "results": [
                        {
                          "id": "05c693bf-c196-47ea-a28c-8251d6bb8a06",
                          "amount": 100.5,
                          "description": "Transferência",
                          "status": "CREATED",
                          "createdAt": "2023-11-06T13:03:45.689Z",
                          "updatedAt": "2023-11-06T13:03:45.689Z",
                          "callbackUrls": null,
                          "paymentUrl": "https://pay.pluggy.ai/05c693bf-c196-47ea-a28c-8251d6bb8a06",
                          "recipient": null,
                          "pixQrCode": null,
                          "isSandbox": false
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Payment Request"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Page size for the paging request, default: 20",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            },
            "example": "50"
          },
          {
            "description": "Page number for the paging request, default: 1",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            },
            "example": "1"
          },
          {
            "description": "Filter payment requests by start date. Returns only requests created **on or after** this date.",
            "in": "query",
            "name": "from",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "example": "2023-01-01"
          },
          {
            "description": "Filter payment requests by end date. Returns only requests created **on or before** this date.",
            "in": "query",
            "name": "to",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "example": "2024-01-01"
          },
          {
            "description": "Filter payment requests with one customer attribute (name, email, CPF or CNPJ)",
            "in": "query",
            "name": "customer",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "John"
          },
          {
            "description": "Filter payment requests by Pix Key",
            "in": "query",
            "name": "pixKey",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "11111111111"
          }
        ]
      },
      "post": {
        "operationId": "payment-request-create",
        "summary": "Create",
        "responses": {
          "200": {
            "description": "Success creating payment request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentRequest"
                },
                "examples": {
                  "response": {
                    "value": {
                      "id": "05c693bf-c196-47ea-a28c-8251d6bb8a06",
                      "amount": 100.5,
                      "description": "Transferência",
                      "status": "CREATED",
                      "createdAt": "2023-11-06T13:03:45.689Z",
                      "updatedAt": "2023-11-06T13:03:45.689Z",
                      "callbackUrls": null,
                      "paymentUrl": "https://pay.pluggy.ai/05c693bf-c196-47ea-a28c-8251d6bb8a06",
                      "isSandbox": false
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Creates the payment request resource",
        "tags": [
          "Payment Request"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePaymentRequest"
              },
              "examples": {
                "Plain parameters": {
                  "value": {
                    "amount": 100.5,
                    "description": "Transferência"
                  }
                }
              }
            }
          },
          "required": true
        }
      }
    },
    "/payments/requests/automatic-pix": {
      "post": {
        "operationId": "payment-request-create-automatic-pix",
        "summary": "Create Automatic PIX payment request",
        "responses": {
          "200": {
            "description": "Create a Automatic PIX payment request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentRequest"
                },
                "examples": {
                  "response": {
                    "value": {
                      "id": "d7059555-eadc-4f63-bb8c-1fb367b8dac6",
                      "description": "Automatic PIX",
                      "status": "CREATED",
                      "createdAt": "2025-06-10T17:50:12.919Z",
                      "updatedAt": "2025-06-10T17:50:12.919Z",
                      "callbackUrls": null,
                      "paymentUrl": "https://pay.pluggy.ai/d7059555-eadc-4f63-bb8c-1fb367b8dacd",
                      "bulkPaymentId": null,
                      "recipient": {
                        "type": "BANK_ACCOUNT",
                        "id": "02a1fde6-5183-4571-85cc-1ada6d25839d",
                        "name": "My recipient",
                        "taxNumber": "11111111111111",
                        "isDefault": false,
                        "paymentInstitution": {
                          "id": "6dc10a50-c8ef-4c10-a505-84e701c2cfbb",
                          "name": "Banco C6 S.A.",
                          "tradeName": "BCO C6 S.A.",
                          "ispb": "31872495",
                          "compe": "336",
                          "createdAt": "2023-12-08T11:44:20.234Z",
                          "updatedAt": "2023-12-08T11:44:20.234Z"
                        },
                        "account": {
                          "type": "*******",
                          "number": "******396",
                          "branch": "*001"
                        },
                        "pixKey": null,
                        "createdAt": "2025-06-03T20:29:10.846Z",
                        "updatedAt": "2025-06-03T20:29:10.846Z"
                      },
                      "clientPaymentId": null,
                      "customer": null,
                      "fees": null,
                      "pixQrCode": null,
                      "boleto": null,
                      "smartAccount": null,
                      "schedule": null,
                      "automaticPix": {
                        "interval": "WEEKLY",
                        "expiresAt": "2025-06-16T03:00:00Z",
                        "startDate": "2025-06-11",
                        "fixedAmount": 0.01,
                        "firstPayment": {
                          "amount": 0.01
                        }
                      },
                      "errorDetail": null,
                      "isSandbox": false
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Creates a payment request where the payment is made using automatic PIX. Once consent is granted by the user, payments can be scheduled according to the rules defined in the request.",
        "tags": [
          "Automatic PIX"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAutomaticPixPaymentRequest"
              },
              "examples": {
                "request": {
                  "value": {
                    "fixedAmount": 100.5,
                    "startDate": "2025-06-10",
                    "expiresAt": "2025-10-01T03:00:00Z",
                    "isRetryAccepted": true,
                    "firstPayment": {
                      "date": "2025-06-10",
                      "description": "Primeiro pagamento",
                      "amount": 100.5
                    },
                    "interval": "WEEKLY",
                    "callbackUrls": null,
                    "recipientId": "05c693bf-c196-47ea-a28c-8251d6bb8a06",
                    "isSandbox": false
                  }
                }
              }
            }
          },
          "required": true
        }
      }
    },
    "/payments/requests/{id}/automatic-pix/schedule": {
      "post": {
        "operationId": "payment-request-create-automatic-pix-schedule",
        "summary": "Schedule Automatic PIX payment",
        "responses": {
          "200": {
            "description": "Schedule a Automatic PIX payment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AutomaticPixPayment"
                },
                "examples": {
                  "response": {
                    "value": {
                      "id": "66d503f1-0cfa-4d64-9f87-0782d959eba7",
                      "status": "SCHEDULED",
                      "amount": 0.01,
                      "description": "Teste pagamento schedule",
                      "endToEndId": null,
                      "date": "2025-06-08",
                      "errorDetail": null,
                      "clientPaymentId": "external-ref-456",
                      "isSandbox": false
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Schedules an Automatic PIX payment",
        "tags": [
          "Automatic PIX"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScheduleAutomaticPixPaymentRequest"
              },
              "examples": {
                "request": {
                  "value": {
                    "amount": 100.5,
                    "date": "2025-06-10",
                    "description": "Transferência",
                    "clientPaymentId": "external-ref-456",
                    "isSandbox": false
                  }
                }
              }
            }
          },
          "required": true
        },
        "parameters": [
          {
            "description": "Payment request primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0e8a7f0-6d86-11ea-b77f-2e728ce88125"
          }
        ]
      }
    },
    "/payments/requests/{id}/automatic-pix/schedules": {
      "get": {
        "operationId": "payment-request-get-automatic-pix-schedules",
        "summary": "List Automatic PIX scheduled payments",
        "responses": {
          "200": {
            "description": "Recovers all automatic PIX payments from a payment request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "page": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "total": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "totalPages": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AutomaticPixPayment"
                      },
                      "description": "List of automatic PIX payments"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "page": 1,
                      "total": 1,
                      "totalPages": 1,
                      "results": [
                        {
                          "id": "66d503f1-0cfa-4d64-9f87-0782d959eba7",
                          "status": "SCHEDULED",
                          "amount": 0.01,
                          "description": "Teste pagamento schedule",
                          "endToEndId": null,
                          "date": "2025-06-08",
                          "errorDetail": null,
                          "clientPaymentId": "external-ref-456",
                          "isSandbox": false
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Lists all Automatic PIX payments from a payment request",
        "tags": [
          "Automatic PIX"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Payment request primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0e8a7f0-6d86-11ea-b77f-2e728ce88125"
          }
        ]
      }
    },
    "/payments/requests/{requestId}/automatic-pix/schedules/{paymentId}": {
      "get": {
        "operationId": "payment-request-get-automatic-pix-schedule",
        "summary": "Get an automatic PIX scheduled payment",
        "responses": {
          "200": {
            "description": "Recovers an automatic PIX scheduled payment by id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/AutomaticPixPayment"
                },
                "examples": {
                  "response": {
                    "value": {
                      "id": "66d503f1-0cfa-4d64-9f87-0782d959eba7",
                      "status": "SCHEDULED",
                      "amount": 0.01,
                      "description": "Teste pagamento schedule",
                      "endToEndId": null,
                      "date": "2025-06-08",
                      "errorDetail": null,
                      "clientPaymentId": "external-ref-456",
                      "isSandbox": false
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Recovers an automatic PIX scheduled payment by id",
        "tags": [
          "Automatic PIX"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Payment request primary identifier",
            "in": "path",
            "name": "requestId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0e8a7f0-6d86-11ea-b77f-2e728ce88125"
          },
          {
            "description": "Automatic PIX scheduled payment primary identifier",
            "in": "path",
            "name": "paymentId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0e8a7f0-6d86-11ea-b77f-2e728ce88125"
          }
        ]
      }
    },
    "/payments/requests/{id}/automatic-pix/cancel": {
      "post": {
        "operationId": "payment-request-cancel-automatic-pix-consent",
        "summary": "Cancel an automatic PIX consent",
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "description": "Cancels an automatic PIX consent",
        "tags": [
          "Automatic PIX"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Payment request primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0e8a7f0-6d86-11ea-b77f-2e728ce88125"
          }
        ]
      }
    },
    "/payments/requests/{id}/automatic-pix/schedules/{scheduleId}/cancel": {
      "post": {
        "operationId": "cancel-automatic-pix-schedule",
        "summary": "Cancel an Automatic PIX schedule",
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "description": "Cancels an Automatic PIX schedule.",
        "tags": [
          "Automatic PIX"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Payment request primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0e8a7f0-6d86-11ea-b77f-2e728ce88125"
          },
          {
            "description": "Automatic PIX schedule primary identifier",
            "in": "path",
            "name": "scheduleId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0e8a7f0-6d86-11ea-b77f-2e728ce88125"
          }
        ]
      }
    },
    "/payments/requests/{id}/automatic-pix/schedules/{scheduleId}/retry": {
      "post": {
        "operationId": "retry-automatic-pix-schedule",
        "summary": "Retry an Automatic PIX schedule",
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "description": "Retries an Automatic PIX schedule, only if the authorization accepts retries. The system allows up to 3 retry attempts. Requests must be submitted by 10pm on the day before the scheduled payment date.",
        "tags": [
          "Automatic PIX"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RetryAutomaticPixPaymentRequest"
              },
              "examples": {
                "request": {
                  "value": {
                    "date": "2025-06-10",
                    "isSandbox": false
                  }
                }
              }
            }
          },
          "required": true
        },
        "parameters": [
          {
            "description": "Payment request primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0e8a7f0-6d86-11ea-b77f-2e728ce88125"
          },
          {
            "description": "Automatic PIX schedule primary identifier",
            "in": "path",
            "name": "scheduleId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0e8a7f0-6d86-11ea-b77f-2e728ce88125"
          }
        ]
      }
    },
    "/payments/requests/pix-qr": {
      "post": {
        "operationId": "payment-request-create-pix-qr",
        "summary": "Create PIX QR payment request",
        "responses": {
          "200": {
            "description": "Create a PIX QR payment request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentRequest"
                },
                "examples": {
                  "response": {
                    "value": {
                      "id": "05c693bf-c196-47ea-a28c-8251d6bb8a06",
                      "amount": 100.5,
                      "description": "Transferência",
                      "status": "CREATED",
                      "createdAt": "2023-11-06T13:03:45.689Z",
                      "updatedAt": "2023-11-06T13:03:45.689Z",
                      "callbackUrls": null,
                      "paymentUrl": "https://pay.pluggy.ai/05c693bf-c196-47ea-a28c-8251d6bb8a06",
                      "isSandbox": false
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Creates the PIX QR payment request resource",
        "tags": [
          "Payment Request"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePixQrPaymentRequest"
              },
              "examples": {
                "request": {
                  "value": {
                    "pixQrCode": "00020126490014br.gov.bcb.pix0108dict-key0215additional-info52040000530398654031005802BR5912example-name6006Cidade62090505tx-id63045E20",
                    "callbackUrls": null,
                    "isSandbox": false
                  }
                }
              }
            }
          },
          "required": true
        }
      }
    },
    "/payments/requests/{id}": {
      "get": {
        "operationId": "payment-request-retrieve",
        "summary": "Retrieve",
        "responses": {
          "200": {
            "description": "Retrieve a payment request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentRequest"
                },
                "examples": {
                  "response": {
                    "value": {
                      "id": "05c693bf-c196-47ea-a28c-8251d6bb8a06",
                      "amount": 100.5,
                      "description": "Transferência",
                      "status": "CREATED",
                      "createdAt": "2023-11-06T13:03:45.689Z",
                      "updatedAt": "2023-11-06T13:03:45.689Z",
                      "callbackUrls": null,
                      "paymentUrl": "https://pay.pluggy.ai/05c693bf-c196-47ea-a28c-8251d6bb8a06",
                      "recipient": null,
                      "isSandbox": false
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Payment Request not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 404,
                  "codeDescription": "PAYMENT_REQUEST_NOT_FOUND",
                  "message": "Payment request not found"
                }
              }
            }
          }
        },
        "description": "Recovers the payment request resource by its id",
        "tags": [
          "Payment Request"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Payment request primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0e8a7f0-6d86-11ea-b77f-2e728ce88125"
          }
        ]
      },
      "delete": {
        "operationId": "payment-request-delete",
        "summary": "Delete",
        "responses": {
          "200": {
            "description": "Delete a payment request."
          },
          "404": {
            "description": "Payment Request not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 404,
                  "codeDescription": "PAYMENT_REQUEST_NOT_FOUND",
                  "message": "Payment request not found"
                }
              }
            }
          }
        },
        "description": "Deletes the payment request resource by its id",
        "tags": [
          "Payment Request"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Payment request primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0e8a7f0-6d86-11ea-b77f-2e728ce88125"
          }
        ]
      },
      "patch": {
        "operationId": "payment-request-update",
        "summary": "Update",
        "responses": {
          "200": {
            "description": "Update a payment request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePaymentRequest"
                },
                "examples": {
                  "response": {
                    "value": {
                      "id": "05c693bf-c196-47ea-a28c-8251d6bb8a06",
                      "amount": 100.5,
                      "description": "Transferência",
                      "status": "CREATED",
                      "createdAt": "2023-11-06T13:03:45.689Z",
                      "updatedAt": "2023-11-06T13:03:45.689Z",
                      "callbackUrls": null,
                      "paymentUrl": "https://pay.pluggy.ai/05c693bf-c196-47ea-a28c-8251d6bb8a06",
                      "isSandbox": false
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Updates the payment request resource",
        "tags": [
          "Payment Request"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Payment request primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0f8a8c0-e8e3-11e9-b210-d663bd873d93"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePaymentRequest"
              },
              "examples": {
                "Plain parameters": {
                  "value": {
                    "amount": 100.5,
                    "description": "Transferência",
                    "isSandbox": false
                  }
                }
              }
            }
          },
          "required": true
        }
      }
    },
    "/payments/requests/{id}/schedules": {
      "get": {
        "operationId": "payment-schedules-list",
        "summary": "List Schedules",
        "description": "Recovers all scheduled payments from a payment request",
        "responses": {
          "200": {
            "description": "Retrieve a list of all scheduled payments",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "page": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "total": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "totalPages": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SchedulePayment"
                      },
                      "description": "List of scheduled payments from a payment request"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "page": 1,
                      "total": 2,
                      "totalPages": 1,
                      "results": [
                        {
                          "id": "05c693bf-c196-47ea-a28c-8251d6bb8a04",
                          "scheduledDate": "2024-05-04",
                          "description": "PAGAMENTO AGENDADO 1/3",
                          "status": "ERROR",
                          "errorDetail": {
                            "code": "INSUFFICIENT_BALANCE",
                            "description": "The account doesn't have enough balance to perform the payment.",
                            "detail": "A conta selecionada não possui saldo suficiente para realizar o pagamento."
                          },
                          "isSandbox": false
                        },
                        {
                          "id": "05c693bf-c196-47ea-a28c-8251d6bb8a05",
                          "scheduledDate": "2024-06-04",
                          "description": "PAGAMENTO AGENDADO 2/3",
                          "status": "COMPLETED",
                          "errorDetail": null,
                          "endToEndId": "E44471172202505141500U29c6ff88e3",
                          "isSandbox": false
                        },
                        {
                          "id": "05c693bf-c196-47ea-a28c-8251d6bb8a06",
                          "scheduledDate": "2024-07-04",
                          "description": "PAGAMENTO AGENDADO 3/3",
                          "status": "SCHEDULED",
                          "errorDetail": null,
                          "isSandbox": false
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "Payment request primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0e8a7f0-6d86-11ea-b77f-2e728ce88125"
          }
        ],
        "tags": [
          "Payment Schedule"
        ],
        "security": [
          {
            "default": []
          }
        ]
      }
    },
    "/payments/requests/{id}/schedules/cancel": {
      "post": {
        "operationId": "payment-schedules-cancel",
        "summary": "Cancel Payment Schedule Authorization",
        "description": "",
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "parameters": [
          {
            "description": "Payment request primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0e8a7f0-6d86-11ea-b77f-2e728ce88125"
          }
        ],
        "tags": [
          "Payment Schedule"
        ],
        "security": [
          {
            "default": []
          }
        ]
      }
    },
    "/payments/requests/{id}/schedules/{scheduleId}/cancel": {
      "post": {
        "operationId": "payment-schedules-cancel-specific",
        "summary": "Cancel Payment Schedule",
        "description": "",
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "parameters": [
          {
            "description": "Payment request primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0e8a7f0-6d86-11ea-b77f-2e728ce88125"
          },
          {
            "description": "Payment schedule primary identifier",
            "in": "path",
            "name": "scheduleId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0e8a7f0-6d86-11ea-b77f-2e728ce88125"
          }
        ],
        "tags": [
          "Payment Schedule"
        ],
        "security": [
          {
            "default": []
          }
        ]
      }
    },
    "/payments/intents": {
      "post": {
        "operationId": "payment-intent-create",
        "summary": "Create",
        "responses": {
          "200": {
            "description": "Create a payment intent.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentIntent"
                }
              }
            }
          }
        },
        "description": "Creates the payment intent resource",
        "tags": [
          "Payment Intent"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePaymentIntent"
              },
              "examples": {
                "Plain parameters": {
                  "value": {
                    "paymentRequestId": "c2a6b7d9-3349-435d-8341-44021449ebbc",
                    "connectorId": 603,
                    "parameters": {
                      "cpf": "11111111111"
                    },
                    "isSandbox": false
                  }
                }
              }
            }
          },
          "required": true
        }
      },
      "get": {
        "operationId": "payment-intents-list",
        "summary": "List",
        "description": "Recovers all created payment intents for the payment request provided",
        "responses": {
          "200": {
            "description": "Retrieve a list of all payment intents for the payment request provided",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "page": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "total": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "totalPages": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PaymentIntent"
                      },
                      "description": "List of payment intents"
                    }
                  }
                },
                "examples": {
                  "payment request": {
                    "value": {
                      "page": 1,
                      "total": 1,
                      "totalPages": 1,
                      "results": [
                        {
                          "id": "4cfe1f6d-ae71-4c35-aae0-8f8a535ffbbd",
                          "status": "CONSENT_AWAITING_AUTHORIZATION",
                          "createdAt": "2023-11-06T15:38:47.861Z",
                          "updatedAt": "2023-11-06T15:38:47.861Z",
                          "paymentRequest": {
                            "id": "c2a6b7d9-3349-435d-8341-44021449ebbc",
                            "amount": 100.5,
                            "description": "Transferência",
                            "status": "IN_PROGRESS",
                            "createdAt": "2023-11-06T13:03:45.689Z",
                            "updatedAt": "2023-11-06T15:38:47.861Z",
                            "callbackUrls": null,
                            "recipient": null,
                            "paymentUrl": "https://pay.pluggy.ai/05c693bf-c196-47ea-a28c-8251d6bb8a06",
                            "isSandbox": false
                          },
                          "connector": {
                            "id": 603,
                            "name": "Bradesco",
                            "primaryColor": "e5173f",
                            "institutionUrl": "https://banco.bradesco/open-finance/logo/icones_vetorial-pf.svg",
                            "country": "BR",
                            "type": "PERSONAL_BANK",
                            "credentials": [
                              {
                                "validation": "^\\d{3}\\.?\\d{3}\\.?\\d{3}-?\\d{2}$",
                                "validationMessage": "CPF deve ter 11 números.",
                                "label": "CPF",
                                "name": "cpf",
                                "type": "number",
                                "placeholder": "",
                                "optional": false
                              }
                            ],
                            "imageUrl": "https://cdn.pluggy.ai/assets/connector-icons/203.svg",
                            "hasMFA": false,
                            "oauth": true,
                            "health": {
                              "status": "ONLINE",
                              "stage": null
                            },
                            "products": [
                              "ACCOUNTS",
                              "TRANSACTIONS",
                              "IDENTITY",
                              "CREDIT_CARDS",
                              "PAYMENT_DATA",
                              "LOANS",
                              "INVESTMENTS"
                            ],
                            "createdAt": "2023-07-12T20:20:17.253Z",
                            "isSandbox": false,
                            "isOpenFinance": true
                          },
                          "consentUrl": "https://consenturl.com"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Payment Intent"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Payment request primary identifier",
            "in": "query",
            "name": "paymentRequestId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0e8a7f0-6d86-11ea-b77f-2e728ce88125"
          }
        ]
      }
    },
    "/payments/intents/{id}": {
      "get": {
        "operationId": "payment-intent-retrieve",
        "summary": "Retrieve",
        "responses": {
          "200": {
            "description": "Retrieve a payment intent.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentIntent"
                },
                "examples": {
                  "response": {
                    "value": {
                      "id": "4cfe1f6d-ae71-4c35-aae0-8f8a535ffbbd",
                      "status": "CONSENT_AWAITING_AUTHORIZATION",
                      "createdAt": "2023-11-06T15:38:47.861Z",
                      "updatedAt": "2023-11-06T15:45:19.384Z",
                      "paymentRequest": {
                        "id": "c2a6b7d9-3349-435d-8341-44021449ebbc",
                        "amount": 100.5,
                        "description": "Transferência",
                        "status": "IN_PROGRESS",
                        "createdAt": "2023-11-06T13:03:45.689Z",
                        "updatedAt": "2023-11-06T15:45:19.401Z",
                        "callbackUrls": null,
                        "recipient": null,
                        "paymentUrl": "https://pay.pluggy.ai/05c693bf-c196-47ea-a28c-8251d6bb8a06",
                        "isSandbox": false
                      },
                      "connector": {
                        "id": 603,
                        "name": "Bradesco",
                        "primaryColor": "e5173f",
                        "institutionUrl": "https://banco.bradesco/open-finance/logo/icones_vetorial-pf.svg",
                        "country": "BR",
                        "type": "PERSONAL_BANK",
                        "credentials": [
                          {
                            "validation": "^\\d{3}\\.?\\d{3}\\.?\\d{3}-?\\d{2}$",
                            "validationMessage": "CPF deve ter 11 números.",
                            "label": "CPF",
                            "name": "cpf",
                            "type": "number",
                            "placeholder": "",
                            "optional": false
                          }
                        ],
                        "imageUrl": "https://cdn.pluggy.ai/assets/connector-icons/203.svg",
                        "hasMFA": false,
                        "oauth": true,
                        "health": {
                          "status": "ONLINE",
                          "stage": null
                        },
                        "products": [
                          "ACCOUNTS",
                          "TRANSACTIONS",
                          "IDENTITY",
                          "CREDIT_CARDS",
                          "PAYMENT_DATA",
                          "LOANS",
                          "INVESTMENTS"
                        ],
                        "createdAt": "2023-07-12T20:20:17.253Z",
                        "isSandbox": false,
                        "isOpenFinance": true
                      },
                      "consentUrl": "https://consenturl.com"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Payment Intent not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 404,
                  "codeDescription": "PAYMENT_INTENT_NOT_FOUND",
                  "message": "Payment intent not found"
                }
              }
            }
          }
        },
        "description": "Recovers the payment intent resource by its id",
        "tags": [
          "Payment Intent"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Payment intent primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0e8a7f0-6d86-11ea-b77f-2e728ce88125"
          }
        ]
      }
    },
    "/smart-transfers/preauthorizations": {
      "get": {
        "operationId": "smart-tranfers-preauthorizations-list",
        "summary": "List preauthorizations",
        "description": "Recovers all created preauthorizations",
        "responses": {
          "200": {
            "description": "Retrieve a list of all preauthorizations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "page": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "total": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "totalPages": {
                      "type": "number",
                      "format": "double",
                      "description": ""
                    },
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SmartTransferPreauthorization"
                      },
                      "description": "List of preauthorizations"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "page": 1,
                      "total": 1,
                      "totalPages": 1,
                      "results": [
                        {
                          "id": "db97ad98-5b8f-4027-a248-6e112a73ced8",
                          "status": "CREATED",
                          "consentUrl": "https://consenturl.com",
                          "clientPreauthorizationId": null,
                          "callbackUrls": null,
                          "recipients": [
                            {
                              "type": "BANK_ACCOUNT",
                              "id": "7b110544-dfcf-406a-bab7-b14f14e2d0c7",
                              "name": "John Doe",
                              "taxNumber": "11111111111",
                              "isDefault": false,
                              "paymentInstitution": {
                                "id": "abfd2a88-bc7b-407f-9fcc-395548ee6840",
                                "name": "Banco XP S.A.",
                                "tradeName": "BCO XP S.A.",
                                "ispb": "33264668",
                                "compe": "348",
                                "createdAt": "2023-12-08T17:52:21.001Z",
                                "updatedAt": "2023-12-08T17:52:21.001Z"
                              },
                              "account": {
                                "type": "CHECKING_ACCOUNT",
                                "number": "1111111",
                                "branch": "0001"
                              },
                              "pixKey": null,
                              "createdAt": "2024-07-31T15:55:47.886Z",
                              "updatedAt": "2024-07-31T15:56:23.123Z"
                            }
                          ],
                          "connector": {
                            "id": 612,
                            "name": "Nubank",
                            "primaryColor": "8a0fbe",
                            "institutionUrl": "https://nuapp.nubank.com.br/open-banking/logo.svg",
                            "country": "BR",
                            "type": "PERSONAL_BANK",
                            "credentials": [
                              {
                                "validation": "^\\d{3}\\.?\\d{3}\\.?\\d{3}-?\\d{2}$",
                                "validationMessage": "CPF deve ter 11 números.",
                                "label": "CPF",
                                "name": "cpf",
                                "type": "number",
                                "placeholder": "",
                                "optional": false
                              }
                            ],
                            "imageUrl": "https://cdn.pluggy.ai/assets/connector-icons/212.svg",
                            "hasMFA": false,
                            "oauth": true,
                            "health": {
                              "status": "ONLINE",
                              "stage": null
                            },
                            "products": [
                              "ACCOUNTS",
                              "TRANSACTIONS",
                              "IDENTITY",
                              "CREDIT_CARDS",
                              "PAYMENT_DATA",
                              "LOANS",
                              "INVESTMENTS"
                            ],
                            "createdAt": "2023-09-01T18:05:09.145Z",
                            "isSandbox": false,
                            "isOpenFinance": true,
                            "updatedAt": "2024-07-31T15:33:57.512Z",
                            "supportsPaymentInitiation": true,
                            "supportsScheduledPayments": true,
                            "supportsSmartTransfers": true,
                            "supportsBoletoManagement": true
                          },
                          "isSandbox": false
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Smart Transfer"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Page size for the paging request, default: 20",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            },
            "example": "50"
          },
          {
            "description": "Page number for the paging request, default: 1",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            },
            "example": "1"
          }
        ]
      },
      "post": {
        "operationId": "smart-transfer-preauthorization-create",
        "summary": "Create preauthorization",
        "responses": {
          "200": {
            "description": "Create a Smart Transfer Preauthorization.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmartTransferPreauthorization"
                }
              }
            }
          },
          "400": {
            "description": "Preauthorization is Invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 400,
                  "message": "each value in recipientIds must be a UUID"
                }
              }
            }
          }
        },
        "description": "Creates the smart transfer preauthorization resource",
        "tags": [
          "Smart Transfer"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSmartTransferPreauthorization"
              }
            }
          },
          "required": true
        }
      }
    },
    "/smart-transfers/preauthorizations/{id}": {
      "get": {
        "operationId": "smart-transfer-preauthorization-retrieve",
        "summary": "Retrieve preauthorization",
        "responses": {
          "200": {
            "description": "Retrieve a preauthorization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmartTransferPreauthorization"
                }
              }
            }
          },
          "404": {
            "description": "Smart Transfer Preauthorization not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 404,
                  "codeDescription": "SMART_TRANSFER_PREAUTHORIZATION_NOT_FOUND",
                  "message": "Smart Transfer Preauthorization not found"
                }
              }
            }
          }
        },
        "description": "Recovers the smart transfer preauthorization resource by its id",
        "tags": [
          "Smart Transfer"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Preauthorization primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0e8a7f0-6d86-11ea-b77f-2e728ce88125"
          }
        ]
      }
    },
    "/smart-transfers/payments": {
      "post": {
        "operationId": "smart-transfer-payment-create",
        "summary": "Create payment",
        "responses": {
          "200": {
            "description": "Create a Smart Transfer Payment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmartTransferPayment"
                }
              }
            }
          },
          "400": {
            "description": "Payment is Invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 400,
                  "message": "recipientId must be a UUID"
                }
              }
            }
          }
        },
        "description": "Creates the smart transfer payment resource",
        "tags": [
          "Smart Transfer"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSmartTransferPayment"
              }
            }
          },
          "required": true
        }
      }
    },
    "/smart-transfers/payments/{id}": {
      "get": {
        "operationId": "smart-transfer-paymentretrieve",
        "summary": "Retrieve payment",
        "responses": {
          "200": {
            "description": "Retrieve a payment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmartTransferPayment"
                }
              }
            }
          },
          "404": {
            "description": "Smart Transfer Payment not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalErrorResponse"
                },
                "example": {
                  "code": 404,
                  "codeDescription": "SMART_TRANSFER_PAYMENT_NOT_FOUND",
                  "message": "Smart Transfer Payment not found"
                }
              }
            }
          }
        },
        "description": "Recovers the smart transfer payment resource by its id",
        "tags": [
          "Smart Transfer"
        ],
        "security": [
          {
            "default": []
          }
        ],
        "parameters": [
          {
            "description": "Payment primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d0e8a7f0-6d86-11ea-b77f-2e728ce88125"
          }
        ]
      }
    },
    "/boleto-connections": {
      "post": {
        "operationId": "boleto-connection-create",
        "summary": "Connect boleto credentials",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBoletoConnection"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Boleto connection created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BoletoConnection"
                }
              }
            }
          },
          "400": {
            "description": "Incorrect credentials",
            "content": {
              "application/json": {
                "example": {
                  "message": "INVALID_CREDENTIALS",
                  "code": 400,
                  "codeDescription": "BOLETO_CONNECTION_CREATION_CREDENTIALS_ERROR",
                  "errorId": "10aa01fe-4587-404e-8ec3-3ae5f6a63a5d"
                }
              }
            }
          }
        },
        "tags": [
          "Boleto Management"
        ],
        "security": [
          {
            "default": []
          }
        ]
      }
    },
    "/boleto-connections/from-item": {
      "post": {
        "operationId": "boleto-connection-create-from-item",
        "summary": "Create boleto connection from Item",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBoletoConnectionFromItem"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Boleto connection created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BoletoConnection"
                }
              }
            }
          }
        },
        "tags": [
          "Boleto Management"
        ],
        "security": [
          {
            "default": []
          }
        ]
      }
    },
    "/boletos": {
      "post": {
        "operationId": "boleto-create",
        "summary": "Issue Boleto",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBoleto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Boleto created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssuedBoleto"
                }
              }
            }
          }
        },
        "tags": [
          "Boleto Management"
        ],
        "security": [
          {
            "default": []
          }
        ]
      }
    },
    "/boletos/{id}/cancel": {
      "post": {
        "operationId": "boleto-cancel",
        "summary": "Cancel Boleto",
        "parameters": [
          {
            "description": "Boleto primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "82da0d63-fbc0-4e20-b191-50e6df030875"
          }
        ],
        "responses": {
          "200": {
            "description": "Boleto cancelled successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssuedBoleto"
                }
              }
            }
          }
        },
        "tags": [
          "Boleto Management"
        ],
        "security": [
          {
            "default": []
          }
        ]
      }
    },
    "/boletos/{id}": {
      "get": {
        "operationId": "boleto-get",
        "summary": "Get Boleto",
        "parameters": [
          {
            "description": "Boleto primary identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "82da0d63-fbc0-4e20-b191-50e6df030875"
          }
        ],
        "responses": {
          "200": {
            "description": "Issued Boleto",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssuedBoleto"
                }
              }
            }
          }
        },
        "tags": [
          "Boleto Management"
        ],
        "security": [
          {
            "default": []
          }
        ]
      }
    }
  },
  "servers": [
    {
      "url": "https://api.pluggy.ai",
      "description": "Pluggy API"
    }
  ],
  "components": {
    "requestBodies": {
      "CreateWebhook": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreateWebhook"
            }
          }
        },
        "description": "Expects the following webhooks parameters:\nevent: One of the event types that are supported.\nurl: An https url that will receive the POST of the event.\nheaders: optional key-value pairs to send with the POST of the event.",
        "required": true
      }
    },
    "securitySchemes": {
      "default": {
        "type": "apiKey",
        "name": "X-API-KEY",
        "in": "header"
      }
    },
    "schemas": {
      "BankData": {
        "description": "Bank account additional fields",
        "properties": {
          "transferNumber": {
            "type": "string",
            "description": "Complete number of the bank account `(agency code / account number)`"
          },
          "closingBalance": {
            "type": "number",
            "format": "double",
            "description": "Balance including not posted transactions"
          },
          "automaticallyInvestedBalance": {
            "type": "number",
            "format": "double",
            "description": "Balance automatically invested in the account by the FI"
          },
          "overdraftContractedLimit": {
            "type": "number",
            "format": "double",
            "description": "Overdraft contracted limit"
          },
          "overdraftUsedLimit": {
            "type": "number",
            "format": "double",
            "description": "Overdraft used limit"
          },
          "unarrangedOverdraftAmount": {
            "type": "number",
            "format": "double",
            "description": "Valor de operação contratada em caráter emergencial para cobertura de saldo devedor em conta de depósitos à vista e de excesso sobre o limite pactuado de cheque especial."
          }
        },
        "type": "object"
      },
      "CreditData": {
        "description": "Credit account additional fields",
        "properties": {
          "level": {
            "type": "string",
            "description": "Card level (Black, Signature)"
          },
          "brand": {
            "type": "string",
            "description": "Card Brand (Visa, Mastercard, Elo)"
          },
          "balanceCloseDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the balance was closed"
          },
          "balanceDueDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the balance is dued"
          },
          "availableCreditLimit": {
            "type": "number",
            "format": "double",
            "description": "Credit limit available to spent"
          },
          "balanceForeignCurrency": {
            "type": "number",
            "format": "double",
            "description": "Balance in USD"
          },
          "minimumPayment": {
            "type": "number",
            "format": "double",
            "description": "Minimum payment due"
          },
          "creditLimit": {
            "type": "number",
            "format": "double",
            "description": "Maximum amount that can be spent"
          },
          "status": {
            "enum": [
              "ACTIVE",
              "BLOCKED",
              "CANCELLED"
            ],
            "type": "string",
            "description": "Credit card status"
          },
          "holderType": {
            "enum": [
              "MAIN",
              "ADDITIONAL"
            ],
            "type": "string",
            "description": "Credit card holder type"
          },
          "disaggregatedCreditLimits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DisaggregatedCreditLimit"
            },
            "description": "Disaggregated credit card limits"
          },
          "additionalCards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdditionalCard"
            },
            "description": "Additional credit cards associated with the main one"
          }
        },
        "type": "object"
      },
      "AdditionalCard": {
        "description": "Additional credit card data",
        "properties": {
          "number": {
            "type": "string",
            "description": "Number of the additional credit card"
          }
        },
        "type": "object",
        "required": [
          "number"
        ]
      },
      "DisaggregatedCreditLimit": {
        "description": "Disaggregated credit card limit",
        "properties": {
          "creditLineLimitType": {
            "type": "string",
            "description": "Limit type (LIMITE_CREDITO_TOTAL or LIMITE_CREDITO_MODALIDADE_OPERACAO)"
          },
          "consolidationType": {
            "type": "string",
            "description": "Indicates if the limit is consolidated or individual"
          },
          "identificationNumber": {
            "type": "string",
            "description": "Identification number of the additional credit card"
          },
          "isLimitFlexible": {
            "type": "boolean",
            "description": "Indicates if the limit is flexible"
          },
          "usedAmount": {
            "type": "number",
            "format": "double",
            "description": "Used amount of the additional credit card"
          },
          "usedAmountCurrencyCode": {
            "type": "string",
            "description": "Used amount currency code (for example, BRL)"
          },
          "lineName": {
            "type": "string",
            "description": "Name of the line (for example, 'Limite de Crédito')"
          },
          "lineNameAdditionalInfo": {
            "type": "string",
            "description": "Additional information about the line name"
          },
          "limitAmount": {
            "type": "number",
            "format": "double",
            "description": "Limit amount of the additional credit card"
          },
          "limitAmountCurrencyCode": {
            "type": "string",
            "description": "Limit amount currency code (for example, BRL)"
          },
          "availableAmount": {
            "type": "number",
            "format": "double",
            "description": "Available amount of the additional credit card"
          },
          "availableAmountCurrencyCode": {
            "type": "string",
            "description": "Available amount currency code (for example, BRL)"
          }
        },
        "type": "object",
        "required": [
          "creditLineLimitType",
          "consolidationType",
          "identificationNumber",
          "isLimitFlexible",
          "usedAmount",
          "usedAmountCurrencyCode"
        ]
      },
      "Account": {
        "description": "Account of type bank",
        "properties": {
          "id": {
            "type": "string",
            "description": "Primary account identifier",
            "example": "a658c848-e475-457b-8565-d1fffba127c4"
          },
          "type": {
            "enum": [
              "BANK",
              "CREDIT"
            ],
            "type": "string",
            "description": "Type of account, may be BANK or CREDIT",
            "example": "BANK"
          },
          "subtype": {
            "enum": [
              "SAVINGS_ACCOUNT",
              "CHECKING_ACCOUNT",
              "CREDIT_CARD"
            ],
            "type": "string",
            "description": "Subtype of corresponding type of account",
            "example": "SAVINGS_ACCOUNT"
          },
          "number": {
            "type": "string",
            "description": "External identifier of the account",
            "example": "40114687/1234"
          },
          "name": {
            "type": "string",
            "description": "Name of the account in a descriptive format",
            "example": "Conta Corrente"
          },
          "marketingName": {
            "type": "string",
            "description": "Name of the account as defined externally",
            "example": "SIGNATURE CJA. AHORRO PESOS"
          },
          "balance": {
            "type": "number",
            "format": "double",
            "description": "Funds of the account",
            "example": 120950.0
          },
          "itemId": {
            "type": "string",
            "description": "Attached item's primary identifier",
            "format": "uuid",
            "example": "a0922d6f-2007-4169-a181-b961500608db"
          },
          "taxNumber": {
            "type": "string",
            "description": "Tax ID of the corresponding owner",
            "example": "416.799.495-00"
          },
          "owner": {
            "type": "string",
            "description": "Name of the owner of the account",
            "example": "John Doe"
          },
          "currencyCode": {
            "type": "string",
            "description": "Code referencing the currency of the balance",
            "example": "BRL"
          },
          "bankData": {
            "$ref": "#/components/schemas/BankData"
          },
          "creditData": {
            "$ref": "#/components/schemas/CreditData"
          }
        },
        "type": "object",
        "required": [
          "id",
          "type",
          "subtype",
          "number",
          "name",
          "balance",
          "itemId",
          "currencyCode"
        ]
      },
      "CredentialSelectOption": {
        "description": "Option for ConnectorCredential of type select",
        "properties": {
          "value": {
            "type": "string",
            "description": "Value for the option"
          },
          "label": {
            "type": "string",
            "description": "Label for the option"
          }
        },
        "type": "object",
        "required": [
          "value",
          "label"
        ]
      },
      "ConnectorCredential": {
        "description": "Credential details for a connector",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the key"
          },
          "label": {
            "type": "string",
            "description": "Label for input"
          },
          "type": {
            "enum": [
              "text",
              "password",
              "number",
              "image",
              "select"
            ],
            "type": "string",
            "description": "Type of credential required"
          },
          "assistiveText": {
            "type": "string",
            "description": "Text to help the user when completing the input"
          },
          "data": {
            "type": "string",
            "description": "Used to return base64 images"
          },
          "placeholder": {
            "type": "string",
            "description": "Placeholder text for the input"
          },
          "validation": {
            "type": "string",
            "description": "Regex validation for the user's input"
          },
          "validationMessage": {
            "type": "string",
            "description": "Validation message when input doesn't match the regex"
          },
          "mfa": {
            "type": "boolean",
            "description": "Credential is an MFA parameter and must be refreshed on each execution"
          },
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CredentialSelectOption"
            },
            "description": "List of possible values for the input"
          }
        },
        "type": "object",
        "required": [
          "name",
          "label",
          "type"
        ]
      },
      "ConnectorUserAction": {
        "description": "User action details for an item",
        "properties": {
          "instructions": {
            "type": "string",
            "description": "Instructions related to the user action"
          },
          "attributes": {
            "type": "object",
            "description": "'{ [key]:[value] }'. Additional information related to the user action, for exampke in some device authorization flow"
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time",
            "description": "User action expiration date"
          }
        },
        "type": "object",
        "required": [
          "instructions"
        ]
      },
      "Connector": {
        "description": "Connector object",
        "properties": {
          "id": {
            "type": "number",
            "format": "integer",
            "description": "Primary identifier"
          },
          "name": {
            "type": "string",
            "description": "Name of the institution"
          },
          "institutionUrl": {
            "type": "string",
            "description": "Homepage of the institution"
          },
          "imageUrl": {
            "type": "string",
            "description": "Image of the logo hosted by Pluggy"
          },
          "primaryColor": {
            "type": "string",
            "description": "Primary color"
          },
          "type": {
            "type": "string",
            "description": "Type of institution"
          },
          "country": {
            "type": "string",
            "description": "Country located"
          },
          "credentials": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConnectorCredential"
            },
            "description": "Parameters required to start the connection"
          },
          "hasMFA": {
            "type": "boolean",
            "description": "Does the connector require an MFA to execute?"
          },
          "products": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ACCOUNTS",
                "CREDIT_CARDS",
                "TRANSACTIONS",
                "PAYMENT_DATA",
                "INVESTMENTS",
                "INVESTMENTS_TRANSACTIONS",
                "IDENTITY",
                "BROKERAGE_NOTE",
                "MOVE_SECURITY",
                "LOANS"
              ]
            },
            "description": "Products supported by the connector"
          },
          "oauth": {
            "type": "boolean",
            "description": "If 'true', the connector requires an Oauth flow to execute"
          },
          "oauthUrl": {
            "type": "string",
            "description": "URL to perform Oauth flow if needed"
          },
          "resetPasswordUrl": {
            "type": "string",
            "description": "URL to the financial institution to reset the password"
          },
          "health": {
            "$ref": "#/components/schemas/ConnectorHealth"
          },
          "isOpenFinance": {
            "type": "boolean",
            "description": "Indicates if the connector uses the regulated Open Finance APIs"
          },
          "supportsPaymentInitiation": {
            "type": "boolean",
            "description": "Indicates if the connector supports the payment initiation API"
          },
          "supportsScheduledPayments": {
            "type": "boolean",
            "description": "Indicates if the connector supports scheduled payments"
          },
          "supportsSmartTransfers": {
            "type": "boolean",
            "description": "Indicates if the connector supports smart transfers"
          },
          "supportsBoletoManagement": {
            "type": "boolean",
            "description": "Indicates if the connector supports boleto management"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date of creation"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date of last modification"
          }
        },
        "type": "object",
        "required": [
          "id"
        ],
        "example": {
          "id": 601,
          "name": "Itaú",
          "primaryColor": "EC7000",
          "institutionUrl": "https://www.itau.com.br",
          "country": "BR",
          "type": "PERSONAL_BANK",
          "credentials": [
            {
              "validation": "^\\d{3}\\.?\\d{3}\\.?\\d{3}-?\\d{2}$",
              "validationMessage": "CPF deve ter 11 números.",
              "label": "CPF",
              "name": "cpf",
              "type": "number",
              "placeholder": "",
              "optional": false
            }
          ],
          "imageUrl": "https://cdn.pluggy.ai/assets/connector-icons/201.svg",
          "hasMFA": false,
          "oauth": true,
          "health": {
            "status": "ONLINE",
            "stage": null
          },
          "products": [
            "ACCOUNTS",
            "TRANSACTIONS",
            "IDENTITY",
            "CREDIT_CARDS",
            "PAYMENT_DATA",
            "LOANS",
            "INVESTMENTS"
          ],
          "createdAt": "2023-09-01T18:05:09.145Z",
          "isSandbox": false,
          "isOpenFinance": true,
          "updatedAt": "2024-07-16T15:34:08.028Z",
          "supportsPaymentInitiation": true,
          "supportsScheduledPayments": true,
          "supportsSmartTransfers": true,
          "supportsBoletoManagement": true
        }
      },
      "ConnectorListResponse": {
        "description": "Connector List Response",
        "type": "object",
        "properties": {
          "page": {
            "type": "number",
            "format": "double",
            "description": ""
          },
          "total": {
            "type": "number",
            "format": "double",
            "description": ""
          },
          "totalPages": {
            "type": "number",
            "format": "double",
            "description": ""
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Connector"
            },
            "description": ""
          }
        },
        "example": {
          "page": 1,
          "total": 1,
          "totalPages": 1,
          "results": [
            {
              "id": 601,
              "name": "Itaú",
              "primaryColor": "EC7000",
              "institutionUrl": "https://www.itau.com.br/assets/dam/publisher/07_itau_empresas/13_open_banking/logos_regulatorio_bacen/opb_log_reg_bac_itau_img_01.svg",
              "country": "BR",
              "type": "PERSONAL_BANK",
              "credentials": [
                {
                  "validation": "^\\d{3}\\.?\\d{3}\\.?\\d{3}-?\\d{2}$",
                  "validationMessage": "CPF deve ter 11 números.",
                  "label": "CPF",
                  "name": "cpf",
                  "type": "number",
                  "placeholder": "",
                  "optional": false
                }
              ],
              "imageUrl": "https://cdn.pluggy.ai/assets/connector-icons/201.svg",
              "hasMFA": false,
              "oauth": true,
              "health": {
                "status": "ONLINE",
                "stage": null
              },
              "products": [
                "ACCOUNTS",
                "TRANSACTIONS",
                "IDENTITY",
                "CREDIT_CARDS",
                "PAYMENT_DATA",
                "LOANS",
                "INVESTMENTS"
              ],
              "createdAt": "2023-09-01T18:05:09.145Z",
              "isSandbox": false,
              "isOpenFinance": true,
              "updatedAt": "2024-07-16T15:34:08.028Z",
              "supportsPaymentInitiation": true,
              "supportsScheduledPayments": true,
              "supportsSmartTransfers": true,
              "supportsBoletoManagement": true
            }
          ]
        }
      },
      "ConnectorHealth": {
        "description": "Connector health status",
        "properties": {
          "status": {
            "type": "string",
            "description": "'ONLINE' | 'OFFLINE' | 'UNSTABLE'"
          },
          "stage": {
            "type": "string"
          },
          "details": {
            "type": "object",
            "description": "Statistics about your recent connections on the connector and recent connection rate (percentage of healthy connections). This field is only present if you include the parameter healthDetails=true. This will be null if there was an error obtaining health details.",
            "properties": {
              "connectionRateLast6Hours": {
                "type": "number",
                "description": "A number from 0 to 100: the percentage of executions that succesfully connect to the institution: status of CONNECTION_ERROR,ERROR,SITE_NOT_AVAILABLE decrease the percentage. Any other status (like SUCCESS/LOGIN_ERROR) increase the percentage. The value will be null if there were no connections"
              },
              "connectionsLast6Hours": {
                "type": "number",
                "description": "Amount of your connections for this connector during the last 6 hours. 0 if there were no connections"
              }
            }
          }
        }
      },
      "Item": {
        "description": "Item object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Primary identifier"
          },
          "connector": {
            "$ref": "#/components/schemas/Connector"
          },
          "status": {
            "type": "string",
            "description": "Status of the Item"
          },
          "executionStatus": {
            "type": "string",
            "description": "Status of the sync execution"
          },
          "error": {
            "type": "object",
            "description": "Detailed error message",
            "properties": {
              "code": {
                "type": "string",
                "description": "Error code"
              },
              "message": {
                "type": "string",
                "description": "Detailed error message"
              },
              "providerMessage": {
                "type": "string",
                "description": "Information provider by the institution mainly when user needs to perform an action"
              },
              "attributes": {
                "type": "object",
                "description": "'{ [key]:[value] }'. Additional information necessary for future executions, used for example in some device authorization flow"
              }
            },
            "required": [
              "code",
              "message"
            ]
          },
          "parameter": {
            "$ref": "#/components/schemas/ConnectorCredential"
          },
          "userAction": {
            "$ref": "#/components/schemas/ConnectorUserAction"
          },
          "webhookUrl": {
            "type": "string",
            "description": "Url to be notified of item changes"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date of creation"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date of last modification"
          },
          "lastUpdatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date of last syncronization"
          },
          "statusDetail": {
            "$ref": "#/components/schemas/StatusDetail"
          },
          "nextAutoSyncAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date of next auto-sync, or null if auto-sync is disabled for this Item"
          },
          "consecutiveFailedLoginAttempts": {
            "type": "number",
            "format": "integer",
            "description": "Consecutives execution that ends up with a LOGIN_ERROR status"
          },
          "consentExpiresAt": {
            "type": "string",
            "format": "date-time",
            "description": "Consent expiration date"
          },
          "products": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ACCOUNTS",
                "CREDIT_CARDS",
                "TRANSACTIONS",
                "PAYMENT_DATA",
                "INVESTMENTS",
                "INVESTMENTS_TRANSACTIONS",
                "IDENTITY",
                "BROKERAGE_NOTE",
                "MOVE_SECURITY",
                "LOANS"
              ]
            },
            "description": "Products collected by the item"
          }
        },
        "type": "object",
        "required": [
          "id",
          "status",
          "executionStatus"
        ],
        "example": {
          "id": "e062ab2b-9006-45e8-b689-defabba53647",
          "connector": {
            "id": 200,
            "name": "MeuPluggy",
            "primaryColor": "ef294b",
            "institutionUrl": "https://meu.pluggy.ai/",
            "country": "BR",
            "type": "PERSONAL_BANK",
            "credentials": [],
            "imageUrl": "https://cdn.pluggy.ai/assets/connector-icons/sandbox.svg",
            "hasMFA": false,
            "oauth": true,
            "health": {
              "status": "ONLINE",
              "stage": null
            },
            "products": [
              "ACCOUNTS",
              "TRANSACTIONS",
              "CREDIT_CARDS",
              "INVESTMENTS",
              "INVESTMENTS_TRANSACTIONS",
              "PAYMENT_DATA",
              "IDENTITY",
              "BROKERAGE_NOTE"
            ],
            "createdAt": "2023-09-12T16:44:13.900Z",
            "isSandbox": false,
            "isOpenFinance": false,
            "updatedAt": "2024-11-26T13:33:44.296Z",
            "supportsPaymentInitiation": false,
            "supportsScheduledPayments": false,
            "supportsSmartTransfers": false,
            "supportsBoletoManagement": false
          },
          "createdAt": "2024-09-19T13:10:31.212Z",
          "updatedAt": "2024-09-19T13:11:23.613Z",
          "status": "UPDATED",
          "executionStatus": "SUCCESS",
          "lastUpdatedAt": "2024-09-19T13:11:23.595Z",
          "webhookUrl": null,
          "error": null,
          "clientUserId": "gabriel@pluggy.ai",
          "consecutiveFailedLoginAttempts": 0,
          "statusDetail": null,
          "parameter": null,
          "userAction": null,
          "nextAutoSyncAt": null,
          "consentExpiresAt": null,
          "products": [
            "ACCOUNTS",
            "CREDIT_CARDS",
            "TRANSACTIONS",
            "INVESTMENTS",
            "IDENTITY",
            "INVESTMENTS_TRANSACTIONS",
            "PAYMENT_DATA"
          ],
          "oauthRedirectUri": null
        }
      },
      "CreateItem": {
        "description": "Create Item Request",
        "properties": {
          "connectorId": {
            "type": "number",
            "description": "Primary identifier of the connector"
          },
          "parameters": {
            "oneOf": [
              {
                "type": "object"
              },
              {
                "type": "string"
              }
            ],
            "properties": {},
            "description": "Connector's credentials that are required to execute on a Key-Value object or a string if they are encrypted",
            "additionalProperties": {
              "type": "string"
            }
          },
          "webhookUrl": {
            "type": "string",
            "format": "uri",
            "description": "Url to be notified of item changes"
          },
          "clientUserId": {
            "type": "string",
            "description": "Client's external identifier for the user, it can be a ID, UUID or even an email. This is free for clients to use."
          },
          "oauthRedirectUri": {
            "type": "string",
            "format": "uri",
            "description": "Redirect URI required for the Oauth flow"
          },
          "products": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ACCOUNTS",
                "CREDIT_CARDS",
                "TRANSACTIONS",
                "PAYMENT_DATA",
                "INVESTMENTS",
                "INVESTMENTS_TRANSACTIONS",
                "IDENTITY",
                "BROKERAGE_NOTE",
                "MOVE_SECURITY",
                "LOANS"
              ]
            },
            "description": "Products to be collected in the connection"
          },
          "avoidDuplicates": {
            "type": "boolean",
            "description": "Avoids creating a new item if there is already one with the same credentials"
          }
        },
        "type": "object",
        "required": [
          "connectorId",
          "parameters"
        ],
        "example": {
          "connectorId": 2,
          "parameters": {
            "user": "user-ok",
            "password": "password-ok"
          },
          "webhookUrl": "https://example.com/webhook"
        }
      },
      "UpdateItem": {
        "description": "Update Item Request",
        "properties": {
          "parameters": {
            "oneOf": [
              {
                "type": "object"
              },
              {
                "type": "string"
              }
            ],
            "properties": {},
            "description": "Parameters to update on the item stored credentials.",
            "additionalProperties": {
              "type": "string"
            }
          },
          "clientUserId": {
            "type": "string",
            "description": "Client's external identifier for the user, it can be a ID, UUID or even an email. This is free for clients to use."
          },
          "webhookUrl": {
            "type": "string",
            "format": "uri",
            "description": "Url to be notified of item changes"
          },
          "products": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ACCOUNTS",
                "CREDIT_CARDS",
                "TRANSACTIONS",
                "PAYMENT_DATA",
                "INVESTMENTS",
                "INVESTMENTS_TRANSACTIONS",
                "IDENTITY",
                "BROKERAGE_NOTE",
                "MOVE_SECURITY",
                "LOANS"
              ]
            },
            "description": "Products to be collected in the connection"
          }
        },
        "type": "object",
        "example": {
          "webhookUrl": "https://example.com/webhook",
          "clientUserId": "My User App Id",
          "parameters": {
            "user": "user-ok",
            "password": "password-ok"
          }
        }
      },
      "StatusDetail": {
        "description": "Detailed status of the item. This field will be present when the status is PARTIAL_SUCCESS or when a product in the item has warnings",
        "type": "object",
        "properties": {
          "accounts": {
            "$ref": "#/components/schemas/StatusDetailProduct"
          },
          "creditCards": {
            "$ref": "#/components/schemas/StatusDetailProduct"
          },
          "transactions": {
            "$ref": "#/components/schemas/StatusDetailProduct"
          },
          "investments": {
            "$ref": "#/components/schemas/StatusDetailProduct"
          },
          "identity": {
            "$ref": "#/components/schemas/StatusDetailProduct"
          },
          "investmentsTransactions": {
            "$ref": "#/components/schemas/StatusDetailProduct"
          },
          "paymentData": {
            "$ref": "#/components/schemas/StatusDetailProduct"
          },
          "loans": {
            "$ref": "#/components/schemas/StatusDetailProduct"
          }
        },
        "example": {
          "accounts": {
            "isUpdated": true,
            "lastUpdatedAt": "2022-03-08T22:43:04.796Z"
          },
          "identity": {
            "isUpdated": false,
            "lastUpdatedAt": null
          },
          "creditCards": {
            "isUpdated": true,
            "lastUpdatedAt": "2022-03-08T22:43:04.796Z"
          },
          "investments": {
            "isUpdated": true,
            "lastUpdatedAt": "2022-03-08T22:43:04.796Z"
          },
          "transactions": {
            "isUpdated": true,
            "lastUpdatedAt": "2022-03-08T22:43:04.796Z"
          },
          "paymentData": null
        }
      },
      "StatusDetailProduct": {
        "description": "Detailed status of the product",
        "type": "object",
        "properties": {
          "lastUpdatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the product was last updated"
          },
          "isUpdated": {
            "type": "boolean",
            "description": "Product was updated in the last execution"
          },
          "warnings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StatusDetailProductWarning"
            },
            "description": "Warnings about the product data. For example, a warning about missing permissions for viewing a product"
          }
        },
        "example": {
          "isUpdated": true,
          "lastUpdatedAt": "2022-03-08T22:43:04.796Z"
        }
      },
      "StatusDetailProductWarning": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The warning code generated by Pluggy"
          },
          "message": {
            "type": "string",
            "description": "The warning message in english generated by Pluggy"
          },
          "providerMessage": {
            "type": "string",
            "description": "The warning message from the FI if provided"
          }
        },
        "required": [
          "code",
          "message"
        ]
      },
      "ICountResponse": {
        "description": "Deletion response",
        "properties": {
          "count": {
            "type": "number",
            "description": "Amount of items deleted"
          }
        },
        "type": "object",
        "required": [
          "count"
        ],
        "example": {
          "count": 1
        }
      },
      "Webhook": {
        "description": "",
        "properties": {
          "id": {
            "type": "string",
            "description": "UUID identifier for the entity"
          },
          "url": {
            "type": "string",
            "description": "Url to be notified of item changes"
          },
          "event": {
            "enum": [
              "all",
              "item/created",
              "item/updated",
              "item/error",
              "item/deleted",
              "item/waiting_user_input",
              "item/waiting_user_action",
              "item/login_succeeded",
              "connector/status_updated",
              "payment_request/updated"
            ],
            "type": "string",
            "description": ""
          },
          "disabledAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the webhook was disabled"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when it was created"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date of the last update"
          }
        },
        "type": "object",
        "required": [
          "id",
          "url",
          "event"
        ]
      },
      "CreateWebhook": {
        "description": "",
        "properties": {
          "url": {
            "type": "string",
            "description": ""
          },
          "event": {
            "enum": [
              "all",
              "item/created",
              "item/updated",
              "item/error",
              "item/deleted",
              "item/waiting_user_input",
              "item/waiting_user_action",
              "item/login_succeeded",
              "connector/status_updated",
              "transactions/created",
              "transactions/updated",
              "transactions/deleted",
              "payment_intent/created",
              "payment_intent/completed",
              "payment_intent/waiting_payer_authorization",
              "payment_intent/error",
              "scheduled_payment/created",
              "scheduled_payment/completed",
              "scheduled_payment/error",
              "scheduled_payment/canceled",
              "scheduled_payment/all_completed",
              "payment_refund/completed",
              "payment_refund/error",
              "boleto/updated",
              "payment_request/updated"
            ],
            "type": "string",
            "description": ""
          },
          "headers": {
            "type": "object",
            "description": "HTTP headers that will be included in the webhook notifications (useful for things like authorization)"
          }
        },
        "type": "object",
        "required": [
          "url",
          "event"
        ]
      },
      "ParameterValidationError": {
        "description": "",
        "properties": {
          "code": {
            "type": "string",
            "description": ""
          },
          "message": {
            "type": "string",
            "description": ""
          },
          "parameter": {
            "type": "string",
            "description": ""
          }
        },
        "type": "object",
        "required": [
          "code",
          "message",
          "parameter"
        ]
      },
      "ItemParameter": {
        "description": "Key-Value credentials neccesary to create an item",
        "properties": {},
        "additionalProperties": {
          "type": "string"
        },
        "type": "object",
        "example": {
          "user": "my-user",
          "password": "my-password"
        }
      },
      "PaymentIntentParameter": {
        "description": "Credentials neccesary to create a payment intent",
        "properties": {
          "cpf": {
            "type": "string",
            "description": "CPF of the payer"
          },
          "cnpj": {
            "type": "string",
            "description": "CNPJ of the payer"
          },
          "name": {
            "type": "string",
            "description": "Name of the payer. Only required for automatic pix payment requests."
          }
        },
        "type": "object",
        "example": {
          "cpf": "416.799.495-00",
          "cnpj": "41.679.495/0001-00"
        },
        "required": [
          "cpf"
        ]
      },
      "ParameterValidationResponse": {
        "description": "Response to parameter's validations",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ParameterValidationError"
            },
            "description": ""
          },
          "parameters": {
            "$ref": "#/components/schemas/ItemParameter"
          }
        },
        "type": "object",
        "example": {
          "parameters": {
            "user": "my-user",
            "password": "1234"
          },
          "errors": [
            {
              "code": "002",
              "message": "A senha deve ter pelo menos 6 dígitos.",
              "parameter": "password",
              "data": {
                "min": 6
              }
            }
          ]
        }
      },
      "Document": {
        "description": "Document object containing type & value",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of document",
            "example": "CPF",
            "enum": [
              "CPF",
              "CNPJ"
            ]
          },
          "value": {
            "type": "string",
            "description": "Formatted value of the document",
            "example": "416.799.495-00"
          }
        },
        "type": "object"
      },
      "PaymentDataParticipant": {
        "description": "Participant of the payment data",
        "properties": {
          "documentNumber": {
            "$ref": "#/components/schemas/Document"
          },
          "name": {
            "type": "string",
            "description": "Fullname of the participant"
          },
          "accountNumber": {
            "type": "string",
            "description": "Account number on the branch"
          },
          "branchNumber": {
            "type": "string",
            "description": "Agency number"
          },
          "routingNumber": {
            "type": "string",
            "description": "COMPE Bank number"
          },
          "routingNumberISPB": {
            "type": "string",
            "description": "ISPB Bank number"
          }
        },
        "type": "object"
      },
      "PaymentData": {
        "description": "Payment or Transfer participant's data",
        "properties": {
          "payer": {
            "$ref": "#/components/schemas/PaymentDataParticipant"
          },
          "receiver": {
            "$ref": "#/components/schemas/PaymentDataParticipant"
          },
          "reason": {
            "type": "string",
            "description": "User's motive submitted while making the transfer"
          },
          "referenceNumber": {
            "type": "string",
            "description": "Reference number for the transfer/payment"
          },
          "receiverReferenceId": {
            "type": "string",
            "description": "String submitted by the receiver associated with the payment when generating the payment request."
          },
          "paymentMethod": {
            "type": "string",
            "description": "Type of transfer. TED, DOC, PIX, TEV or BOLETO"
          },
          "boletoMetadata": {
            "$ref": "#/components/schemas/PaymentDataBoletoMetadata"
          }
        },
        "type": "object"
      },
      "Merchant": {
        "description": "Merchant extracted from the transaction data",
        "properties": {
          "name": {
            "type": "string",
            "description": "Merchants name"
          },
          "businessName": {
            "type": "string",
            "description": "Merchant legal business name"
          },
          "cnpj": {
            "type": "string",
            "description": "Document number related to the merchant"
          },
          "cnae": {
            "type": "string",
            "description": "Economic activity classification number related to the merchant"
          },
          "category": {
            "type": "string",
            "description": "Merchant associated category"
          }
        },
        "type": "object"
      },
      "CreditCardMetadata": {
        "description": "Data of a transaction specific to credit card transactions",
        "properties": {
          "installmentNumber": {
            "type": "number",
            "description": "Number of the current installment of the purchase"
          },
          "totalInstallments": {
            "type": "number",
            "description": "Total number of installments of the purchase"
          },
          "totalAmount": {
            "type": "number",
            "description": "Total amount of the purchase"
          },
          "purchaseDate": {
            "type": "string",
            "format": "date-time",
            "description": "Original Date of the purchase"
          },
          "payeeMCC": {
            "type": "string",
            "description": "Merchant Category Code of the merchant"
          },
          "cardNumber": {
            "type": "string",
            "description": "Credit Card Number associated with transaction, can be different from the account if its done by an additional or virtual card."
          },
          "billId": {
            "type": "string",
            "description": "Id of the bill associated to this transaction"
          }
        },
        "type": "object"
      },
      "Transaction": {
        "description": "Transaction product",
        "properties": {
          "id": {
            "type": "string",
            "description": "Primary identifier of the transaction"
          },
          "description": {
            "type": "string",
            "description": "Clean description of the transaction"
          },
          "currencyCode": {
            "type": "string",
            "description": "Currency ISO code"
          },
          "amount": {
            "type": "number",
            "format": "double",
            "description": "Transaction amount"
          },
          "amountInAccountCurrency": {
            "type": "number",
            "format": "double",
            "description": "Transaction amount in Account's Currency. Only present if the transaction is in a different currency than the account's currency"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the transaction was made"
          },
          "type": {
            "type": "string",
            "description": "Type of the transaction. DEBIT (outflow) or CREDIT (inflow)",
            "enum": [
              "DEBIT",
              "CREDIT"
            ]
          },
          "balance": {
            "type": "number",
            "format": "double",
            "description": "Balance after the transaction"
          },
          "providerCode": {
            "type": "string",
            "description": "Institution provided code"
          },
          "status": {
            "type": "string",
            "description": "Status of the movement. POSTED / PENDING"
          },
          "category": {
            "type": "string",
            "description": "Category of the transaction (e.g. Restaurants, Education). See the Transaction Categorization section in our guides."
          },
          "categoryId": {
            "type": "string",
            "description": "Id of the transaction category. Can be used to identify the category in the Categories endpoint"
          },
          "paymentData": {
            "$ref": "#/components/schemas/PaymentData"
          },
          "creditCardMetadata": {
            "$ref": "#/components/schemas/CreditCardMetadata"
          },
          "merchant": {
            "$ref": "#/components/schemas/Merchant"
          },
          "operationType": {
            "type": "string",
            "description": "Type of operation classified by the institution."
          },
          "providerId": {
            "type": "string",
            "description": "Provider's identifier for the transaction. Only returned for Open Finance connectors."
          }
        },
        "type": "object",
        "required": [
          "id",
          "description",
          "currencyCode",
          "amount",
          "date"
        ],
        "example": {
          "id": "6ec156fe-e8ac-4d9a-a4b3-7770529ab01c",
          "description": "TED Example",
          "descriptionRaw": null,
          "currencyCode": "BRL",
          "amount": 1500,
          "date": "2020-10-14T00:00:00.000Z",
          "balance": 3500,
          "category": "Transfers",
          "categoryId": "05000000",
          "accountId": "03cc0eff-4ec5-495c-adb3-1ef9611624fc",
          "providerCode": "123456",
          "type": "CREDIT",
          "status": "POSTED",
          "paymentData": {
            "payer": {
              "name": "Tiago Rodrigues Santos",
              "branchNumber": "090",
              "accountNumber": "1234-5",
              "routingNumber": "001",
              "documentNumber": {
                "type": "CPF",
                "value": "882.937.076-23"
              }
            },
            "reason": "Taxa de serviço",
            "receiver": {
              "name": "Pluggy",
              "branchNumber": "999",
              "accountNumber": "9876-1",
              "routingNumber": "002",
              "documentNumber": {
                "type": "CNPJ",
                "value": "08.050.608/0001-32"
              }
            },
            "paymentMethod": "TED",
            "referenceNumber": "123456789"
          },
          "merchant": null,
          "providerId": null
        }
      },
      "PageResponseTransactions": {
        "description": "",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Transaction"
            },
            "description": ""
          },
          "page": {
            "type": "number",
            "format": "double",
            "description": ""
          },
          "total": {
            "type": "number",
            "format": "double",
            "description": ""
          },
          "totalPages": {
            "type": "number",
            "format": "double",
            "description": ""
          }
        },
        "type": "object",
        "required": [
          "results",
          "page",
          "total",
          "totalPages"
        ]
      },
      "UpdateTransaction": {
        "description": "Update transaction category request body",
        "properties": {
          "categoryId": {
            "type": "string",
            "description": "Identifier of the category"
          }
        },
        "type": "object",
        "required": [
          "categoryId"
        ],
        "example": {
          "categoryId": "07010000"
        }
      },
      "Category": {
        "description": "Cateogry response",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier for the category"
          },
          "description": {
            "type": "string",
            "description": "Description of the category"
          },
          "descriptionTranslated": {
            "type": "string",
            "description": "Description of the category, translated to portuguese"
          },
          "parentId": {
            "type": "string",
            "description": "Parent's identifier"
          },
          "parentDescription": {
            "type": "string",
            "description": "Parent's category description"
          }
        },
        "type": "object",
        "required": [
          "id",
          "description"
        ],
        "example": {
          "id": "01010000",
          "description": "Salary/pro-labore",
          "parentId": "01000000",
          "parentDescription": "Income"
        }
      },
      "ClientCategoryRule": {
        "description": "Category rule by client id",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the transaction rule."
          },
          "categoryId": {
            "type": "string",
            "description": "Identifier of the category"
          },
          "category": {
            "type": "string",
            "description": "Description of the category"
          },
          "clientId": {
            "type": "string",
            "description": "Identifier of the client"
          },
          "transactionType": {
            "type": "string",
            "description": "Transaction type (DEBIT/CREDIT)"
          },
          "accountType": {
            "type": "string",
            "description": "Account type (CHECKING_ACCOUNT/CREDIT_CARD)"
          }
        },
        "type": "object",
        "required": [
          "description",
          "category"
        ],
        "example": {
          "description": "uber payment",
          "category": "Salary/pro-labore",
          "categoryId": "05000000",
          "clientId": "03cc0eff-4ec5-495c-adb3-1ef9611624fc",
          "transactionType": "DEBIT",
          "accountType": "CHECKING_ACCOUNT"
        }
      },
      "CreateClientCategoryRule": {
        "description": "Create client category rule",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the transaction rule."
          },
          "categoryId": {
            "type": "string",
            "description": "Identifier of the category"
          },
          "transactionType": {
            "type": "string",
            "description": "Transaction type (DEBIT/CREDIT)"
          },
          "accountType": {
            "type": "string",
            "description": "Account type (CHECKING_ACCOUNT/CREDIT_CARD)"
          },
          "matchType": {
            "type": "string",
            "description": "Type of match used to identify the rule (exact/contains/startsWith/endsWith), if not provided, defaults to 'exact'"
          }
        },
        "type": "object",
        "required": [
          "description",
          "categoryId"
        ],
        "example": {
          "description": "uber payment",
          "categoryId": "05000000",
          "transactionType": "DEBIT",
          "accountType": "CHECKING_ACCOUNT"
        }
      },
      "InvestmentExpenses": {
        "description": "Taxes and fees that applied to the transaction",
        "properties": {
          "serviceTax": {
            "type": "number",
            "format": "double",
            "description": "(ISS) Service tax that varies according to state"
          },
          "brokerageFee": {
            "type": "number",
            "format": "double",
            "description": "Commission charged by the brokerage for carrying out transactions on the stock market"
          },
          "incomeTax": {
            "type": "number",
            "format": "double",
            "description": "(IRRF) Income Tax Withholding, amount paid to the Internal Revenue Service"
          },
          "tradingAssetsNoticeFee": {
            "type": "number",
            "format": "double",
            "description": "(ANA) Fee of Notice of Trading in Assets"
          },
          "maintenanceFee": {
            "type": "number",
            "format": "double",
            "description": "(termo/opções) Fees charged by BM&F Bovespa in negotiations"
          },
          "settlementFee": {
            "type": "number",
            "format": "double",
            "description": "Liquidation fee for the settlement of a position on the expiration date or the financial settlement of physical delivery"
          },
          "clearingFee": {
            "type": "number",
            "format": "double",
            "description": "Registration fee"
          },
          "stockExchangeFee": {
            "type": "number",
            "format": "double",
            "description": "(Emolumentos) Fees charged by BM&F Bovespa as a source of operating income"
          },
          "custodyFee": {
            "type": "number",
            "format": "double",
            "description": "Fee by brokers to keep recordsin their home broker systems or on the trading desk"
          },
          "operatingFee": {
            "type": "number",
            "format": "double",
            "description": "Amount paid to the Operator for the intermediation service"
          },
          "other": {
            "type": "number",
            "format": "double",
            "description": "Sum of other not defined expenses"
          }
        },
        "type": "object"
      },
      "InvestmentTransaction": {
        "description": "Movement of the investment",
        "properties": {
          "id": {
            "type": "string",
            "description": "Primary investment transaction identifier"
          },
          "type": {
            "type": "string",
            "description": "Type of transactions",
            "enum": [
              "BUY",
              "SELL",
              "TAX",
              "TRANSFER",
              "INTEREST",
              "AMORTIZATION"
            ]
          },
          "movementType": {
            "type": "string",
            "description": "Type of movement of the transaction",
            "enum": [
              "CREDIT",
              "DEBIT"
            ]
          },
          "quantity": {
            "type": "number",
            "format": "double",
            "description": "Quantity of the transaction"
          },
          "value": {
            "type": "number",
            "format": "double",
            "description": "Value on the transaction's Date"
          },
          "amount": {
            "type": "number",
            "format": "double",
            "description": "Gross amount of the operation. May be null only if type is TRANSFER"
          },
          "agreedRate": {
            "type": "number",
            "format": "double",
            "description": "Agreed rate for treasury applications"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the transaction was made"
          },
          "tradeDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the transaction was confirmed"
          },
          "expenses": {
            "$ref": "#/components/schemas/InvestmentExpenses"
          }
        },
        "type": "object",
        "required": [
          "id",
          "type",
          "date"
        ]
      },
      "PageResponseInvestmentTransactions": {
        "description": "",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvestmentTransaction"
            },
            "description": ""
          },
          "page": {
            "type": "number",
            "format": "double",
            "description": ""
          },
          "total": {
            "type": "number",
            "format": "double",
            "description": ""
          },
          "totalPages": {
            "type": "number",
            "format": "double",
            "description": ""
          }
        },
        "type": "object",
        "required": [
          "results",
          "page",
          "total",
          "totalPages"
        ]
      },
      "PageResponseCategoryRules": {
        "description": "",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClientCategoryRule"
            },
            "description": ""
          },
          "page": {
            "type": "number",
            "format": "double",
            "description": ""
          },
          "total": {
            "type": "number",
            "format": "double",
            "description": ""
          },
          "totalPages": {
            "type": "number",
            "format": "double",
            "description": ""
          }
        },
        "type": "object",
        "required": [
          "results",
          "page",
          "total",
          "totalPages"
        ]
      },
      "InvestmentMetadata": {
        "description": "Investment metadata for Previdencia migrations",
        "properties": {
          "taxRegime": {
            "type": "string",
            "description": "Description of the type of tax applied to previdencia"
          },
          "proposalNumber": {
            "type": "string",
            "description": "Previdencial proposal number"
          },
          "processNumber": {
            "type": "string",
            "description": "Number of the process of a previdencia"
          },
          "fundName": {
            "type": "string",
            "description": "Name of the fund associated with the previdencia."
          },
          "insurer": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Company"
              }
            ],
            "description": "Insurer of the Security Investment"
          }
        },
        "type": "object"
      },
      "Company": {
        "description": "Company object that holds the company's information",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the company"
          },
          "cnpj": {
            "type": "string",
            "description": "CNPJ of the company"
          }
        },
        "type": "object"
      },
      "Investment": {
        "description": "Investment representing a specific asset",
        "properties": {
          "id": {
            "type": "string",
            "description": "Primary identifier"
          },
          "itemId": {
            "type": "string",
            "description": "Identifier of the item linked to the investment",
            "format": "uuid"
          },
          "type": {
            "enum": [
              "COE",
              "EQUITY",
              "ETF",
              "FIXED_INCOME",
              "MUTUAL_FUND",
              "SECURITY",
              "OTHER"
            ],
            "type": "string",
            "description": "Investment Asset type"
          },
          "subtype": {
            "enum": [
              "STRUCTURED_NOTE",
              "STOCK",
              "ETF",
              "REAL_ESTATE_FUND",
              "BDR",
              "DERIVATIVES",
              "OPTION",
              "TREASURY",
              "LCI",
              "LCA",
              "LF",
              "CDB",
              "CRI",
              "CRA",
              "CORPORATE_DEBT",
              "LC",
              "DEBENTURES",
              "INVESTMENT_FUND",
              "MULTIMARKET_FUND",
              "FIXED_INCOME_FUND",
              "STOCK_FUND",
              "ETF_FUND",
              "OFFSHORE_FUND",
              "FIP_FUND",
              "EXCHANGE_FUND",
              "RETIREMENT",
              "OTHER"
            ],
            "type": "string",
            "description": "Investment subtype, depends on the type"
          },
          "number": {
            "type": "string",
            "description": "Reference number for this holder's asset"
          },
          "balance": {
            "type": "number",
            "format": "double",
            "description": "The current net balance amount of the investment"
          },
          "name": {
            "type": "string",
            "description": "Name on the provider"
          },
          "lastMonthRate": {
            "type": "number",
            "format": "double",
            "description": "The performance rate of the investment in the last month"
          },
          "lastTwelveMonthsRate": {
            "type": "number",
            "format": "double",
            "description": "The performance rate of the investment in the last 12 months"
          },
          "annualRate": {
            "type": "number",
            "format": "double",
            "description": "The performance rate of the investment in the last year"
          },
          "currencyCode": {
            "type": "string",
            "description": "Currency ISO code for the amounts"
          },
          "code": {
            "type": "string",
            "description": "Associated Code for the investment. For example, the code for a mutual fund is the CNPJ"
          },
          "isin": {
            "type": "string",
            "description": "12-character ISIN, a globally unique identifier"
          },
          "value": {
            "type": "number",
            "format": "double",
            "description": "Quota's current value at \"date\""
          },
          "quantity": {
            "type": "number",
            "format": "double",
            "description": "Quantity of quota at disposal"
          },
          "amount": {
            "type": "number",
            "format": "double",
            "description": "Gross amount of the investment"
          },
          "taxes": {
            "type": "number",
            "format": "double",
            "description": "Income taxes applied to the investment"
          },
          "taxes2": {
            "type": "number",
            "format": "double",
            "description": "Financial taxes applied to the investment"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "description": "Value's quota date"
          },
          "owner": {
            "type": "string",
            "description": "Owner/beneficiary associated with the investment"
          },
          "amountProfit": {
            "type": "number",
            "format": "double",
            "description": "Profit/Loss to date over the investment"
          },
          "amountWithdrawal": {
            "type": "number",
            "format": "double",
            "description": "The amount available to withdraw"
          },
          "amountOriginal": {
            "type": "number",
            "format": "double",
            "description": "Amount originally invested"
          },
          "metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InvestmentMetadata"
              }
            ],
            "description": "Security Portability details"
          },
          "dueDate": {
            "type": "string",
            "format": "date-time",
            "description": "Expiration Date"
          },
          "issuer": {
            "type": "string",
            "description": "The entity that issued the investment"
          },
          "issuerCNPJ": {
            "type": "string",
            "description": "The entity CNPJ that issued the investment"
          },
          "issueDate": {
            "type": "string",
            "format": "date-time",
            "description": "The date that the investment was issued"
          },
          "rate": {
            "type": "number",
            "format": "double",
            "description": "Fixed rate percentage applied to the investment"
          },
          "rateType": {
            "type": "string",
            "description": "Type of fixed-rate"
          },
          "fixedAnnualRate": {
            "type": "number",
            "format": "double",
            "description": "Fixed income annual rate"
          },
          "status": {
            "type": "string",
            "description": "Current status of the investment enum value",
            "enum": [
              "ACTIVE",
              "PENDING",
              "TOTAL_WITHDRAWAL"
            ]
          }
        },
        "type": "object",
        "required": [
          "id",
          "itemId",
          "type",
          "balance",
          "name",
          "currencyCode",
          "date"
        ],
        "example": {
          "id": "f77eccf4-7714-498e-92a9-1bebe70335d9",
          "code": "12.345.678/0001-00",
          "name": "Bahia AM Advisory FIC de FIM",
          "balance": 1359.39,
          "currencyCode": "BRL",
          "type": "MUTUAL_FUND",
          "subtype": "MULTIMARKET_FUND",
          "lastMonthRate": 0.24,
          "annualRate": 3.24,
          "lastTwelveMonthsRate": 3,
          "itemId": "207f5bcd-312a-439c-abbe-166b6632c980",
          "value": 500,
          "quantity": 3,
          "amount": 1500,
          "taxes": 40.61,
          "taxes2": 100,
          "date": "2020-07-19T18:27:41.802Z",
          "owner": "John Doe",
          "number": null,
          "amountProfit": 310.5,
          "amountWithdrawal": 1310.5,
          "amountOriginal": 1000,
          "status": "ACTIVE",
          "transactions": [
            {
              "tradeDate": "2020-10-01T00:00:00.000Z",
              "date": "2020-10-01T00:00:00.000Z",
              "description": "Aplicação Fondo de Investimento Premium",
              "quantity": 1.25,
              "value": 2,
              "amount": 5,
              "type": "BUY",
              "movementType": "CREDIT"
            }
          ]
        }
      },
      "PhoneNumber": {
        "description": "The phone number object contains data related to contact information.",
        "properties": {
          "type": {
            "enum": [
              "Personal",
              "Work",
              "Residencial"
            ],
            "type": "string",
            "description": "Type of phone number: personal, work or residencial"
          },
          "value": {
            "type": "string",
            "description": "The complete phone number"
          }
        },
        "type": "object",
        "required": [
          "value"
        ]
      },
      "Email": {
        "description": "The email object contains emails associated with the owner of the account",
        "properties": {
          "type": {
            "enum": [
              "Personal",
              "Work"
            ],
            "type": "string",
            "description": ""
          },
          "value": {
            "type": "string",
            "description": "The full email of the person."
          }
        },
        "type": "object",
        "required": [
          "value"
        ]
      },
      "Address": {
        "description": "The address object contains data related to an specific owner's location.",
        "properties": {
          "fullAddress": {
            "type": "string",
            "description": "Full address using all components available"
          },
          "primaryAddress": {
            "type": "string",
            "description": "Primary address, stret name and street number"
          },
          "city": {
            "type": "string",
            "description": "The complete city name"
          },
          "postalCode": {
            "type": "string",
            "description": "The Zip code"
          },
          "state": {
            "type": "string",
            "description": "The state or province"
          },
          "country": {
            "type": "string",
            "description": "The complete country name"
          },
          "type": {
            "enum": [
              "Personal",
              "Work"
            ],
            "type": "string",
            "description": "Type of address, Personal or Work"
          },
          "additionalInfo": {
            "type": "string",
            "description": "Additional address information such as apartment number, complement, or other details"
          }
        },
        "type": "object"
      },
      "IdentityRelation": {
        "description": "The relation object contains name and relation to the owner of the account",
        "properties": {
          "type": {
            "enum": [
              "Mother",
              "Father",
              "Spouse"
            ],
            "type": "string",
            "description": "Type of relation: Father, Mother or Spouse"
          },
          "name": {
            "type": "string",
            "description": "The full name of the person"
          },
          "document": {
            "type": "string",
            "description": "Primary document of the person"
          }
        },
        "type": "object"
      },
      "IdentityResponse": {
        "description": "Response with details personal information related to the owner of the connection's account",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the identity to retrieve"
          },
          "itemId": {
            "type": "string",
            "description": "Identifier of the item linked to the identity",
            "format": "uuid"
          },
          "birthDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date of birth"
          },
          "taxNumber": {
            "type": "string",
            "description": "The tax ID (CNPJ) associated with the business account"
          },
          "document": {
            "type": "string",
            "description": "Primary document that identifies the owner"
          },
          "documentType": {
            "type": "string",
            "description": "Type of document collected"
          },
          "jobTitle": {
            "type": "string",
            "description": "Profession or Job information"
          },
          "fullName": {
            "type": "string",
            "description": "Name of the owner of the account"
          },
          "establishmentCode": {
            "type": "string",
            "description": "Establishment code (only for PAYMENT_ACCOUNT connectors)"
          },
          "establishmentName": {
            "type": "string",
            "description": "Name of the establishment (only for PAYMENT_ACCOUNT connectors)"
          },
          "companyName": {
            "type": "string",
            "description": "For business connector, the name of the business"
          },
          "phoneNumbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhoneNumber"
            },
            "description": "List of phone numbers related to the account"
          },
          "emails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Email"
            },
            "description": "List of email addresses related to the account"
          },
          "addresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Address"
            },
            "description": "List of addresses related to the account"
          },
          "relations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentityRelation"
            },
            "description": "List of names related to the account"
          },
          "investorProfile": {
            "enum": [
              "Conservative",
              "Moderate",
              "Aggressive"
            ],
            "type": "string",
            "description": "Is a rating that indicates the investor personality and motivation for investing"
          },
          "qualifications": {
            "type": "object",
            "description": "Information that allows understanding since when the consulted person has been a client of the institution, as well as an indicator of the products and services they currently consume and their representatives",
            "required": [
              "companyCnpj"
            ],
            "properties": {
              "companyCnpj": {
                "type": "string",
                "description": "CNPJ of the company"
              },
              "occupationCode": {
                "type": "string",
                "enum": [
                  "RECEITA_FEDERAL",
                  "CBO",
                  "OUTRO"
                ],
                "description": "Occupation code"
              },
              "informedIncome": {
                "type": "object",
                "description": "Informed income",
                "required": [
                  "frequency",
                  "amount",
                  "date"
                ],
                "properties": {
                  "frequency": {
                    "type": "string",
                    "enum": [
                      "DIARIA",
                      "SEMANAL",
                      "QUINZENAL",
                      "MENSAL",
                      "BIMESTRAL",
                      "TRIMESTRAL",
                      "SEMESTRAL",
                      "ANUAL",
                      "OUTROS"
                    ],
                    "description": "Frequency of the informed income"
                  },
                  "amount": {
                    "type": "number",
                    "description": "Amount of the informed income"
                  },
                  "date": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date when the income was informed"
                  }
                }
              },
              "informedPatrimony": {
                "type": "object",
                "description": "Informed patrimony",
                "required": [
                  "amount",
                  "year"
                ],
                "properties": {
                  "amount": {
                    "type": "number",
                    "description": "Amount of the informed patrimony"
                  },
                  "year": {
                    "type": "number",
                    "description": "Year of the patrimony"
                  }
                }
              }
            }
          },
          "financialRelationships": {
            "type": "object",
            "required": [
              "startDate",
              "productsServicesType",
              "procurators"
            ],
            "properties": {
              "startDate": {
                "type": "string",
                "format": "date-time",
                "description": "Date when the relationship with the institution started"
              },
              "productsServicesType": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of products and services that the client consumes"
              },
              "procurators": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "type",
                    "cpfNumber",
                    "civilName"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "REPRESENTANTE_LEGAL",
                        "PROCURADOR"
                      ],
                      "description": "Type of relationship with the client"
                    },
                    "cpfNumber": {
                      "type": "string",
                      "description": "CPF of the procurator"
                    },
                    "civilName": {
                      "type": "string",
                      "description": "Civil name of the procurator"
                    },
                    "socialName": {
                      "type": "string",
                      "description": "Social name of the procurator"
                    }
                  }
                },
                "description": "List of procurators of the client"
              },
              "accounts": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "compeCode",
                    "branchCode",
                    "number",
                    "checkDigit",
                    "type",
                    "subtype"
                  ],
                  "properties": {
                    "compeCode": {
                      "type": "string",
                      "description": "COMPE code of the account"
                    },
                    "branchCode": {
                      "type": "string",
                      "description": "Branch code of the account"
                    },
                    "number": {
                      "type": "string",
                      "description": "Number of the account"
                    },
                    "checkDigit": {
                      "type": "string",
                      "description": "Check digit of the account"
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the account"
                    },
                    "subtype": {
                      "type": "string",
                      "description": "Subtype of the account"
                    }
                  }
                },
                "description": "List of accounts of the client with valid consent. Only accounts that have explicit user consent are returned."
              }
            },
            "description": "Information that allows institutions to assess, evaluate, characterize, and classify the client with the purpose of understanding their risk profile and their economic-financial capacity"
          }
        },
        "type": "object",
        "required": [
          "id",
          "itemId"
        ]
      },
      "ConnectTokenResponse": {
        "description": "Connect token response",
        "properties": {
          "accessToken": {
            "type": "string",
            "description": "Connect token that's used to initialize Pluggy's Connect widget"
          }
        },
        "type": "object",
        "required": [
          "accessToken"
        ],
        "example": {
          "accessToken": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJjbGllbnRJZCI6IjI3MzY0YjRhLTM1NGUtNDc5ZC04OWJkLTA1Y2VmNDc2ZTFmNCIsImRhdGEiOiI4NmYyMjIwNDVkNjc3NDJjZjI5MjhjMGNmNjBlZjFkZjo5MjRmNGZlNjg5YWM1NGI2ZmVmMzkzZDc2ZTExNjAxZTI1MjliNmUyNDY1Y2I4ZDkxMWI3ZDY0ZjA5Y2NkYzBiMzg4YWFjZWNkZmQzMGMzZGZiNTBkNzk1OTA1Y2QyNWZlZmEyODZhMWQ0NDc5YzYyNzgwZDZiMzBlNDZiYTY3YjUyZDRkMmIwNWU0ODVjYzk5NjZiYzJjMDUyNDE5OTgzNjBjYTVkM2M4MTJhODQ0ODI1NDI2NDJhNWNkNjhjMTU3YjUzYThkOGEyOGZlMWM4ZDkxNmYzZjZlOTQ0MzEyYjBjNzNmZDBhYmIyYTk0MDU2MzZhYjMxM2RkMmY0OTE0IiwiaWF0IjoxNjQwNjk3MjUwLCJleHAiOjE2NDA2OTkwNTB9.i9DpZ_sOW_I9yGUUXqUWcB9zqCJEXQnjaUrwmcVOXX3F1-he3LjT2f8mHbt7DOvxHtxqAagZkW8BT3J2OBYDOzmHuBgKbbSUmb4YLfC8PaKf2p7fY0fKVu30iIFqiM5CgDQ048dIWzWSlGAYZq00edD0BYlfOkU3ll7OofzmDUAG6KBRDx68FrtYxboNJa8sXli7WSAI3nzZDhcVyPJvqlMHG6VXbJboQrxnSEBGdpGBQ7n_-2G5Oa3-MHCR-Z5cKx1pi4NwqorGFg1c2uRj3F4GdRs94UkqlvdH6FRxAUD3SVDiegvQ6vkOWCHpD1-wZELOmenkJ7ecjg9CChPavx"
        }
      },
      "AuthResponse": {
        "description": "Authentication confirmed response to interact with the api",
        "properties": {
          "apiKey": {
            "type": "string",
            "description": "Authentication key for the API"
          }
        },
        "type": "object",
        "required": [
          "apiKey"
        ],
        "example": {
          "apiKey": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
        }
      },
      "AuthRequest": {
        "description": "Authentication parameters required to get access to Pluggy's API",
        "properties": {
          "clientId": {
            "type": "string",
            "description": "Client id",
            "format": "uuid"
          },
          "clientSecret": {
            "type": "string",
            "description": "Client secret"
          }
        },
        "type": "object",
        "required": [
          "clientId",
          "clientSecret"
        ],
        "example": {
          "clientId": "f8c9b8f0-b8e2-4f0f-b8e2-4f0f8e2f0f8e2",
          "clientSecret": "UZzp2n7eMThpfZ74Xf7"
        }
      },
      "ConnectTokenRequest": {
        "description": "Create a connect token request payload",
        "properties": {
          "itemId": {
            "type": "string",
            "description": "Item identifier to allow Connect Widget to performan an update on it.",
            "format": "uuid"
          },
          "options": {
            "$ref": "#/components/schemas/ItemOptions"
          }
        },
        "example": {
          "itemId": "5e9f8f8f-f8f8-4f8f-8f8f-8f8f8f8f8f8f",
          "options": {
            "webhookUrl": "https://example.com/webhook",
            "clientUserId": "My App UserId",
            "oauthRedirectUri": "https://pluggy.ai/demo",
            "avoidDuplicates": true
          }
        },
        "type": "object"
      },
      "ItemOptions": {
        "description": "Item options available to send through connect tokens",
        "properties": {
          "clientUserId": {
            "type": "string",
            "description": "Client's external identifier for the user, it can be a ID, UUID or even an email. This is free for clients to use."
          },
          "webhookUrl": {
            "type": "string",
            "description": "Url to be notified of this specific item changes"
          },
          "oauthRedirectUri": {
            "type": "string",
            "description": "Url to redirect the user after the connect flow"
          },
          "avoidDuplicates": {
            "type": "boolean",
            "description": "Avoids creating a new item if there is already one with the same credentials"
          }
        },
        "type": "object"
      },
      "ItemCreationErrorResponse": {
        "title": "Item Creation Error Schema",
        "type": "object",
        "properties": {
          "code": {
            "type": "number"
          },
          "codeDescription": {
            "type": "string",
            "description": "Distinctive code description, useful to identify the error."
          },
          "message": {
            "type": "string"
          },
          "errors": {
            "description": "List of errors related to parameter validations",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ParameterValidationError"
            }
          }
        }
      },
      "WebhookCreationErrorResponse": {
        "title": "Webhook Creation Error Schema",
        "type": "object",
        "properties": {
          "code": {
            "type": "number"
          },
          "message": {
            "type": "string"
          }
        },
        "example": {
          "code": 400,
          "message": "Webhook url must be valid URL address and not localhost'"
        }
      },
      "NotAuthenticatedResponse": {
        "title": "Unauthenticated response",
        "type": "object",
        "properties": {
          "code": {
            "type": "number"
          },
          "message": {
            "type": "string"
          }
        },
        "example": {
          "code": 403,
          "message": "Missing or invalid authorization token"
        }
      },
      "GlobalErrorResponse": {
        "title": "Global Error Response Schema",
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number"
          },
          "message": {
            "type": "string"
          },
          "codeDescription": {
            "type": "string",
            "description": "Distinctive code description, useful to distinguish the error."
          },
          "data": {
            "type": "object",
            "description": "Additional data related to the error, if any",
            "properties": {}
          }
        },
        "example": {
          "code": 500,
          "codeDescription": "INTERNAL_SERVER_ERROR",
          "message": "Internal Server Error"
        }
      },
      "Loan": {
        "description": "Response with information related to a loan",
        "properties": {
          "id": {
            "type": "string",
            "description": "Primary identifier"
          },
          "itemId": {
            "type": "string",
            "description": "Identifier of the item linked to the loan",
            "format": "uuid"
          },
          "contractNumber": {
            "type": "string",
            "description": "Contract number given by the contracting institution"
          },
          "ipocCode": {
            "type": "string",
            "description": "Standard contract number - IPOC (Identificação Padronizada da Operação de Crédito)"
          },
          "productName": {
            "type": "string",
            "description": "Denomination/Identification of the name of the credit operation disclosed to the customer"
          },
          "type": {
            "type": "string",
            "description": "Loan type (https://openbanking-brasil.github.io/openapi/swagger-apis/loans/?urls.primaryName=2.0.1#model-EnumContractProductSubTypeLoans)"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the loan data was collected"
          },
          "contractDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the loan was contracted"
          },
          "disbursementDates": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "date",
              "example": "2024-01-01"
            },
            "description": "Disbursement date of the contracted amount"
          },
          "settlementDate": {
            "type": "string",
            "format": "date-time",
            "description": "Loan settlement date"
          },
          "contractAmount": {
            "type": "number",
            "description": "Loan contracted value"
          },
          "currencyCode": {
            "type": "string",
            "description": "Code referencing the currency of the loan",
            "example": "BRL"
          },
          "dueDate": {
            "type": "string",
            "format": "date-time",
            "description": "Loan due date"
          },
          "installmentPeriodicity": {
            "type": "string",
            "description": "Installments regular frequency",
            "enum": [
              "WITHOUT_REGULAR_PERIODICITY",
              "WEEKLY",
              "FORTNIGHTLY",
              "MONTHLY",
              "BIMONTHLY",
              "QUARTERLY",
              "SEMESTERLY",
              "YEARLY",
              "OTHERS"
            ]
          },
          "installmentPeriodicityAdditionalInfo": {
            "type": "string",
            "description": "Mandatory field to complement the information regarding the regular payment frequency when installmentPeriodicity has value 'OTHERS'"
          },
          "firstInstallmentDueDate": {
            "type": "string",
            "format": "date-time",
            "description": "First installment due date"
          },
          "CET": {
            "type": "number",
            "description": "CET - Custo Efetivo Total must be expressed as an annual percentage rate and incorporates all charges and expenses incurred in credit operations (interest rate, but also tariffs, taxes, insurance and other expenses charged)"
          },
          "amortizationScheduled": {
            "type": "string",
            "description": "Amortization system (https://openbanking-brasil.github.io/openapi/swagger-apis/loans/?urls.primaryName=2.0.1#model-EnumContractAmortizationScheduled)",
            "enum": [
              "SAC",
              "PRICE",
              "SAM",
              "WITHOUT_AMORTIZATION_SYSTEM",
              "OTHERS"
            ]
          },
          "amortizationScheduledAdditionalInfo": {
            "type": "string",
            "description": "Mandatory field to complement the information regarding the scheduled amortization when it has value 'OTHERS'"
          },
          "cnpjConsignee": {
            "type": "string",
            "description": "Consignor CNPJ"
          },
          "interestRates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LoanInterestRate"
            }
          },
          "contractedFees": {
            "type": "array",
            "description": "List that brings the information of the tariffs agreed in the contract.",
            "items": {
              "$ref": "#/components/schemas/LoanContractedFee"
            }
          },
          "contractedFinanceCharges": {
            "type": "array",
            "description": "List that brings the charges agreed in the contract",
            "items": {
              "$ref": "#/components/schemas/LoanContractedFinanceCharge"
            }
          },
          "warranties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LoanWarranty"
            }
          },
          "installments": {
            "$ref": "#/components/schemas/LoanInstallments"
          },
          "payments": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LoanPayments"
              }
            ],
            "description": "Loan contract payment data"
          }
        },
        "type": "object",
        "required": [
          "id",
          "itemId",
          "date",
          "productName",
          "currencyCode"
        ],
        "example": {}
      },
      "LoanInterestRate": {
        "description": "Object that brings the set of information necessary to demonstrate the composition of the remunerative interest rates of the Credit Type",
        "properties": {
          "taxType": {
            "type": "string",
            "description": "Tax type",
            "enum": [
              "NOMINAL",
              "EFFECTIVE"
            ]
          },
          "interestRateType": {
            "type": "string",
            "description": "Interest rate type",
            "enum": [
              "SIMPLE",
              "COMPOUND"
            ]
          },
          "taxPeriodicity": {
            "type": "string",
            "description": "Tax periodicity",
            "enum": [
              "MONTHLY",
              "YEARLY"
            ]
          },
          "calculation": {
            "type": "string",
            "description": "Calculation basis"
          },
          "referentialRateIndexerType": {
            "type": "string",
            "description": "Types of benchmark rates or indexers (https://openbanking-brasil.github.io/openapi/swagger-apis/loans/?urls.primaryName=2.0.1#model-EnumContractReferentialRateIndexerType)"
          },
          "referentialRateIndexerSubType": {
            "type": "string",
            "description": "Subtypes of benchmark rates or indexers (https://openbanking-brasil.github.io/openapi/swagger-apis/loans/?urls.primaryName=2.0.1#model-EnumContractReferentialRateIndexerSubType)"
          },
          "referentialRateIndexerAdditionalInfo": {
            "type": "string",
            "description": "Free field to complement the information regarding the Type of reference rate or indexer"
          },
          "preFixedRate": {
            "type": "number",
            "description": "Pre-fixed rate applied under the credit modality contract. 1 = 100%"
          },
          "postFixedRate": {
            "type": "number",
            "description": "Post-fixed rate applied under the credit modality contract. 1 = 100%"
          },
          "additionalInfo": {
            "type": "string",
            "description": "Text with additional information on the composition of agreed interest rates"
          }
        }
      },
      "LoanContractedFee": {
        "properties": {
          "name": {
            "type": "string",
            "description": "Agreed rate denomination"
          },
          "code": {
            "type": "string",
            "description": "Acronym identifying the agreed rate"
          },
          "chargeType": {
            "type": "string",
            "description": "Charge type for the rate agreed in the contract",
            "enum": [
              "UNIQUE",
              "BY_INSTALLMENT"
            ]
          },
          "charge": {
            "type": "string",
            "description": "Billing method related to the tariff agreed in the contract",
            "enum": [
              "MINIMUM",
              "MAXIMUM",
              "FIXED",
              "PERCENTAGE"
            ]
          },
          "amount": {
            "type": "number",
            "description": "Monetary value of the tariff agreed in the contract"
          },
          "rate": {
            "type": "number",
            "description": "Rate value in percentage agreed in the contract"
          }
        }
      },
      "LoanContractedFinanceCharge": {
        "properties": {
          "type": {
            "type": "string",
            "description": "Charge type agreed in the contract (https://openbanking-brasil.github.io/openapi/swagger-apis/loans/?urls.primaryName=2.0.1#model-EnumContractFinanceChargeType)"
          },
          "additionalInfo": {
            "type": "string",
            "description": "Field for additional information"
          },
          "rate": {
            "type": "number",
            "description": "Charge value in percentage agreed in the contract"
          }
        }
      },
      "LoanWarranty": {
        "properties": {
          "currencyCode": {
            "type": "string",
            "description": "Code referencing the currency of the warranty",
            "example": "BRL"
          },
          "type": {
            "type": "string",
            "description": "Denomination / Identification of the type of warranty that guarantees the Type of Credit Operation contracted (https://openbanking-brasil.github.io/openapi/swagger-apis/loans/?urls.primaryName=2.0.1#model-EnumWarrantyType)"
          },
          "subtype": {
            "type": "string",
            "description": "Denomination / Identification of the subtype of warranty that guarantees the Type of Credit Operation contracted (https://openbanking-brasil.github.io/openapi/swagger-apis/loans/?urls.primaryName=2.0.1#model-EnumWarrantySubType)"
          },
          "amount": {
            "type": "number",
            "description": "Warranty original value"
          }
        }
      },
      "LoanInstallments": {
        "properties": {
          "typeNumberOfInstallments": {
            "type": "string",
            "description": "Type of total term of the contract referring to the type of credit informed",
            "enum": [
              "DAY",
              "WEEK",
              "MONTH",
              "YEAR",
              "WITHOUT_TOTAL_PERIOD"
            ]
          },
          "totalNumberOfInstallments": {
            "type": "number",
            "description": "Total term according to the type referring to the type of credit informed"
          },
          "typeContractRemaining": {
            "type": "string",
            "description": "Type of remaining term of the contract referring to the type of credit informed",
            "enum": [
              "DAY",
              "WEEK",
              "MONTH",
              "YEAR",
              "WITHOUT_TOTAL_PERIOD",
              "WITHOUT_REMAINING_PERIOD"
            ]
          },
          "contractRemainingNumber": {
            "type": "number",
            "description": "Remaining term according to the type referring to the credit type informed"
          },
          "paidInstallments": {
            "type": "number",
            "description": "Number of paid installments"
          },
          "dueInstallments": {
            "type": "number",
            "description": "Number of due installments"
          },
          "pastDueInstallments": {
            "type": "number",
            "description": "Number of overdue installments"
          },
          "balloonPayments": {
            "type": "array",
            "description": "List that brings the due dates and value of the non-regular installments of the contract of the type of credit consulted",
            "items": {
              "$ref": "#/components/schemas/LoanInstallmentBalloonPayment"
            }
          }
        }
      },
      "LoanInstallmentBalloonPayment": {
        "properties": {
          "dueDate": {
            "type": "string",
            "format": "date-time",
            "description": "Expiration date of the non-regular installment to expire from the contract of the consulted credit modality"
          },
          "amount": {
            "$ref": "#/components/schemas/LoanInstallmentBalloonPaymentAmount"
          }
        }
      },
      "LoanInstallmentBalloonPaymentAmount": {
        "description": "Monetary value of the non-regular installment due",
        "properties": {
          "value": {
            "type": "number",
            "description": "Monetary value of the non-regular installment due"
          },
          "currencyCode": {
            "type": "string",
            "description": "Code referencing the currency of the installment",
            "example": "BRL"
          }
        }
      },
      "LoanPayments": {
        "properties": {
          "contractOutstandingBalance": {
            "type": "number",
            "description": "Amount required for the customer to settle the debt"
          },
          "releases": {
            "type": "array",
            "description": "List of payments made in the period",
            "items": {
              "$ref": "#/components/schemas/LoanPaymentRelease"
            }
          }
        }
      },
      "LoanPaymentRelease": {
        "properties": {
          "isOverParcelPayment": {
            "type": "boolean",
            "description": "Identifies whether it is an agreed payment (false) or a one-time payment (true)"
          },
          "installmentId": {
            "type": "string",
            "description": "Installment identifier, responsibility of each transmitting Institution"
          },
          "paidDate": {
            "type": "string",
            "format": "date-time",
            "description": "Effective date of payment referring to the contract of the credit modality consulted"
          },
          "currencyCode": {
            "type": "string",
            "description": "Code referencing the currency of the payment",
            "example": "BRL"
          },
          "paidAmount": {
            "type": "number",
            "description": "Payment amount referring to the contract of the credit modality consulted"
          },
          "overParcel": {
            "$ref": "#/components/schemas/LoanPaymentReleaseOverParcel"
          }
        }
      },
      "LoanPaymentReleaseOverParcel": {
        "description": "Object of fees and charges that were paid outside the installment",
        "properties": {
          "fees": {
            "type": "array",
            "description": "List of fees that were paid outside the installment, only for single payment",
            "items": {
              "$ref": "#/components/schemas/LoanPaymentReleaseOverParcelFee"
            }
          },
          "charges": {
            "type": "array",
            "description": "List of charges that were paid out of installment",
            "items": {
              "$ref": "#/components/schemas/LoanPaymentReleaseOverParcelCharge"
            }
          }
        }
      },
      "LoanPaymentReleaseOverParcelFee": {
        "properties": {
          "name": {
            "type": "string",
            "description": "Denomination of the agreed rate"
          },
          "code": {
            "type": "string",
            "description": "Acronym identifying the agreed rate"
          },
          "amount": {
            "type": "number",
            "description": "Monetary value of the tariff agreed in the contract"
          }
        }
      },
      "LoanPaymentReleaseOverParcelCharge": {
        "properties": {
          "type": {
            "type": "string",
            "description": "Charge type agreed in the contract (https://openbanking-brasil.github.io/openapi/swagger-apis/loans/?urls.primaryName=2.0.1#model-EnumContractFinanceChargeType)"
          },
          "additionalInfo": {
            "type": "string",
            "description": "Free field to fill in additional information regarding the charge"
          },
          "amount": {
            "type": "number",
            "description": "Payment amount of the charge paid outside the installment"
          }
        }
      },
      "Bill": {
        "description": "Response with information related to a credit card bill",
        "properties": {
          "id": {
            "type": "string",
            "description": "Primary identifier"
          },
          "dueDate": {
            "type": "string",
            "format": "date-time",
            "description": "Due date of the bill, displayed for payment by the customer"
          },
          "totalAmount": {
            "type": "number",
            "description": "Total bill amount"
          },
          "totalAmountCurrencyCode": {
            "type": "string",
            "example": "BRL",
            "description": "Code referencing the currency of the bill"
          },
          "minimumPaymentAmount": {
            "type": "number",
            "description": "Minimum payment amount of the bill"
          },
          "allowsInstallments": {
            "type": "boolean",
            "description": "Indicates whether the bill allows installment payments (true) or not (false)"
          },
          "financeCharges": {
            "type": "array",
            "description": "List of charges associated to the bill",
            "items": {
              "$ref": "#/components/schemas/BillFinanceCharge"
            }
          }
        },
        "type": "object",
        "required": [
          "id",
          "accountId",
          "dueDate",
          "totalAmount",
          "totalAmountCurrencyCode",
          "financeCharges"
        ],
        "example": {}
      },
      "BillFinanceCharge": {
        "description": "Response with information related to a credit card bill finance charge",
        "properties": {
          "id": {
            "type": "string",
            "description": "Primary identifier"
          },
          "type": {
            "enum": [
              "LATE_PAYMENT_REMUNERATIVE_INTEREST",
              "LATE_PAYMENT_FEE",
              "LATE_PAYMENT_INTEREST",
              "IOF",
              "OTHER"
            ],
            "type": "string",
            "description": "Denomination of the charges that apply to the postpaid payment account bill"
          },
          "amount": {
            "type": "number",
            "description": "Amount charged for the charge/fee"
          },
          "currencyCode": {
            "type": "string",
            "example": "BRL",
            "description": "Code referencing the currency of the charge"
          },
          "additionalInfo": {
            "type": "string",
            "description": "Free field, mandatory to fill if 'OTHER' type of charge is selected"
          }
        },
        "type": "object",
        "required": [
          "id",
          "creditCardBillId",
          "type",
          "amount",
          "currencyCode"
        ],
        "example": {}
      },
      "PaymentRequest": {
        "description": "Response with information related to a payment request",
        "properties": {
          "id": {
            "type": "string",
            "description": "Primary identifier"
          },
          "amount": {
            "type": "number",
            "description": "Requested amount. For automatic pix it won't be returned"
          },
          "fees": {
            "type": "number",
            "description": "Fees charged for the payment request. This includes both Pluggy's fees and any customer-specific fees. Fees are calculated based on the payment method (PIX or Boleto) and the client's pricing configuration. For sandbox accounts, fees are set to 0."
          },
          "description": {
            "type": "string",
            "description": "Payment description"
          },
          "status": {
            "enum": [
              "CREATED",
              "IN_PROGRESS",
              "COMPLETED",
              "SCHEDULED",
              "WAITING_PAYER_AUTHORIZATION",
              "ERROR",
              "REFUND_IN_PROGRESS",
              "REFUNDED",
              "REFUND_ERROR",
              "CANCELED"
            ],
            "type": "string",
            "description": "Payment request status"
          },
          "clientPaymentId": {
            "type": "string",
            "description": "Client payment identifier"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the payment request was created"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the payment request was updated"
          },
          "callbackUrls": {
            "$ref": "#/components/schemas/PaymentRequestCallbackUrls"
          },
          "recipientId": {
            "type": "string",
            "format": "uuid",
            "description": "Payment receiver identifier"
          },
          "paymentUrl": {
            "type": "string",
            "description": "URL to begin the payment intent creation flow for this payment request"
          },
          "pixQrCode": {
            "type": "string",
            "description": "Pix QR code generated by the payment receiver"
          },
          "boleto": {
            "$ref": "#/components/schemas/Boleto"
          },
          "automaticPix": {
            "$ref": "#/components/schemas/PaymentIntentAutomaticPix"
          },
          "schedule": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/SINGLE"
              },
              {
                "$ref": "#/components/schemas/DAILY"
              },
              {
                "$ref": "#/components/schemas/WEEKLY"
              },
              {
                "$ref": "#/components/schemas/MONTHLY"
              },
              {
                "$ref": "#/components/schemas/CUSTOM"
              }
            ],
            "discriminator": {
              "propertyName": "type"
            }
          },
          "errorDetail": {
            "type": "object",
            "description": "Error details when payment request fails",
            "properties": {
              "code": {
                "type": "string",
                "description": "Error code"
              },
              "providerMessage": {
                "type": "string",
                "description": "Error message returned by the institution"
              }
            }
          },
          "isSandbox": {
            "type": "boolean",
            "description": "Indicates if this payment request is in sandbox mode. Default: false.",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "id",
          "status",
          "createdAt",
          "updatedAt",
          "paymentUrl"
        ],
        "example": {}
      },
      "SchedulePayment": {
        "description": "Information of a schedule payment",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "description": {
            "type": "string",
            "description": "Scheduled payment description"
          },
          "status": {
            "type": "string",
            "description": "Scheduled payment status",
            "enum": [
              "SCHEDULED",
              "COMPLETED",
              "ERROR"
            ]
          },
          "scheduledDate": {
            "type": "string",
            "format": "date",
            "description": "Date when the payment is scheduled"
          },
          "endToEndId": {
            "type": "string",
            "description": "Identifier for the payment, used to link the scheduled payment with the corresponding payment received"
          },
          "errorDetail": {
            "type": "object",
            "description": "Details about an error that occurred with the scheduled payment",
            "properties": {
              "code": {
                "type": "string",
                "description": "Error code"
              },
              "description": {
                "type": "string",
                "description": "Human-readable description of the error"
              },
              "detail": {
                "type": "string",
                "description": "Additional details about the error in the provider's language"
              }
            }
          }
        },
        "type": "object",
        "required": [
          "id",
          "description",
          "status",
          "scheduledDate"
        ]
      },
      "CreatePaymentRequest": {
        "description": "Request with information to create a payment request",
        "properties": {
          "amount": {
            "type": "number",
            "description": "Requested amount"
          },
          "description": {
            "type": "string",
            "description": "Payment description"
          },
          "callbackUrls": {
            "$ref": "#/components/schemas/PaymentRequestCallbackUrls"
          },
          "recipientId": {
            "type": "string",
            "format": "uuid",
            "description": "Payment receiver identifier"
          },
          "customerId": {
            "type": "string",
            "format": "uuid",
            "description": "Customer identifier associated to the payment"
          },
          "clientPaymentId": {
            "type": "string",
            "description": "Your payment identifier"
          },
          "schedule": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/SINGLE"
              },
              {
                "$ref": "#/components/schemas/DAILY"
              },
              {
                "$ref": "#/components/schemas/WEEKLY"
              },
              {
                "$ref": "#/components/schemas/MONTHLY"
              },
              {
                "$ref": "#/components/schemas/CUSTOM"
              }
            ],
            "nullable": true,
            "default": null,
            "discriminator": {
              "propertyName": "type"
            }
          },
          "isSandbox": {
            "type": "boolean",
            "description": "Indicates if this payment request should be created in sandbox mode. Default: false.",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "amount"
        ],
        "example": {
          "amount": 100.5,
          "description": "Transferência",
          "isSandbox": false
        }
      },
      "CreatePixQrPaymentRequest": {
        "description": "Request with information to create a PIX QR payment request",
        "properties": {
          "pixQrCode": {
            "type": "string",
            "description": "Pix QR code"
          },
          "callbackUrls": {
            "$ref": "#/components/schemas/PaymentRequestCallbackUrls"
          },
          "customerId": {
            "type": "string",
            "format": "uuid",
            "description": "Customer identifier associated to the payment"
          },
          "isSandbox": {
            "type": "boolean",
            "description": "Indicates if this payment request should be created in sandbox mode. Default: false.",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "pixQrCode"
        ],
        "example": {
          "pixQrCode": "00020126490014br.gov.bcb.pix0108dict-key0215additional-info52040000530398654031005802BR5912example-name6006Cidade62090505tx-id63045E20",
          "callbackUrls": null,
          "customerId": "5e9f8f8f-f8f8-4f8f-8f8f-8f8f8f8f8f8f",
          "isSandbox": false
        }
      },
      "UpdatePaymentRequest": {
        "description": "Request with information to update a payment request",
        "properties": {
          "amount": {
            "type": "number",
            "description": "Requested amount"
          },
          "description": {
            "type": "string",
            "description": "Payment description"
          },
          "callbackUrls": {
            "$ref": "#/components/schemas/PaymentRequestCallbackUrls"
          },
          "recipientId": {
            "type": "string",
            "format": "uuid",
            "description": "Payment receiver identifier"
          },
          "customerId": {
            "type": "string",
            "format": "uuid",
            "description": "Customer identifier associated to the payment"
          },
          "clientPaymentId": {
            "type": "string",
            "description": "Your payment identifier"
          },
          "isSandbox": {
            "type": "boolean",
            "description": "Indicates if this payment request should be updated as sandbox. Default: false.",
            "default": false
          }
        },
        "type": "object",
        "example": {
          "amount": 100.5,
          "description": "Transferência",
          "callbackUrls": null,
          "recipientId": "05c693bf-c196-47ea-a28c-8251d6bb8a06",
          "customerId": "5e9f8f8f-f8f8-4f8f-8f8f-8f8f8f8f8f8f",
          "clientPaymentId": "external-ref-456",
          "isSandbox": false
        }
      },
      "PaymentRequestCallbackUrls": {
        "description": "Redirect urls after the payment was completed or ended in error status",
        "properties": {
          "success": {
            "type": "string",
            "description": "Url to be redirected after the payment was completed"
          },
          "pending": {
            "type": "string",
            "description": "Url to be redirected when the payment is pending (for example, when it has status WAITING_PAYER_AUTHORIZATION"
          },
          "error": {
            "type": "string",
            "description": "Url to be redirected after the payment ended in error status"
          }
        },
        "type": "object",
        "example": {}
      },
      "PaymentInstitution": {
        "description": "Response with information related to a payment institution",
        "properties": {
          "id": {
            "type": "string",
            "description": "Primary identifier"
          },
          "name": {
            "type": "string",
            "description": "Payment institution name"
          },
          "tradeName": {
            "type": "string",
            "description": "Payment institution trade name"
          },
          "ispb": {
            "type": "string",
            "description": "Payment institution ISPB"
          },
          "compe": {
            "type": "string",
            "description": "Payment institution COMPE"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the payment institution was created"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the payment institution was updated"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "ispb",
          "tradeName",
          "createdAt",
          "updatedAt"
        ],
        "example": {
          "id": "5e9f8f8f-f8f8-4f8f-8f8f-8f8f8f8f8f8f",
          "name": "Banco J. Safra S.A.",
          "ispb": "03017677",
          "tradeName": "Banco Safra",
          "compe": "074",
          "createdAt": "2020-04-21T15:00:00.000Z",
          "updatedAt": "2020-04-21T15:00:00.000Z"
        }
      },
      "PaymentRecipientAccount": {
        "description": "Payment receiver bank account information",
        "properties": {
          "branch": {
            "type": "string",
            "description": "Receiver bank account branch (agency)"
          },
          "number": {
            "type": "string",
            "description": "Receiver bank account number"
          },
          "type": {
            "type": "string",
            "description": "Receiver bank account type, could be: 'CHECKING_ACCOUNT', 'SAVINGS_ACCOUNT' or 'GUARANTEED_ACCOUNT'"
          }
        },
        "type": "object",
        "example": {},
        "required": [
          "branch",
          "number",
          "type"
        ]
      },
      "PaymentIntent": {
        "description": "Request with information related to a payment intent",
        "properties": {
          "id": {
            "type": "string",
            "description": "Primary identifier"
          },
          "status": {
            "enum": [
              "PAYMENT_REJECTED",
              "ERROR",
              "CANCELED",
              "CONSENT_REJECTED",
              "STARTED",
              "ENQUEUED",
              "CONSENT_AWAITING_AUTHORIZATION",
              "CONSENT_AUTHORIZED",
              "PAYMENT_PENDING",
              "PAYMENT_PARTIALLY_ACCEPTED",
              "PAYMENT_SETTLEMENT_PROCESSING",
              "PAYMENT_SETTLEMENT_DEBTOR_ACCOUNT",
              "PAYMENT_COMPLETED",
              "POSSIBLE_FRAUD",
              "TOP_UP_CNPJ_MISMATCH",
              "REVOKED"
            ],
            "type": "string",
            "description": "Payment intent status"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the payment intent was created"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the payment intent was updated"
          },
          "paymentRequest": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentRequest"
              }
            ],
            "description": "Payment request associated to the payment intent"
          },
          "connector": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Connector"
              }
            ],
            "description": "Connector associated to the payment intent"
          },
          "consentUrl": {
            "type": "string",
            "description": "Url to authorize the payment intent"
          },
          "referenceId": {
            "type": "string",
            "description": "Pix id related to the payment intent"
          },
          "paymentMethod": {
            "type": "string",
            "enum": [
              "PIS",
              "PIX"
            ],
            "description": "Payment method can be PIS (Payment Initiation) or PIX",
            "default": "PIS"
          },
          "pixData": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PixData"
              }
            ],
            "description": "Pix data related to the payment intent (only applies for PIX payment method)"
          },
          "errorDetail": {
            "type": "object",
            "description": "Error details when payment intent fails",
            "properties": {
              "code": {
                "type": "string",
                "description": "Error code"
              },
              "providerCode": {
                "type": "string",
                "description": "Provider error code"
              },
              "providerTitle": {
                "type": "string",
                "description": "Provider error title"
              },
              "providerDetail": {
                "type": "string",
                "description": "Provider detailed error description"
              }
            }
          }
        },
        "type": "object",
        "required": [
          "amount"
        ],
        "example": {
          "id": "4cfe1f6d-ae71-4c35-aae0-8f8a535ffbbd",
          "status": "CONSENT_AWAITING_AUTHORIZATION",
          "createdAt": "2023-11-06T15:38:47.861Z",
          "updatedAt": "2023-11-06T15:45:19.384Z",
          "paymentRequest": {
            "id": "c2a6b7d9-3349-435d-8341-44021449ebbc",
            "amount": 100.5,
            "description": "Transferência",
            "status": "IN_PROGRESS",
            "createdAt": "2023-11-06T13:03:45.689Z",
            "updatedAt": "2023-11-06T15:45:19.401Z",
            "callbackUrls": null,
            "recipient": null,
            "paymentUrl": "https://pay.pluggy.ai/05c693bf-c196-47ea-a28c-8251d6bb8a06"
          },
          "connector": {
            "id": 603,
            "name": "Bradesco",
            "primaryColor": "e5173f",
            "institutionUrl": "https://banco.bradesco/open-finance/logo/icones_vetorial-pf.svg",
            "country": "BR",
            "type": "PERSONAL_BANK",
            "credentials": [
              {
                "validation": "^\\d{3}\\.?\\d{3}\\.?\\d{3}-?\\d{2}$",
                "validationMessage": "CPF deve ter 11 números.",
                "label": "CPF",
                "name": "cpf",
                "type": "number",
                "placeholder": "",
                "optional": false
              }
            ],
            "imageUrl": "https://cdn.pluggy.ai/assets/connector-icons/203.svg",
            "hasMFA": false,
            "oauth": true,
            "health": {
              "status": "ONLINE",
              "stage": null
            },
            "products": [
              "ACCOUNTS",
              "TRANSACTIONS",
              "IDENTITY",
              "CREDIT_CARDS",
              "PAYMENT_DATA",
              "LOANS",
              "INVESTMENTS"
            ],
            "createdAt": "2023-07-12T20:20:17.253Z",
            "isSandbox": false,
            "isOpenFinance": true
          },
          "consentUrl": "https://consenturl.com"
        }
      },
      "CreatePaymentIntent": {
        "description": "Request with information to create a payment intent",
        "properties": {
          "paymentRequestId": {
            "type": "string",
            "description": "Primary identifier of the payment request associated to the payment intent"
          },
          "parameters": {
            "$ref": "#/components/schemas/PaymentIntentParameter"
          },
          "connectorId": {
            "type": "number",
            "description": "Primary identifier of the connector associated to the payment intent"
          },
          "paymentMethod": {
            "type": "string",
            "enum": [
              "PIS"
            ],
            "description": "Payment method can be PIS (Payment Initiation) or PIX (PIX QR flow)."
          },
          "isDynamicPix": {
            "type": "boolean",
            "description": "Only for PIX paymentMethod. If true, the generated PIX QR code is dynamic and one-use. This requires the customerId to be present, and the customer must have CPF/CNPJ"
          }
        },
        "type": "object",
        "example": {}
      },
      "PaymentCustomer": {
        "description": "Response with information related to a payment customer",
        "properties": {
          "id": {
            "type": "string",
            "description": "Primary identifier"
          },
          "type": {
            "enum": [
              "INDIVIDUAL",
              "BUSINESS"
            ],
            "type": "string",
            "description": "Customer type"
          },
          "name": {
            "type": "string",
            "description": "Customer name"
          },
          "email": {
            "type": "string",
            "description": "Customer email"
          },
          "cpf": {
            "type": "string",
            "description": "Customer CPF"
          },
          "cnpj": {
            "type": "string",
            "description": "Customer CNPJ, if type is `BUSINESS`"
          }
        },
        "type": "object",
        "required": [
          "id",
          "type",
          "name"
        ],
        "example": {
          "id": "5e9f8f8f-f8f8-4f8f-8f8f-8f8f8f8f8f8f",
          "type": "INDIVIDUAL",
          "name": "Marco Silva",
          "email": "msilva@pluggy.ai",
          "cpf": "123456789-00"
        }
      },
      "CreatePaymentCustomerRequestBody": {
        "description": "Response with information related to a payment customer",
        "properties": {
          "type": {
            "enum": [
              "INDIVIDUAL",
              "BUSINESS"
            ],
            "type": "string",
            "description": "Customer type"
          },
          "name": {
            "type": "string",
            "description": "Customer name"
          },
          "email": {
            "type": "string",
            "description": "Customer email"
          },
          "cpf": {
            "type": "string",
            "description": "Customer CPF"
          },
          "cnpj": {
            "type": "string",
            "description": "Customer CNPJ, if type is `BUSINESS`"
          }
        },
        "type": "object",
        "required": [
          "id",
          "type",
          "name"
        ],
        "example": {
          "id": "5e9f8f8f-f8f8-4f8f-8f8f-8f8f8f8f8f8f",
          "type": "INDIVIDUAL",
          "name": "Marco Silva",
          "email": "msilva@pluggy.ai",
          "cpf": "123456789-00"
        }
      },
      "CreateOrUpdatePaymentCustomer": {
        "description": "Response with information related to a payment customer",
        "properties": {
          "id": {
            "type": "string",
            "description": "Primary identifier"
          },
          "type": {
            "enum": [
              "INDIVIDUAL",
              "BUSINESS"
            ],
            "type": "string",
            "description": "Customer type"
          },
          "name": {
            "type": "string",
            "description": "Customer name"
          },
          "email": {
            "type": "string",
            "description": "Customer email"
          },
          "cpf": {
            "type": "string",
            "description": "Customer CPF"
          },
          "cnpj": {
            "type": "string",
            "description": "Customer CNPJ, if type is `BUSINESS`"
          }
        },
        "type": "object",
        "required": [
          "id",
          "type",
          "name"
        ],
        "example": {
          "id": "5e9f8f8f-f8f8-4f8f-8f8f-8f8f8f8f8f8f",
          "type": "INDIVIDUAL",
          "name": "Marco Silva",
          "email": "msilva@pluggy.ai",
          "cpf": "123456789-00"
        }
      },
      "PaymentRecipient": {
        "description": "Response with information related to a payment recipient",
        "properties": {
          "id": {
            "type": "string",
            "description": "Primary identifier"
          },
          "taxNumber": {
            "type": "string",
            "description": "Account owner tax number. Can be CPF or CNPJ (only numbers)."
          },
          "name": {
            "type": "string",
            "description": "Account owner name."
          },
          "paymentInstitution": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentInstitution"
              }
            ],
            "description": "Recipient's bank account destination."
          },
          "isDefault": {
            "type": "boolean",
            "description": "Indicates if the recipient is the default one"
          },
          "account": {
            "$ref": "#/components/schemas/PaymentRecipientAccount"
          },
          "pixKey": {
            "type": "string",
            "description": "Pix key associated with the payment recipient"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "taxNumber",
          "paymentInstitution",
          "isDefault",
          "account"
        ],
        "example": {
          "id": "5e9f8f8f-f8f8-4f8f-8f8f-8f8f8f8f8f8f",
          "name": "Conta empresa",
          "taxNumber": "123456789-00",
          "paymentInstitution": {
            "id": "00000000-0000-0000-0000-000000000000",
            "name": "Banco J. Safra S.A.",
            "ispb": "03017677",
            "tradeName": "Banco Safra",
            "compe": "074",
            "createdAt": "2020-04-21T15:00:00.000Z",
            "updatedAt": "2020-04-21T15:00:00.000Z"
          },
          "account": {
            "branch": "0001",
            "number": "123456",
            "type": "CHECKING_ACCOUNT"
          },
          "isDefault": false,
          "pixKey": null
        }
      },
      "CreatePaymentRecipient": {
        "description": "Request with information to create a payment recipient.",
        "properties": {
          "taxNumber": {
            "type": "string",
            "description": "Account owner tax number. Can be CPF or CNPJ (only numbers)"
          },
          "name": {
            "type": "string",
            "description": "Account owner name."
          },
          "paymentInstitutionId": {
            "type": "string",
            "format": "uuid",
            "description": "Primary identifier of the institution associated to the payment recipient."
          },
          "account": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentRecipientAccount"
              }
            ],
            "description": "Recipient's bank account destination."
          }
        },
        "required": [
          "taxNumber",
          "name",
          "paymentInstitutionId",
          "account"
        ],
        "type": "object",
        "example": {
          "taxNumber": "123456789-00",
          "name": "Conta empresa",
          "paymentInstitutionId": "00000000-0000-0000-0000-000000000000",
          "account": {
            "branch": "0001",
            "number": "123456",
            "type": "CHECKING_ACCOUNT"
          }
        }
      },
      "UpdatePaymentRecipient": {
        "description": "Request with information to update a payment recipient",
        "properties": {
          "taxNumber": {
            "type": "string",
            "description": "Account owner tax number. Can be CPF or CNPJ (only numbers)"
          },
          "name": {
            "type": "string",
            "description": "Account owner name."
          },
          "paymentInstitutionId": {
            "type": "string",
            "format": "uuid",
            "description": "Primary identifier of the institution associated to the payment recipient."
          },
          "account": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentRecipientAccount"
              }
            ],
            "description": "Recipient's bank account destination."
          }
        },
        "type": "object",
        "example": {
          "taxNumber": "123456789-00",
          "name": "Conta empresa",
          "paymentInstitutionId": "00000000-0000-0000-0000-000000000000",
          "account": {
            "branch": "0001",
            "number": "123456",
            "type": "CHECKING_ACCOUNT"
          }
        }
      },
      "PixData": {
        "description": "Payment Intent PIX data",
        "properties": {
          "value": {
            "type": "string",
            "description": "PIX QR raw value"
          },
          "qr": {
            "type": "string",
            "description": "PIX QR image in base64 format"
          }
        },
        "type": "object",
        "required": [
          "value",
          "qr"
        ]
      },
      "Boleto": {
        "description": "Boleto data",
        "properties": {
          "digitableLine": {
            "type": "string",
            "description": "Boleto digitable line"
          },
          "barcode": {
            "type": "string",
            "description": "Boleto barcode"
          },
          "payer": {
            "$ref": "#/components/schemas/BoletoPayer"
          },
          "recipient": {
            "$ref": "#/components/schemas/BoletoRecipient"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "description": "Boleto issue date"
          },
          "dueDate": {
            "type": "string",
            "format": "date-time",
            "description": "Boleto due date"
          },
          "expirationDate": {
            "type": "string",
            "format": "date-time",
            "description": "After this date, the boleto cannot be paid"
          },
          "baseAmount": {
            "type": "number",
            "description": "Boleto original amount, without interests, penalties and discounts"
          },
          "penaltyAmount": {
            "type": "number",
            "description": "Boleto penalty amount. If there is no penalty, it will be returned as zero"
          },
          "interestAmount": {
            "type": "number",
            "description": "Boleto interest amount. If there is no interest, it will be returned as zero"
          },
          "discountAmount": {
            "type": "number",
            "description": "Boleto discount amount. If there is no discounts, it will be returned as zero"
          },
          "totalAmount": {
            "type": "number",
            "description": "Boleto final amount. It is equal to the base amount plus penalties and interests, minus discounts"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the lastest information of this boleto has been retrieved"
          }
        },
        "type": "object",
        "required": [
          "digitableLine",
          "barcode",
          "payer",
          "recipient",
          "dueDate",
          "baseAmount",
          "penaltyAmount",
          "discountAmount",
          "totalAmount"
        ]
      },
      "BoletoPayer": {
        "description": "Boleto payer information",
        "properties": {
          "taxNumber": {
            "type": "string",
            "description": "Payer CPF or CNPJ"
          },
          "name": {
            "type": "string",
            "description": "Payer name"
          }
        },
        "type": "object",
        "required": [
          "taxNumber",
          "name"
        ]
      },
      "BoletoRecipient": {
        "description": "Boleto recipient information",
        "properties": {
          "taxNumber": {
            "type": "string",
            "description": "Recipient CPF or CNPJ"
          },
          "name": {
            "type": "string",
            "description": "Recipient name"
          }
        },
        "type": "object",
        "required": [
          "taxNumber",
          "name"
        ]
      },
      "SINGLE": {
        "title": "One time option",
        "description": "Schedule atribute to generate one payment in the future",
        "properties": {
          "type": {
            "type": "string",
            "description": "Scheduled type",
            "enum": [
              "SINGLE"
            ],
            "example": "SINGLE"
          },
          "date": {
            "type": "string",
            "format": "date",
            "example": "2024-06-11"
          }
        },
        "type": "object",
        "required": [
          "type",
          "date"
        ]
      },
      "DAILY": {
        "title": "Daily option",
        "description": "Schedule atribute to generate daily payments",
        "properties": {
          "type": {
            "type": "string",
            "description": "Scheduled type",
            "enum": [
              "DAILY"
            ],
            "example": "DAILY"
          },
          "startDate": {
            "type": "string",
            "format": "date",
            "description": "The start date of the validity of the scheduled payment authorization.",
            "example": "2024-06-11"
          },
          "occurrences": {
            "type": "number",
            "description": "Under the specified schedule frequency, how many payments will be scheduled to occur.",
            "format": "integer",
            "minimum": 3,
            "example": 3,
            "maximum": 59
          }
        },
        "type": "object",
        "required": [
          "type",
          "startDate",
          "quantity"
        ]
      },
      "WEEKLY": {
        "title": "Weekly option",
        "description": "Schedule atribute to generate weekly payments",
        "properties": {
          "type": {
            "type": "string",
            "description": "Scheduled type",
            "enum": [
              "WEEKLY"
            ],
            "example": "WEEKLY"
          },
          "startDate": {
            "type": "string",
            "format": "date",
            "description": "The start date of the validity of the scheduled payment authorization.",
            "example": "2024-06-11"
          },
          "dayOfWeek": {
            "type": "string",
            "description": "Day of the week on which each payment will occur. For instance, if set to 'MONDAY', the first payment will occur on the first monday after the startDate (or the same day, if it is already monday), and every monday after that.",
            "enum": [
              "MONDAY",
              "TUESDAY",
              "WEDNESDAY",
              "THURDSAY",
              "FRIDAY",
              "SATURDAY",
              "SUNDAY"
            ],
            "example": "MONDAY"
          },
          "occurrences": {
            "type": "number",
            "description": "Under the specified schedule frequency, how many payments will be scheduled to occur.",
            "format": "integer",
            "minimum": 3,
            "example": 3,
            "maximum": 59
          }
        },
        "type": "object",
        "required": [
          "type",
          "startDate",
          "dayOfWeek",
          "quantity"
        ]
      },
      "MONTHLY": {
        "title": "Monthly option",
        "description": "Schedule atribute to generate monthly payments",
        "properties": {
          "type": {
            "type": "string",
            "description": "Scheduled type",
            "enum": [
              "MONTHLY"
            ],
            "example": "MONTHLY"
          },
          "startDate": {
            "type": "string",
            "format": "date",
            "example": "2024-06-11"
          },
          "dayOfMonth": {
            "type": "number",
            "description": "Day of the month on which each payment will occur. For example, if '10', the first payment will occur on the next 10th day of the month after the start date, or the same day if it is already 10th, and every 10th day after that.",
            "minimum": 1,
            "maximum": 30,
            "example": 3
          },
          "occurrences": {
            "type": "number",
            "description": "Under the specified schedule frequency, how many payments will be scheduled to occur.",
            "format": "integer",
            "minimum": 3,
            "maximum": 23,
            "example": 3
          }
        },
        "type": "object",
        "required": [
          "type",
          "startDate",
          "dayOfMonth",
          "quantity"
        ]
      },
      "CUSTOM": {
        "title": "Customized option",
        "description": "Schedule atribute to generate custom payments in the future",
        "properties": {
          "type": {
            "description": "Scheduled type",
            "enum": [
              "CUSTOM"
            ],
            "example": "CUSTOM"
          },
          "dates": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "date",
              "example": "2024-06-11"
            }
          },
          "additionalInformation": {
            "type": "string",
            "description": "Additional information about the custom schedule"
          }
        },
        "type": "object",
        "required": [
          "type",
          "dates"
        ]
      },
      "PageResponseConsents": {
        "description": "",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Consent"
            },
            "description": ""
          },
          "page": {
            "type": "number",
            "format": "double",
            "description": ""
          },
          "total": {
            "type": "number",
            "format": "double",
            "description": ""
          },
          "totalPages": {
            "type": "number",
            "format": "double",
            "description": ""
          }
        },
        "type": "object",
        "required": [
          "results",
          "page",
          "total",
          "totalPages"
        ]
      },
      "Consent": {
        "description": "Item consent information",
        "properties": {
          "id": {
            "type": "string",
            "description": "Consent primary identifier"
          },
          "itemId": {
            "type": "string",
            "description": "Primary identifier of the item associated to the consent"
          },
          "products": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ACCOUNTS",
                "CREDIT_CARDS",
                "TRANSACTIONS",
                "PAYMENT_DATA",
                "INVESTMENTS",
                "INVESTMENTS_TRANSACTIONS",
                "IDENTITY",
                "BROKERAGE_NOTE",
                "MOVE_SECURITY",
                "LOANS"
              ]
            },
            "description": "Products to be collected in the connection"
          },
          "openFinancePermissionsGranted": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "REGISTRATION_ALL",
                "REGISTRATION_IDENTIFICATIONS",
                "REGISTRATION_QUALIFICATIONS",
                "REGISTRATION_FINANCIAL_RELATIONS",
                "ACCOUNTS_ALL",
                "ACCOUNTS_LIST",
                "ACCOUNTS_BALANCES",
                "ACCOUNTS_LIMITS",
                "ACCOUNTS_TRANSACTIONS",
                "CREDIT_CARDS_ALL",
                "CREDIT_CARDS_LIST",
                "CREDIT_CARDS_LIMITS",
                "CREDIT_CARDS_TRANSACTIONS",
                "CREDIT_CARDS_BILLS",
                "CREDIT_OPERATIONS_ALL",
                "INVESTMENTS_ALL",
                "EXCHANGES_ALL"
              ]
            },
            "description": "Products consented by the user to be collected"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the consent was given"
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the consent expires. Null if the consent doesn't expire"
          },
          "revokedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the consent was revoked"
          }
        },
        "type": "object",
        "required": [
          "id",
          "itemId",
          "products",
          "createdAt"
        ]
      },
      "SmartTransferPreauthorization": {
        "description": "Smart transfer preauthorization",
        "properties": {
          "id": {
            "type": "string",
            "description": "Preauthorization primary identifier"
          },
          "status": {
            "type": "string",
            "description": "Preauthorization status",
            "enum": [
              "CREATED",
              "COMPLETED",
              "REVOKED",
              "REJECTED",
              "ERROR"
            ],
            "example": "COMPLETED"
          },
          "consentUrl": {
            "type": "string",
            "description": "Url to give the consent in the institution"
          },
          "clientPreauthorizationId": {
            "type": "string",
            "description": "Client preauthorization identifier"
          },
          "callbackUrls": {
            "$ref": "#/components/schemas/SmartTransferCallbackUrls"
          },
          "recipients": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentRecipient"
            }
          },
          "connector": {
            "$ref": "#/components/schemas/Connector"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the preauthorization was created"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the preauthorization was updated"
          }
        },
        "type": "object",
        "required": [
          "id",
          "status",
          "recipients",
          "connector",
          "createdAt",
          "updatedAt"
        ]
      },
      "SmartTransferCallbackUrls": {
        "description": "Redirect urls after the preauthorization flow was completed or ended in error status",
        "properties": {
          "success": {
            "type": "string",
            "description": "Url to be redirected after the preauthorization was completed"
          },
          "error": {
            "type": "string",
            "description": "Url to be redirected after the preauthorization ended in error status"
          }
        },
        "type": "object",
        "example": {}
      },
      "CreateSmartTransferPreauthorization": {
        "description": "Create smart transfer preauthorization request data",
        "properties": {
          "connectorId": {
            "type": "number",
            "description": "Primary identifier of the connector"
          },
          "parameters": {
            "$ref": "#/components/schemas/SmartTransferPreauthorizationParameter"
          },
          "recipientIds": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Primary identifier of the payment recipient"
            }
          },
          "callbackUrls": {
            "$ref": "#/components/schemas/SmartTransferCallbackUrls"
          },
          "clientPreauthorizationId": {
            "type": "string",
            "description": "Client preauthorization identifier"
          }
        },
        "required": [
          "connectorId",
          "parameters",
          "recipientIds"
        ]
      },
      "SmartTransferPreauthorizationParameter": {
        "description": "Credentials neccesary to create a smart transfer preauthorization",
        "properties": {
          "cpf": {
            "type": "string",
            "description": "CPF of the payer"
          },
          "cnpj": {
            "type": "string",
            "description": "CNPJ of the payer"
          }
        },
        "type": "object",
        "example": {
          "cpf": "416.799.495-00",
          "cnpj": "41.679.495/0001-00"
        },
        "required": [
          "cpf"
        ]
      },
      "SmartTransferPayment": {
        "description": "Smart transfer payment",
        "properties": {
          "id": {
            "type": "string",
            "description": "Payment primary identifier"
          },
          "preauthorizationId": {
            "type": "string",
            "description": "Payment primary identifier"
          },
          "status": {
            "enum": [
              "PAYMENT_REJECTED",
              "ERROR",
              "CANCELED",
              "CONSENT_REJECTED",
              "CONSENT_AUTHORIZED",
              "PAYMENT_PENDING",
              "PAYMENT_PARTIALLY_ACCEPTED",
              "PAYMENT_SETTLEMENT_PROCESSING",
              "PAYMENT_SETTLEMENT_DEBTOR_ACCOUNT",
              "PAYMENT_COMPLETED"
            ],
            "type": "string",
            "description": "Payment status"
          },
          "amount": {
            "type": "number",
            "description": "Payment amount"
          },
          "description": {
            "type": "string",
            "description": "Payment description"
          },
          "recipient": {
            "$ref": "#/components/schemas/PaymentRecipient"
          },
          "clientPaymentId": {
            "type": "string",
            "description": "Client payment identifier"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the payemnt was created"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the payment was updated"
          }
        },
        "type": "object",
        "required": [
          "id",
          "preauthorizationId",
          "status",
          "amount",
          "recipient",
          "createdAt",
          "updatedAt"
        ]
      },
      "CreateSmartTransferPayment": {
        "description": "Create smart transfer payment request data",
        "properties": {
          "preauthorizationId": {
            "type": "string",
            "description": "Primary identifier of the preauthorization"
          },
          "recipientId": {
            "type": "string",
            "description": "Primary identifier of the paymen recipient"
          },
          "amount": {
            "type": "number",
            "description": "Payment amount"
          },
          "description": {
            "type": "string",
            "description": "Payment description"
          },
          "clientPaymentId": {
            "type": "string",
            "description": "Client payment identifier"
          }
        },
        "required": [
          "preauthorizationId",
          "recipientId",
          "amount"
        ]
      },
      "PaymentDataBoletoMetadata": {
        "description": "Information of the boleto associated with the payment",
        "properties": {
          "digitableLine": {
            "type": "string",
            "description": "Boleto identifier"
          },
          "barcode": {
            "type": "string",
            "description": "Boleto barcode number"
          },
          "baseAmount": {
            "type": "number",
            "description": "Boleto original amount without considering penalties / interests / discounts"
          },
          "interestAmount": {
            "type": "number",
            "description": "Boleto interest amount"
          },
          "penaltyAmount": {
            "type": "number",
            "description": "Boleto penalty amount"
          },
          "discountAmount": {
            "type": "number",
            "description": "Boleto discount amount"
          }
        }
      },
      "CreateBoletoConnection": {
        "description": "Request with information to create a boleto connection",
        "type": "object",
        "required": [
          "connectorId",
          "credentials"
        ],
        "properties": {
          "connectorId": {
            "type": "integer",
            "minimum": 1,
            "description": "Connector identifier. Check out the list of connectors, and if it has the flag 'supportsBoletoManagement' as true, it means it's possible to create a boleto connection with it."
          },
          "credentials": {
            "type": "object",
            "description": "Credentials required for the connection. For Inter, they are clientId, clientSecret, certificate and privateKey, follow: https://docs.pluggy.ai/docs/connect-an-account#inter-pj",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "example": {
          "connectorId": 225,
          "credentials": {
            "clientId": "your-client-id",
            "clientSecret": "your-client-secret",
            "certificate": "your-certificate-no-newlines",
            "privateKey": "your-private-key-no-newlines"
          }
        }
      },
      "CreateBoletoConnectionFromItem": {
        "description": "Request with information to create a boleto connection from an Item",
        "type": "object",
        "required": [
          "itemId"
        ],
        "properties": {
          "itemId": {
            "type": "string",
            "format": "uuid",
            "description": "Item ID"
          }
        },
        "example": {
          "itemId": "0303c07b-fef0-4903-af9a-007fa086ca8c"
        }
      },
      "BoletoConnection": {
        "description": "Response with information related to a boleto connection",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Primary identifier"
          },
          "connectorId": {
            "type": "integer",
            "description": "Primary identifier of the connector associated with this connection"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the connection was created"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the connection was last updated"
          }
        },
        "required": [
          "id",
          "connectorId",
          "createdAt",
          "updatedAt"
        ],
        "example": {
          "id": "dc3537ad-13b4-4770-b248-e4578983899c",
          "connectorId": 225,
          "createdAt": "2023-01-01T00:00:00.000Z",
          "updatedAt": "2023-01-01T00:00:00.000Z"
        }
      },
      "CreateBoleto": {
        "description": "Request with information to create a boleto",
        "type": "object",
        "properties": {
          "boletoConnectionId": {
            "type": "string",
            "format": "uuid",
            "description": "Primary identifier of the boleto connection"
          },
          "boleto": {
            "type": "object",
            "properties": {
              "seuNumero": {
                "type": "string",
                "maxLength": 10,
                "description": "Your identifier for this boleto"
              },
              "amount": {
                "type": "number",
                "minimum": 2.5,
                "description": "Boleto amount"
              },
              "dueDate": {
                "type": "string",
                "format": "date-time",
                "description": "Due date for the boleto. Must be today or in the future."
              },
              "payer": {
                "type": "object",
                "properties": {
                  "taxNumber": {
                    "type": "string",
                    "description": "Payer tax number (CPF/CNPJ)",
                    "example": "41.679.495/0001-00"
                  },
                  "name": {
                    "type": "string",
                    "description": "Payer name",
                    "example": "NOME LEGAL EMPRESA"
                  },
                  "addressStreet": {
                    "type": "string",
                    "description": "Payer street address"
                  },
                  "addressCity": {
                    "type": "string",
                    "description": "Payer city"
                  },
                  "addressState": {
                    "type": "string",
                    "description": "Payer state"
                  },
                  "addressZipCode": {
                    "type": "string",
                    "description": "Payer ZIP code"
                  }
                },
                "required": [
                  "taxNumber",
                  "name",
                  "addressState",
                  "addressZipCode"
                ]
              },
              "fine": {
                "type": "object",
                "description": "Fine information for late payment",
                "properties": {
                  "value": {
                    "type": "number",
                    "minimum": 0,
                    "description": "Fine value"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "PERCENTAGE",
                      "FIXED"
                    ],
                    "description": "Type of fine calculation"
                  }
                },
                "required": [
                  "value",
                  "type"
                ]
              },
              "interest": {
                "type": "object",
                "description": "Interest information for late payment",
                "properties": {
                  "value": {
                    "type": "number",
                    "minimum": 0,
                    "description": "Interest value"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "PERCENTAGE"
                    ],
                    "description": "Type of interest calculation"
                  }
                },
                "required": [
                  "value",
                  "type"
                ]
              }
            },
            "required": [
              "seuNumero",
              "amount",
              "dueDate",
              "payer"
            ]
          }
        },
        "required": [
          "boletoConnectionId",
          "boleto"
        ]
      },
      "IssuedBoleto": {
        "description": "Response with information related to an issued boleto",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Primary identifier"
          },
          "amount": {
            "type": "number",
            "description": "Boleto amount",
            "minimum": 2.5
          },
          "status": {
            "type": "string",
            "description": "Current status of the boleto",
            "enum": [
              "OPEN",
              "PAID",
              "OVERDUE",
              "CANCELLED"
            ]
          },
          "seuNumero": {
            "type": "string",
            "maxLength": 10,
            "description": "Your identifier for this boleto"
          },
          "dueDate": {
            "type": "string",
            "format": "date-time",
            "description": "Due date of the boleto"
          },
          "payer": {
            "type": "object",
            "properties": {
              "taxNumber": {
                "type": "string",
                "description": "Payer tax number (CPF/CNPJ)"
              },
              "personType": {
                "type": "string",
                "description": "Type of person (individual or business)"
              },
              "name": {
                "type": "string",
                "description": "Payer name"
              },
              "addressStreet": {
                "type": "string",
                "description": "Payer street address"
              },
              "addressNumber": {
                "type": "string",
                "description": "Payer address number"
              },
              "addressComplement": {
                "type": "string",
                "description": "Additional address information"
              },
              "addressNeighborhood": {
                "type": "string",
                "description": "Payer neighborhood"
              },
              "addressCity": {
                "type": "string",
                "description": "Payer city"
              },
              "addressState": {
                "type": "string",
                "description": "Payer state"
              },
              "addressZipCode": {
                "type": "string",
                "description": "Payer ZIP code"
              },
              "email": {
                "type": "string",
                "description": "Payer email"
              },
              "ddd": {
                "type": "string",
                "description": "Payer area code"
              },
              "phoneNumber": {
                "type": "string",
                "description": "Payer phone number"
              },
              "amountPaid": {
                "type": "number",
                "description": "Amount paid or null if it hasn't been paid yet"
              },
              "paymentOrigin": {
                "type": "string",
                "description": "Payment origin for the boleto",
                "enum": [
                  "PIX",
                  "BOLETO"
                ]
              }
            },
            "required": [
              "taxNumber",
              "name",
              "addressState",
              "addressZipCode"
            ]
          },
          "pixQr": {
            "type": "string",
            "description": "PIX QR code for payment"
          },
          "digitableLine": {
            "type": "string",
            "description": "Boleto digitable line"
          },
          "nossoNumero": {
            "type": "string",
            "description": "Bank's internal identifier for the boleto"
          },
          "barcode": {
            "type": "string",
            "description": "Boleto barcode"
          },
          "boletoConnectionId": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the boleto connection used to create this boleto"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the boleto was created"
          },
          "amountPaid": {
            "type": "number",
            "description": "Amount that was paid for this boleto",
            "nullable": true
          },
          "paymentOrigin": {
            "type": "string",
            "enum": [
              "PIX",
              "BOLETO"
            ],
            "description": "Origin of the payment when the boleto is paid",
            "nullable": true
          },
          "fine": {
            "type": "object",
            "properties": {
              "value": {
                "type": "number",
                "minimum": 0,
                "description": "Fine value"
              },
              "type": {
                "type": "string",
                "enum": [
                  "PERCENTAGE",
                  "FIXED"
                ],
                "description": "Type of fine calculation"
              }
            },
            "description": "Fine information for late payment",
            "nullable": true
          },
          "interest": {
            "type": "object",
            "properties": {
              "value": {
                "type": "number",
                "minimum": 0,
                "description": "Interest value"
              },
              "type": {
                "type": "string",
                "enum": [
                  "PERCENTAGE"
                ],
                "description": "Type of interest calculation"
              }
            },
            "description": "Interest information for late payment"
          },
          "paidAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the boleto was paid"
          }
        },
        "required": [
          "id",
          "providerId",
          "amount",
          "status",
          "createdAt",
          "seuNumero",
          "dueDate",
          "payer",
          "digitableLine",
          "barcode",
          "boletoConnectionId"
        ]
      },
      "CreateAutomaticPixPaymentRequest": {
        "description": "Automatic PIX data",
        "type": "object",
        "properties": {
          "fixedAmount": {
            "type": "number",
            "description": "Fixed charge amount; if filled in, it represents consent for payments of fixed amounts, not subject to change during the validity of the consent. If it's sent, minimumVariableAmount and maximumVariableAmount cannot be provided."
          },
          "minimumVariableAmount": {
            "type": "number",
            "description": "Minimum amount allowed per charge; if filled in, it represents consent for payments of variable amounts. If it's sent, fixedAmount cannot be provided."
          },
          "maximumVariableAmount": {
            "type": "number",
            "description": "Maximum amount allowed per charge; if filled in, it represents consent for payments of variable amounts. If it's sent, fixedAmount cannot be provided."
          },
          "description": {
            "type": "string",
            "description": "Description for the automatic pix authorization"
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "description": "Represents the expected date for the first occurrence of a payment associated with the recurrence. Date format must be YYYY-MM-DD (for example: 2025-06-16)"
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time",
            "description": "Expiration date for the automatic pix authorization. The date must be in UTC and the format must follow the following pattern: YYYY-MM-DDTHH:MM:SSZ (for example: 2025-06-16T03:00:00Z)."
          },
          "isRetryAccepted": {
            "type": "boolean",
            "description": "Indicates whether the receiving customer is allowed to make payment attempts, according to the rules established in the Pix arrangement."
          },
          "firstPayment": {
            "$ref": "#/components/schemas/AutomaticPixFirstPayment"
          },
          "interval": {
            "type": "string",
            "enum": [
              "WEEKLY",
              "MONTHLY",
              "QUARTERLY",
              "SEMESTER",
              "YEARLY"
            ],
            "description": "Defines the permitted frequency for carrying out transactions."
          },
          "callbackUrls": {
            "$ref": "#/components/schemas/PaymentRequestCallbackUrls"
          },
          "recipientId": {
            "type": "string",
            "description": "Primary identifier of the payment recipient"
          },
          "clientPaymentId": {
            "type": "string",
            "description": "Client payment identifier"
          },
          "customerId": {
            "type": "string",
            "description": "Primary identifier of the customer"
          }
        },
        "required": [
          "startDate",
          "interval",
          "recipientId"
        ]
      },
      "AutomaticPixFirstPayment": {
        "description": "Definitions for the first payment. It is considered as the user's enrollment payment for the service.",
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "format": "date-time",
            "description": "Defines the target settlement date of the first payment. If not provided, it will be settled immediately. Date format must be YYYY-MM-DD (for example: 2025-06-16)"
          },
          "description": {
            "type": "string",
            "description": "Description for the first payment. If not provided, the description will be the same as the description of the payment request"
          },
          "amount": {
            "type": "number",
            "description": "Amount for the first payment."
          }
        },
        "required": [
          "amount"
        ]
      },
      "PaymentIntentAutomaticPix": {
        "description": "Automatic PIX data",
        "type": "object",
        "properties": {
          "fixedAmount": {
            "type": "number",
            "description": "Fixed charge amount; if filled in, it represents consent for payments of fixed amounts, not subject to change during the validity of the consent. If it's sent, minimumVariableAmount and maximumVariableAmount cannot be provided."
          },
          "minimumVariableAmount": {
            "type": "number",
            "description": "Minimum amount allowed per charge; if filled in, it represents consent for payments of variable amounts. If it's sent, fixedAmount cannot be provided."
          },
          "maximumVariableAmount": {
            "type": "number",
            "description": "Maximum amount allowed per charge; if filled in, it represents consent for payments of variable amounts. If it's sent, fixedAmount cannot be provided."
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "description": "Represents the expected date for the first occurrence of a payment associated with the recurrence."
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time",
            "description": "Expiration date for the automatic pix authorization"
          },
          "isRetryAccepted": {
            "type": "boolean",
            "description": "Indicates whether the receiving customer is allowed to make payment attempts, according to the rules established in the Pix arrangement."
          },
          "firstPayment": {
            "$ref": "#/components/schemas/AutomaticPixFirstPayment"
          },
          "interval": {
            "type": "string",
            "enum": [
              "WEEKLY",
              "MONTHLY",
              "QUARTERLY",
              "SEMESTER",
              "YEARLY"
            ],
            "description": "Defines the permitted frequency for carrying out transactions."
          }
        },
        "required": [
          "startDate",
          "interval"
        ]
      },
      "AutomaticPixPayment": {
        "description": "Automatic PIX payment",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Payment primary identifier"
          },
          "status": {
            "type": "string",
            "description": "Payment status",
            "enum": [
              "SCHEDULED",
              "CREATED",
              "COMPLETED",
              "CANCELED",
              "ERROR"
            ]
          },
          "amount": {
            "type": "number",
            "description": "Payment amount"
          },
          "description": {
            "type": "string",
            "description": "Payment description"
          },
          "date": {
            "type": "string",
            "format": "date",
            "description": "Payment scheduled date"
          },
          "endToEndId": {
            "type": "string",
            "description": "Payment end to end identifier"
          },
          "errorDetail": {
            "$ref": "#/components/schemas/AutomaticPixPaymentErrorDetail"
          },
          "clientPaymentId": {
            "type": "string",
            "description": "External identifier for the payment"
          }
        },
        "required": [
          "id",
          "status",
          "amount",
          "date"
        ]
      },
      "AutomaticPixPaymentErrorDetail": {
        "type": "object",
        "description": "Details about an error that occurred with the automatic PIX payment",
        "properties": {
          "code": {
            "type": "string",
            "description": "Error codes expected during payment processing:\n- SALDO_INSUFICIENTE: The selected account does not have sufficient balance to make the payment.\n- VALOR_ACIMA_LIMITE: Validates if the amount exceeds the limit established [by the institution (account or channel)/in the arrangement] to allow the client to perform transactions.\n- VALOR_INVALIDO: The submitted amount is not valid.\n- NAO_INFORMADO: Not reported/identified by the account-holding institution.\n- PAGAMENTO_DIVERGENTE_CONSENTIMENTO: Payment data differs from consent data.\n- PAGAMENTO_RECUSADO_DETENTORA: [description of the reason for refusal].\n- PAGAMENTO_RECUSADO_SPI: [error code according to PACS.002 reason domain table].\n- CONSENTIMENTO_INVALIDO: Invalid consent (in final status).\n- FALHA_INFRAESTRUTURA_SPI: Indicates a failure in the Instant Payments System (SPI).\n- FALHA_INFRAESTRUTURA_ICP: Indicates a failure in the Public Key Infrastructure (ICP).\n- FALHA_INFRAESTRUTURA_PSP_RECEBEDOR: Indicates a failure in the infrastructure of the Payment Service Provider (PSP) that receives the payment.\n- FALHA_INFRAESTRUTURA_DETENTORA: Indicates a failure in the infrastructure of the institution holding the information or resources.\n- TITULARIDADE_INCONSISTENTE: Account currently not associated with the CPF/CNPJ of the long-term consent.\n- LIMITE_PERIODO_VALOR_EXCEDIDO: The transaction cannot be performed because the amount parameterized in the consent has been exceeded.\n- LIMITE_PERIODO_QUANTIDADE_EXCEDIDO: The transaction cannot be performed because the quantity parameterized in the consent has been exceeded.\n- LIMITE_VALOR_TOTAL_CONSENTIMENTO_EXCEDIDO: The transaction amount exceeds the global consent limit.\n- LIMITE_VALOR_TRANSACAO_CONSENTIMENTO_EXCEDIDO: The transaction amount exceeds the per-transaction limit set in the consent.\n- LIMITE_TENTATIVAS_EXCEDIDO: The maximum number of settlement attempts allowed by the arrangement has been reached.\n- CONSENTIMENTO_REVOGADO: The payment was associated with a consent that has been revoked.\n- FORA_PRAZO_PERMITIDO: The request time or period does not allow scheduling by the holder.\n- DETALHE_TENTATIVA_INVALIDO: The parameter(s) [field_name(s)] entered for the new payment attempt do not match the original failed payment and are not allowed in the new attempt.\n- DETALHE_PAGAMENTO_INVALIDO: Validates if a given parameter provided complies with the business rules.",
            "enum": [
              "SALDO_INSUFICIENTE",
              "VALOR_ACIMA_LIMITE",
              "VALOR_INVALIDO",
              "NAO_INFORMADO",
              "PAGAMENTO_DIVERGENTE_CONSENTIMENTO",
              "PAGAMENTO_RECUSADO_DETENTORA",
              "PAGAMENTO_RECUSADO_SPI",
              "CONSENTIMENTO_INVALIDO",
              "FALHA_INFRAESTRUTURA_SPI",
              "FALHA_INFRAESTRUTURA_ICP",
              "FALHA_INFRAESTRUTURA_PSP_RECEBEDOR",
              "FALHA_INFRAESTRUTURA_DETENTORA",
              "TITULARIDADE_INCONSISTENTE",
              "LIMITE_PERIODO_VALOR_EXCEDIDO",
              "LIMITE_PERIODO_QUANTIDADE_EXCEDIDO",
              "LIMITE_VALOR_TOTAL_CONSENTIMENTO_EXCEDIDO",
              "LIMITE_VALOR_TRANSACAO_CONSENTIMENTO_EXCEDIDO",
              "LIMITE_TENTATIVAS_EXCEDIDO",
              "CONSENTIMENTO_REVOGADO",
              "FORA_PRAZO_PERMITIDO",
              "DETALHE_TENTATIVA_INVALIDO",
              "DETALHE_PAGAMENTO_INVALIDO"
            ]
          },
          "detail": {
            "type": "string",
            "description": "Additional details about the error"
          }
        },
        "required": [
          "code",
          "detail"
        ]
      },
      "ScheduleAutomaticPixPaymentRequest": {
        "description": "Request to schedule an Automatic PIX payment",
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "description": "Transaction value"
          },
          "description": {
            "type": "string",
            "description": "Transaction description"
          },
          "date": {
            "type": "string",
            "format": "date",
            "description": "The payment date, which must fall between D+2 and D+10. Date format must be YYYY-MM-DD (for example: 2025-06-16)"
          },
          "clientPaymentId": {
            "type": "string",
            "description": "External identifier for the payment"
          }
        },
        "required": [
          "amount",
          "date"
        ]
      },
      "RetryAutomaticPixPaymentRequest": {
        "description": "Request to retry an automatic PIX payment",
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "format": "date",
            "description": "The date to retry the payment within a 7-day window. Date format must be YYYY-MM-DD (for example: 2025-06-16)"
          }
        },
        "required": [
          "date"
        ]
      }
    },
    "x-readme": {
      "explorer-enabled": true,
      "proxy-enabled": true,
      "samples-enabled": true,
      "samples-languages": [
        "curl",
        "node",
        "csharp",
        "java",
        "python",
        "php",
        "ruby",
        "go",
        "r"
      ]
    }
  }
}