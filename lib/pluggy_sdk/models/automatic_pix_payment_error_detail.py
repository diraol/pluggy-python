# coding: utf-8

"""
    Pluggy API

    Pluggy's main API to review data and execute connectors

    The version of the OpenAPI document: 1.0.0
    Contact: hello@pluggy.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class AutomaticPixPaymentErrorDetail(BaseModel):
    """
    Details about an error that occurred with the automatic PIX payment
    """ # noqa: E501
    code: StrictStr = Field(description="Error codes expected during payment processing: - SALDO_INSUFICIENTE: The selected account does not have sufficient balance to make the payment. - VALOR_ACIMA_LIMITE: Validates if the amount exceeds the limit established [by the institution (account or channel)/in the arrangement] to allow the client to perform transactions. - VALOR_INVALIDO: The submitted amount is not valid. - NAO_INFORMADO: Not reported/identified by the account-holding institution. - PAGAMENTO_DIVERGENTE_CONSENTIMENTO: Payment data differs from consent data. - PAGAMENTO_RECUSADO_DETENTORA: [description of the reason for refusal]. - PAGAMENTO_RECUSADO_SPI: [error code according to PACS.002 reason domain table]. - CONSENTIMENTO_INVALIDO: Invalid consent (in final status). - FALHA_INFRAESTRUTURA_SPI: Indicates a failure in the Instant Payments System (SPI). - FALHA_INFRAESTRUTURA_ICP: Indicates a failure in the Public Key Infrastructure (ICP). - FALHA_INFRAESTRUTURA_PSP_RECEBEDOR: Indicates a failure in the infrastructure of the Payment Service Provider (PSP) that receives the payment. - FALHA_INFRAESTRUTURA_DETENTORA: Indicates a failure in the infrastructure of the institution holding the information or resources. - TITULARIDADE_INCONSISTENTE: Account currently not associated with the CPF/CNPJ of the long-term consent. - LIMITE_PERIODO_VALOR_EXCEDIDO: The transaction cannot be performed because the amount parameterized in the consent has been exceeded. - LIMITE_PERIODO_QUANTIDADE_EXCEDIDO: The transaction cannot be performed because the quantity parameterized in the consent has been exceeded. - LIMITE_VALOR_TOTAL_CONSENTIMENTO_EXCEDIDO: The transaction amount exceeds the global consent limit. - LIMITE_VALOR_TRANSACAO_CONSENTIMENTO_EXCEDIDO: The transaction amount exceeds the per-transaction limit set in the consent. - LIMITE_TENTATIVAS_EXCEDIDO: The maximum number of settlement attempts allowed by the arrangement has been reached. - CONSENTIMENTO_REVOGADO: The payment was associated with a consent that has been revoked. - FORA_PRAZO_PERMITIDO: The request time or period does not allow scheduling by the holder. - DETALHE_TENTATIVA_INVALIDO: The parameter(s) [field_name(s)] entered for the new payment attempt do not match the original failed payment and are not allowed in the new attempt. - DETALHE_PAGAMENTO_INVALIDO: Validates if a given parameter provided complies with the business rules.")
    detail: StrictStr = Field(description="Additional details about the error")
    __properties: ClassVar[List[str]] = ["code", "detail"]

    @field_validator('code')
    def code_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['SALDO_INSUFICIENTE', 'VALOR_ACIMA_LIMITE', 'VALOR_INVALIDO', 'NAO_INFORMADO', 'PAGAMENTO_DIVERGENTE_CONSENTIMENTO', 'PAGAMENTO_RECUSADO_DETENTORA', 'PAGAMENTO_RECUSADO_SPI', 'CONSENTIMENTO_INVALIDO', 'FALHA_INFRAESTRUTURA_SPI', 'FALHA_INFRAESTRUTURA_ICP', 'FALHA_INFRAESTRUTURA_PSP_RECEBEDOR', 'FALHA_INFRAESTRUTURA_DETENTORA', 'TITULARIDADE_INCONSISTENTE', 'LIMITE_PERIODO_VALOR_EXCEDIDO', 'LIMITE_PERIODO_QUANTIDADE_EXCEDIDO', 'LIMITE_VALOR_TOTAL_CONSENTIMENTO_EXCEDIDO', 'LIMITE_VALOR_TRANSACAO_CONSENTIMENTO_EXCEDIDO', 'LIMITE_TENTATIVAS_EXCEDIDO', 'CONSENTIMENTO_REVOGADO', 'FORA_PRAZO_PERMITIDO', 'DETALHE_TENTATIVA_INVALIDO', 'DETALHE_PAGAMENTO_INVALIDO']):
            raise ValueError("must be one of enum values ('SALDO_INSUFICIENTE', 'VALOR_ACIMA_LIMITE', 'VALOR_INVALIDO', 'NAO_INFORMADO', 'PAGAMENTO_DIVERGENTE_CONSENTIMENTO', 'PAGAMENTO_RECUSADO_DETENTORA', 'PAGAMENTO_RECUSADO_SPI', 'CONSENTIMENTO_INVALIDO', 'FALHA_INFRAESTRUTURA_SPI', 'FALHA_INFRAESTRUTURA_ICP', 'FALHA_INFRAESTRUTURA_PSP_RECEBEDOR', 'FALHA_INFRAESTRUTURA_DETENTORA', 'TITULARIDADE_INCONSISTENTE', 'LIMITE_PERIODO_VALOR_EXCEDIDO', 'LIMITE_PERIODO_QUANTIDADE_EXCEDIDO', 'LIMITE_VALOR_TOTAL_CONSENTIMENTO_EXCEDIDO', 'LIMITE_VALOR_TRANSACAO_CONSENTIMENTO_EXCEDIDO', 'LIMITE_TENTATIVAS_EXCEDIDO', 'CONSENTIMENTO_REVOGADO', 'FORA_PRAZO_PERMITIDO', 'DETALHE_TENTATIVA_INVALIDO', 'DETALHE_PAGAMENTO_INVALIDO')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AutomaticPixPaymentErrorDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AutomaticPixPaymentErrorDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "code": obj.get("code"),
            "detail": obj.get("detail")
        })
        return _obj


