# coding: utf-8

"""
    Pluggy API

    Pluggy's main API to review data and execute connectors

    The version of the OpenAPI document: 1.0.0
    Contact: hello@pluggy.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from pluggy_sdk.models.loan import Loan

class TestLoan(unittest.TestCase):
    """Loan unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Loan:
        """Test Loan
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Loan`
        """
        model = Loan()
        if include_optional:
            return Loan(
                id = '',
                item_id = '',
                contract_number = '',
                ipoc_code = '',
                product_name = '',
                type = '',
                var_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                contract_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                disbursement_dates = [
                    'Mon Jan 01 00:00:00 UTC 2024'
                    ],
                settlement_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                contract_amount = 1.337,
                currency_code = 'BRL',
                due_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                installment_periodicity = 'WITHOUT_REGULAR_PERIODICITY',
                installment_periodicity_additional_info = '',
                first_installment_due_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                cet = 1.337,
                amortization_scheduled = 'SAC',
                amortization_scheduled_additional_info = '',
                cnpj_consignee = '',
                interest_rates = [
                    pluggy_sdk.models.loan_interest_rate.LoanInterestRate(
                        tax_type = 'NOMINAL', 
                        interest_rate_type = 'SIMPLE', 
                        tax_periodicity = 'MONTHLY', 
                        calculation = '', 
                        referential_rate_indexer_type = '', 
                        referential_rate_indexer_sub_type = '', 
                        referential_rate_indexer_additional_info = '', 
                        pre_fixed_rate = 1.337, 
                        post_fixed_rate = 1.337, 
                        additional_info = '', )
                    ],
                contracted_fees = [
                    pluggy_sdk.models.loan_contracted_fee.LoanContractedFee(
                        name = '', 
                        code = '', 
                        charge_type = 'UNIQUE', 
                        charge = 'MINIMUM', 
                        amount = 1.337, 
                        rate = 1.337, )
                    ],
                contracted_finance_charges = [
                    pluggy_sdk.models.loan_contracted_finance_charge.LoanContractedFinanceCharge(
                        type = '', 
                        additional_info = '', 
                        rate = 1.337, )
                    ],
                warranties = [
                    pluggy_sdk.models.loan_warranty.LoanWarranty(
                        currency_code = 'BRL', 
                        type = '', 
                        subtype = '', 
                        amount = 1.337, )
                    ],
                installments = ERROR_TO_EXAMPLE_VALUE,
                payments = pluggy_sdk.models.loan_payments.LoanPayments(
                    contract_outstanding_balance = 1.337, 
                    releases = [
                        pluggy_sdk.models.loan_payment_release.LoanPaymentRelease(
                            is_over_parcel_payment = True, 
                            installment_id = '', 
                            paid_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            currency_code = 'BRL', 
                            paid_amount = 1.337, 
                            over_parcel = pluggy_sdk.models.loan_payment_release_over_parcel.LoanPaymentReleaseOverParcel(
                                fees = [
                                    pluggy_sdk.models.loan_payment_release_over_parcel_fee.LoanPaymentReleaseOverParcelFee(
                                        name = '', 
                                        code = '', 
                                        amount = 1.337, )
                                    ], 
                                charges = [
                                    pluggy_sdk.models.loan_payment_release_over_parcel_charge.LoanPaymentReleaseOverParcelCharge(
                                        type = '', 
                                        additional_info = '', 
                                        amount = 1.337, )
                                    ], ), )
                        ], )
            )
        else:
            return Loan(
                id = '',
                item_id = '',
                product_name = '',
                var_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                currency_code = 'BRL',
        )
        """

    def testLoan(self):
        """Test Loan"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
