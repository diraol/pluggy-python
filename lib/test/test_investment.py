# coding: utf-8

"""
    Pluggy API

    Pluggy's main API to review data and execute connectors

    The version of the OpenAPI document: 1.0.0
    Contact: hello@pluggy.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from pluggy_sdk.models.investment import Investment

class TestInvestment(unittest.TestCase):
    """Investment unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Investment:
        """Test Investment
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Investment`
        """
        model = Investment()
        if include_optional:
            return Investment(
                id = '',
                item_id = '',
                type = 'COE',
                subtype = 'STRUCTURED_NOTE',
                number = '',
                balance = 1.337,
                name = '',
                last_month_rate = 1.337,
                last_twelve_months_rate = 1.337,
                annual_rate = 1.337,
                currency_code = '',
                code = '',
                isin = '',
                value = 1.337,
                quantity = 1.337,
                amount = 1.337,
                taxes = 1.337,
                taxes2 = 1.337,
                var_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                owner = '',
                amount_profit = 1.337,
                amount_withdrawal = 1.337,
                amount_original = 1.337,
                metadata = pluggy_sdk.models.investment_metadata.InvestmentMetadata(
                    tax_regime = '', 
                    proposal_number = '', 
                    process_number = '', 
                    fund_name = '', 
                    insurer = pluggy_sdk.models.company.Company(
                        name = '', 
                        cnpj = '', ), ),
                transactions = [
                    pluggy_sdk.models.investment_transaction.InvestmentTransaction(
                        type = 'BUY', 
                        movement_type = 'CREDIT', 
                        quantity = 1.337, 
                        value = 1.337, 
                        amount = 1.337, 
                        date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        trade_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        expenses = pluggy_sdk.models.investment_expenses.InvestmentExpenses(
                            service_tax = 1.337, 
                            brokerage_fee = 1.337, 
                            income_tax = 1.337, 
                            trading_assets_notice_fee = 1.337, 
                            maintenance_fee = 1.337, 
                            settlement_fee = 1.337, 
                            clearing_fee = 1.337, 
                            stock_exchange_fee = 1.337, 
                            custody_fee = 1.337, 
                            operating_fee = 1.337, 
                            other = 1.337, ), )
                    ],
                due_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                issuer = '',
                issuer_cnpj = '',
                issue_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                rate = 1.337,
                rate_type = '',
                fixed_annual_rate = 1.337,
                status = 'ACTIVE'
            )
        else:
            return Investment(
                id = '',
                item_id = '',
                type = 'COE',
                balance = 1.337,
                name = '',
                currency_code = '',
                var_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
        )
        """

    def testInvestment(self):
        """Test Investment"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
