# coding: utf-8

"""
    Pluggy API

    Pluggy's main API to review data and execute connectors

    The version of the OpenAPI document: 1.0.0
    Contact: hello@pluggy.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.transaction import Transaction

class TestTransaction(unittest.TestCase):
    """Transaction unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Transaction:
        """Test Transaction
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Transaction`
        """
        model = Transaction()
        if include_optional:
            return Transaction(
                id = '',
                description = '',
                currency_code = '',
                amount = 1.337,
                amount_in_account_currency = 1.337,
                var_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                type = 'DEBIT',
                balance = 1.337,
                provider_code = '',
                status = '',
                category = '',
                category_id = '',
                payment_data = openapi_client.models.payment_data.PaymentData(
                    payer = openapi_client.models.payment_data_participant.PaymentDataParticipant(
                        document_number = openapi_client.models.document.Document(
                            type = 'CPF', 
                            value = '416.799.495-00', ), 
                        name = '', 
                        account_number = '', 
                        branch_number = '', 
                        routing_number = '', 
                        routing_number_ispb = '', ), 
                    receiver = openapi_client.models.payment_data_participant.PaymentDataParticipant(
                        name = '', 
                        account_number = '', 
                        branch_number = '', 
                        routing_number = '', 
                        routing_number_ispb = '', ), 
                    reason = '', 
                    reference_number = '', 
                    receiver_reference_id = '', 
                    payment_method = '', ),
                acquirer_data = openapi_client.models.acquirer_data.AcquirerData(
                    type = 'SALE', 
                    sale_data = openapi_client.models.acquirer_sale_data.AcquirerSaleData(
                        nsu = '', 
                        authorization_code = '', 
                        payment_method = 'CARD', 
                        net_amount = 1.337, 
                        mdr_fee = 1.337, 
                        mdr_fee_amount = 1.337, 
                        status = 'APPROVED', 
                        installment_count = 1.337, 
                        installments = [
                            openapi_client.models.acquirer_sale_installment.AcquirerSaleInstallment(
                                number = 1.337, 
                                net_amount = 1.337, 
                                receipt_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                            ], 
                        card_flag = '', 
                        card_number = '', 
                        card_funding_source = 'CREDIT', 
                        terminal_id = '', ), 
                    receivable_data = openapi_client.models.acquirer_receivable_data.AcquirerReceivableData(
                        settlement_status = 'SENT', 
                        card_flag = '', 
                        establishment = openapi_client.models.acquirer_receivable_data_establishment.AcquirerReceivableData_establishment(
                            company_code = '', 
                            company_name = '', 
                            receiving_bank = '', 
                            agency = '', 
                            account = '', ), 
                        net_amount = 1.337, ), 
                    anticipation_data = openapi_client.models.acquirer_anticipation_data.AcquirerAnticipationData(
                        status = 'SIMULATED', 
                        net_amount = 1.337, 
                        fee = 1.337, 
                        fee_amount = 1.337, ), ),
                credit_card_metadata = openapi_client.models.credit_card_metadata.CreditCardMetadata(
                    installment_number = 1.337, 
                    total_installments = 1.337, 
                    total_amount = 1.337, 
                    purchase_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    payee_mcc = '', 
                    card_number = '', 
                    bill_id = '', ),
                merchant = openapi_client.models.merchant.Merchant(
                    name = '', 
                    business_name = '', 
                    cnpj = '', 
                    cnae = '', 
                    category = '', )
            )
        else:
            return Transaction(
                id = '',
                description = '',
                currency_code = '',
                amount = 1.337,
                var_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
        )
        """

    def testTransaction(self):
        """Test Transaction"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
